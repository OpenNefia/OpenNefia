using System.Collections.Generic;
using System.Linq;
using OpenNefia.XamlNameGenerator.Domain;
using XamlX.TypeSystem;

namespace OpenNefia.XamlNameGenerator.Generator;

internal class OnlyPropertiesCodeGenerator : ICodeGenerator
{
    public string GenerateCode(string className, IList<string> generics, string nameSpace, IXamlType xamlType, IEnumerable<ResolvedName> names)
    {
        var namedControls = names
            .Select(info => "        " +
                            $"{info.GetAccessString()} global::{info.TypeName} {info.Name} => " +
                            $"this.FindControl<global::{info.TypeName}>(\"{info.Name}\");")
            .ToList();
        var lines = string.Join("\n", namedControls);
        var genericsStr = string.Empty;
        if (generics.Count > 0)
            genericsStr = $"<{string.Join(", ", generics)}>";
        return $@"// <auto-generated />

using OpenNefia.Core.UI.Wisp;
using OpenNefia.Core.UI.Wisp.Controls;

namespace {nameSpace}
{{
    partial class {className}{genericsStr}
    {{
{lines}
    }}
}}
";
    }
}