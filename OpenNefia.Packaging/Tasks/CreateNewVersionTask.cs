using Cake.Common.IO;
using Cake.Core;
using Cake.Core.Diagnostics;
using Cake.Frosting;
using Cake.Git;
using LibGit2Sharp;
using Version = System.Version;

namespace OpenNefia.Packaging.Tasks
{
    [TaskName("CreateNewVersion")]
    public sealed class CreateNewVersionTask : FrostingTask<BuildContext>
    {
        public override void Run(BuildContext context)
        {
            var gitRoot = context.GitFindRootFromPath(context.Environment.WorkingDirectory);
            if (gitRoot == null)
            {
                context.Log.Error("Git repository root not found in any parent directory.");
                return;
            }

            if (context.GitHasUncommitedChanges(gitRoot))
            {
                context.Log.Error("Uncommited changes detected; commit them first before running this task.");
                return;
            }

            if (!context.Arguments.HasArgument("version"))
            {
                context.Log.Error("Argument --version must be provided.");
                return;
            }

            var versionStr = context.Arguments.GetArgument("version");

            if (!Version.TryParse(versionStr, out var version))
            {
                context.Log.Error($"Could not parse version string '{versionStr}'.");
                return;
            }

            var versionTag = $"v{version}";

            var result = context.Prompt($"About to tag version '{versionTag}' in Git repository. Proceed? (Y/N) ");
            if (!result.Equals("y", StringComparison.InvariantCultureIgnoreCase))
            {
                context.Log.Error("Aborting tag.");
                return;
            }

            var props = $@"<Project>
    <!-- This file was autogenerated by the CreateNewVersion task in OpenNefia.Packaging. -->
    <PropertyGroup><Version>{version}</Version></PropertyGroup>
</Project>
";

            var propsFile = gitRoot.Combine("MSBuild/OpenNefia.Engine.Version.props");
            File.WriteAllText(propsFile.FullPath, props);

            context.GitAdd(gitRoot, propsFile.FullPath);

            var fileOnly = context.Arguments.HasArgument("file-only");

            if (fileOnly)
            {
                context.Log.Information("Skipping Git commit and tag.");
                return;
            }

            var name = context.GitConfigGet<string>(gitRoot, "user.name");
            var email = context.GitConfigGet<string>(gitRoot, "user.email");

            using (var repository = new Repository(gitRoot.FullPath))
            {
                var sig = new Signature(name, email, DateTimeOffset.Now);
                var commitOpts = new CommitOptions()
                {
                    AllowEmptyCommit = true
                };
                repository.Commit($"Version: {versionTag}", sig, sig, commitOpts);

                repository.ApplyTag(versionTag, sig, versionTag);
            }

            context.Log.Information($"Tagged version {versionTag}");
        }
    }
}
