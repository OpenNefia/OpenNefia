#nullable enable
abstract OpenNefia.Core.Containers.BaseContainer.ContainedEntities.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.GameObjects.EntityUid>!
abstract OpenNefia.Core.Containers.BaseContainer.ContainerType.get -> string!
abstract OpenNefia.Core.Containers.BaseContainer.Contains(OpenNefia.Core.GameObjects.EntityUid contained) -> bool
abstract OpenNefia.Core.GameObjects.Component.Name.get -> string!
abstract OpenNefia.Core.Input.Binding.InputCmdHandler.HandleCmdMessage(OpenNefia.Core.Game.IGameSessionManager? session, OpenNefia.Core.Input.InputCmdMessage! message) -> OpenNefia.Core.GameObjects.TurnResult?
abstract OpenNefia.Core.ResourceManagement.BaseResource.Load(OpenNefia.Core.ResourceManagement.IResourceCache! cache, OpenNefia.Core.Utility.ResourcePath! path) -> void
abstract OpenNefia.Core.Serialization.Manager.Result.DeserializationResult.CallAfterDeserializationHook() -> void
abstract OpenNefia.Core.Serialization.Manager.Result.DeserializationResult.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
abstract OpenNefia.Core.Serialization.Manager.Result.DeserializationResult.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
abstract OpenNefia.Core.Serialization.Manager.Result.DeserializationResult.RawValue.get -> object?
abstract OpenNefia.Core.Serialization.Manager.Result.DeserializationResult<T>.Value.get -> T?
abstract OpenNefia.Core.Serialization.Markdown.DataNode.Copy() -> OpenNefia.Core.Serialization.Markdown.DataNode!
abstract OpenNefia.Core.Serialization.Markdown.DataNode.Except(OpenNefia.Core.Serialization.Markdown.DataNode! node) -> OpenNefia.Core.Serialization.Markdown.DataNode?
abstract OpenNefia.Core.Serialization.Markdown.DataNode<T>.Except(T! node) -> T?
abstract OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode.GetErrors() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode!>!
abstract OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode.Valid.get -> bool
abstract OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Stats.Stat<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
abstract OpenNefia.Core.UI.Element.BaseDrawable.Draw() -> void
abstract OpenNefia.Core.UI.Element.BaseDrawable.Update(float dt) -> void
abstract OpenNefia.Core.UI.Wisp.Drawing.StyleBox.DoDraw(OpenNefia.Core.Maths.UIBox2 pixelBox, OpenNefia.Core.Maths.Color tint) -> void
abstract OpenNefia.Core.UI.Wisp.Styling.MutableSelector.ToSelector() -> OpenNefia.Core.UI.Wisp.Styling.Selector!
abstract OpenNefia.Core.UI.Wisp.Styling.Selector.CalculateSpecificity() -> OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity
abstract OpenNefia.Core.UI.Wisp.Styling.Selector.Matches(OpenNefia.Core.UI.Wisp.WispControl! control) -> bool
abstract OpenNefia.Core.ViewVariables.ViewVariablesPropertyMatcher.PropEditorFor(System.Type! type) -> OpenNefia.Core.ViewVariables.VVPropEditor?
abstract OpenNefia.Core.ViewVariables.VVPropEditor.MakeUI(object? value) -> OpenNefia.Core.UI.Wisp.WispControl!
Avalonia.Data.Binding
Avalonia.Data.Binding.Binding() -> void
Avalonia.Metadata.XmlnsDefinitionAttribute
Avalonia.Metadata.XmlnsDefinitionAttribute.ClrNamespace.get -> string!
Avalonia.Metadata.XmlnsDefinitionAttribute.XmlNamespace.get -> string!
Avalonia.Metadata.XmlnsDefinitionAttribute.XmlnsDefinitionAttribute(string! xmlNamespace, string! clrNamespace) -> void
const OpenNefia.Core.Configuration.EnvironmentVariables.ConfigVarEnvironmentVariable = "OPENNEFIA_CVARS" -> string!
const OpenNefia.Core.Console.ConsoleHost.SawmillName = "con" -> string!
const OpenNefia.Core.ControlDesigner.ControlDesignerLayer.StyleClassDesignerBackground = "designerBackground" -> string!
const OpenNefia.Core.ControlDesigner.ControlDesignerLayer.StyleClassDesignerPointer = "designerPointer" -> string!
const OpenNefia.Core.ControlDesigner.ControlDesignerLayer.StyleClassDesignerToolbar = "designerToolbar" -> string!
const OpenNefia.Core.ControlDesigner.MeasurementPointer.StyleClassPointerText = "pointerText" -> string!
const OpenNefia.Core.ControlDesigner.MeasurementPointer.StylePropertyRulerColor = "rulerColor" -> string!
const OpenNefia.Core.ControlDesigner.MeasurementPointer.StylePropertyRulerThickness = "rulerThickness" -> string!
const OpenNefia.Core.Engine.NameBase = "OpenNefia.NET" -> string!
const OpenNefia.Core.Engine.Title = "OpenNefia" -> string!
const OpenNefia.Core.GameObjects.DrawDepth.Default = 0 -> int
const OpenNefia.Core.GameObjects.EventPriorities.Default = 0 -> long
const OpenNefia.Core.GameObjects.EventPriorities.High = -100000 -> long
const OpenNefia.Core.GameObjects.EventPriorities.Highest = -1000000000 -> long
const OpenNefia.Core.GameObjects.EventPriorities.Low = 100000 -> long
const OpenNefia.Core.GameObjects.EventPriorities.Lowest = 1000000000 -> long
const OpenNefia.Core.GameObjects.EventPriorities.VeryHigh = -10000000 -> long
const OpenNefia.Core.GameObjects.EventPriorities.VeryLow = 10000000 -> long
const OpenNefia.Core.Graphics.LoveGraphics.MinHeight = 600 -> float
const OpenNefia.Core.Graphics.LoveGraphics.MinWidth = 800 -> float
const OpenNefia.Core.Log.LogManager.ROOT = "root" -> string!
const OpenNefia.Core.Log.LogManager.SawmillProperty = "Sawmill" -> string!
const OpenNefia.Core.Log.LogMessage.LogNameDebug = "DEBG" -> string!
const OpenNefia.Core.Log.LogMessage.LogNameError = "ERRO" -> string!
const OpenNefia.Core.Log.LogMessage.LogNameFatal = "FATL" -> string!
const OpenNefia.Core.Log.LogMessage.LogNameInfo = "INFO" -> string!
const OpenNefia.Core.Log.LogMessage.LogNameUnknown = "UNKO" -> string!
const OpenNefia.Core.Log.LogMessage.LogNameVerbose = "VERB" -> string!
const OpenNefia.Core.Log.LogMessage.LogNameWarning = "WARN" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Entities = "entities" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Entities_Components = "components" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Entities_Components_Type = "type" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Entities_ProtoId = "protoId" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Entities_RemovedComponents = "removedComponents" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Entities_Uid = "uid" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Grid = "grid" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.GridInSight = "gridInSight" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.GridLastSightId = "gridLastSightId" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.GridMemory = "gridMemory" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.MapBlueprintFormatVersion = 1 -> int
const OpenNefia.Core.Maps.MapLoadConstants.Meta = "meta" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Meta_Author = "author" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Meta_Format = "format" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Meta_Name = "name" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.ObjectMemory = "objectMemory" -> string!
const OpenNefia.Core.Maps.MapLoadConstants.Tilemap = "tilemap" -> string!
const OpenNefia.Core.Maps.MapLoader.SawmillName = "map.load" -> string!
const OpenNefia.Core.Maths.MathHelper.E = 2.7182817 -> float
const OpenNefia.Core.Maths.MathHelper.Log10E = 0.4342945 -> float
const OpenNefia.Core.Maths.MathHelper.Log2E = 1.442695 -> float
const OpenNefia.Core.Maths.MathHelper.Pi = 3.1415927 -> float
const OpenNefia.Core.Maths.MathHelper.PiOver2 = 1.5707964 -> float
const OpenNefia.Core.Maths.MathHelper.PiOver3 = 1.0471976 -> float
const OpenNefia.Core.Maths.MathHelper.PiOver4 = 0.7853982 -> float
const OpenNefia.Core.Maths.MathHelper.PiOver6 = 0.5235988 -> float
const OpenNefia.Core.Maths.MathHelper.ThreePiOver2 = 4.712389 -> float
const OpenNefia.Core.Maths.MathHelper.TwoPi = 6.2831855 -> float
const OpenNefia.Core.Prototypes.ElonaVariants.Elona122 = "elona122" -> string!
const OpenNefia.Core.Prototypes.HspEntityTypes.Chara = "chara" -> string!
const OpenNefia.Core.Prototypes.HspEntityTypes.Feat = "feat" -> string!
const OpenNefia.Core.Prototypes.HspEntityTypes.Item = "item" -> string!
const OpenNefia.Core.Prototypes.HspEntityTypes.Mef = "mef" -> string!
const OpenNefia.Core.Reflection.ReflectAttribute.DEFAULT_DISCOVERABLE = true -> bool
const OpenNefia.Core.Rendering.AtlasNames.Chip = "Chip" -> string!
const OpenNefia.Core.Rendering.AtlasNames.Tile = "Tile" -> string!
const OpenNefia.Core.Rendering.IsometricCoords.TILE_SIZE = 64 -> int
const OpenNefia.Core.SaveGames.SaveGameManager.SaveFormatVersion = 1 -> int
const OpenNefia.Core.SaveGames.SaveGameManager.SavesPath = "/Saves" -> string!
const OpenNefia.Core.SaveGames.SaveGameManager.SawmillName = "save" -> string!
const OpenNefia.Core.SaveGames.SaveGameManager.TempPath = "/Temp" -> string!
const OpenNefia.Core.SaveGames.SaveGameSerializer.SawmillName = "save.game" -> string!
const OpenNefia.Core.Serialization.Manager.SerializationManager.LogCategory = "serialization" -> string!
const OpenNefia.Core.UI.Constants.FRAME_MS = 0.01666 -> float
const OpenNefia.Core.UI.Constants.INF_BARH = 16 -> int
const OpenNefia.Core.UI.Constants.INF_MSGH = 72 -> int
const OpenNefia.Core.UI.Constants.INF_VERH = 88 -> int
const OpenNefia.Core.UI.Constants.SCREEN_REFRESH = 0.33319998 -> float
const OpenNefia.Core.UI.Wisp.Controls.BoxContainer.StylePropertySeparation = "separation" -> string!
const OpenNefia.Core.UI.Wisp.Controls.CheckBox.StyleClassCheckBox = "checkBox" -> string!
const OpenNefia.Core.UI.Wisp.Controls.CheckBox.StyleClassCheckBoxChecked = "checkBoxChecked" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ContainerButton.StyleClassButton = "button" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ContainerButton.StylePropertyStyleBox = "styleBox" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ContainerButton.StylePseudoClassDisabled = "disabled" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ContainerButton.StylePseudoClassHover = "hover" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ContainerButton.StylePseudoClassNormal = "normal" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ContainerButton.StylePseudoClassPressed = "pressed" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ItemList.StylePropertyBackground = "itemlistBackground" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ItemList.StylePropertyDisabledItemBackground = "disabledItemBackground" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ItemList.StylePropertyItemBackground = "itemBackground" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ItemList.StylePropertySelectedItemBackground = "selectedItemBackground" -> string!
const OpenNefia.Core.UI.Wisp.Controls.Label.StylePropertyAlignMode = "alignMode" -> string!
const OpenNefia.Core.UI.Wisp.Controls.Label.StylePropertyFont = "font" -> string!
const OpenNefia.Core.UI.Wisp.Controls.Label.StylePropertyFontColor = "fontColor" -> string!
const OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.AnchorBegin = 0 -> float
const OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.AnchorEnd = 1 -> float
const OpenNefia.Core.UI.Wisp.Controls.LineEdit.StyleClassLineEditNotEditable = "notEditable" -> string!
const OpenNefia.Core.UI.Wisp.Controls.LineEdit.StylePropertyCursorColor = "cursorColor" -> string!
const OpenNefia.Core.UI.Wisp.Controls.LineEdit.StylePropertySelectionColor = "selectionColor" -> string!
const OpenNefia.Core.UI.Wisp.Controls.LineEdit.StylePropertyStyleBox = "styleBox" -> string!
const OpenNefia.Core.UI.Wisp.Controls.LineEdit.StylePseudoClassPlaceholder = "placeholder" -> string!
const OpenNefia.Core.UI.Wisp.Controls.OptionButton.StyleClassOptionButton = "optionButton" -> string!
const OpenNefia.Core.UI.Wisp.Controls.OptionButton.StyleClassOptionTriangle = "optionTriangle" -> string!
const OpenNefia.Core.UI.Wisp.Controls.PanelContainer.StylePropertyPanel = "panel" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ScrollBar.StylePropertyGrabber = "grabber" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ScrollBar.StylePseudoClassGrabbed = "grabbed" -> string!
const OpenNefia.Core.UI.Wisp.Controls.ScrollBar.StylePseudoClassHover = "hover" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TabContainer.StylePropertyFont = "font" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TabContainer.StylePropertyPanelStyleBox = "panelStyleBox" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TabContainer.stylePropertyTabFontColor = "tabFontColor" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TabContainer.StylePropertyTabFontColorInactive = "tabFontColorInactive" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TabContainer.StylePropertyTabStyleBox = "tabStyleBox" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TabContainer.StylePropertyTabStyleBoxInactive = "tabStyleBoxInactive" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TextureButton.StylePropertyTexture = "texture" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TextureButton.StylePseudoClassDisabled = "disabled" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TextureButton.StylePseudoClassHover = "hover" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TextureButton.StylePseudoClassNormal = "normal" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TextureButton.StylePseudoClassPressed = "pressed" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TextureRect.StylePropertyShader = "shader" -> string!
const OpenNefia.Core.UI.Wisp.Controls.TextureRect.StylePropertyTexture = "texture" -> string!
const OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.StyleClassWindowCloseButton = "windowCloseButton" -> string!
const OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.StyleClassWindowHeader = "windowHeader" -> string!
const OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.StyleClassWindowHeaderAlert = "windowHeaderAlert" -> string!
const OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.StyleClassWindowPanel = "windowPanel" -> string!
const OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.StyleClassWindowTitle = "windowTitle" -> string!
const OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.StyleClassWindowTitleAlert = "windowTitleAlert" -> string!
const OpenNefia.Core.UI.Wisp.Styling.StyleNano.StyleClassItalic = "Italic" -> string!
const OpenNefia.Core.UI.Wisp.WispControl.StylePropertyTint = "tint" -> string!
const OpenNefia.Core.UI.Wisp.WispControl.StylePropertyTintSelf = "tintSelf" -> string!
const OpenNefia.Core.Utility.ResourcePath.SYSTEM_SEPARATOR = "\\" -> string!
OpenNefia.Core.Areas.ActiveAreaChangedDelegate
OpenNefia.Core.Areas.AreaAddEvent
OpenNefia.Core.Areas.AreaAddEvent.AreaAddEvent(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Areas.AreaId areaId) -> void
OpenNefia.Core.Areas.AreaAddEvent.AreaId.get -> OpenNefia.Core.Areas.AreaId
OpenNefia.Core.Areas.AreaAddEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Areas.AreaComponent
OpenNefia.Core.Areas.AreaComponent.AreaComponent() -> void
OpenNefia.Core.Areas.AreaComponent.AreaId.get -> OpenNefia.Core.Areas.AreaId
OpenNefia.Core.Areas.AreaEnteredEvent
OpenNefia.Core.Areas.AreaEnteredEvent.AreaEnteredEvent(OpenNefia.Core.Areas.IArea! newArea, OpenNefia.Core.Areas.IArea? oldArea = null) -> void
OpenNefia.Core.Areas.AreaEnteredEvent.NewArea.get -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.AreaEnteredEvent.OldArea.get -> OpenNefia.Core.Areas.IArea?
OpenNefia.Core.Areas.AreaExitedEvent
OpenNefia.Core.Areas.AreaExitedEvent.AreaExitedEvent(OpenNefia.Core.Areas.IArea? newArea, OpenNefia.Core.Areas.IArea! oldArea) -> void
OpenNefia.Core.Areas.AreaExitedEvent.NewArea.get -> OpenNefia.Core.Areas.IArea?
OpenNefia.Core.Areas.AreaExitedEvent.OldArea.get -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.AreaFloor
OpenNefia.Core.Areas.AreaFloor.AreaFloor() -> void
OpenNefia.Core.Areas.AreaFloor.AreaFloor(OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Areas.AreaFloor.MapId.get -> OpenNefia.Core.Maps.MapId?
OpenNefia.Core.Areas.AreaFloorGenerateEvent
OpenNefia.Core.Areas.AreaFloorGenerateEvent.Area.get -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.AreaFloorGenerateEvent.AreaFloorGenerateEvent(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId, OpenNefia.Core.Maps.MapCoordinates previousCoords) -> void
OpenNefia.Core.Areas.AreaFloorGenerateEvent.FloorId.get -> OpenNefia.Core.Areas.AreaFloorId
OpenNefia.Core.Areas.AreaFloorGenerateEvent.Handle(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Areas.AreaFloorGenerateEvent.Handle(OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Areas.AreaFloorGenerateEvent.PreviousCoords.get -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Areas.AreaFloorGenerateEvent.ResultMapId.get -> OpenNefia.Core.Maps.MapId?
OpenNefia.Core.Areas.AreaFloorId
OpenNefia.Core.Areas.AreaFloorId.AreaFloorId() -> void
OpenNefia.Core.Areas.AreaFloorId.AreaFloorId(string! id) -> void
OpenNefia.Core.Areas.AreaFloorId.CompareTo(OpenNefia.Core.Areas.AreaFloorId other) -> int
OpenNefia.Core.Areas.AreaFloorId.Equals(OpenNefia.Core.Areas.AreaFloorId other) -> bool
OpenNefia.Core.Areas.AreaFloorId.IsValid() -> bool
OpenNefia.Core.Areas.AreaGeneratedEvent
OpenNefia.Core.Areas.AreaGeneratedEvent.Area.get -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.AreaGeneratedEvent.AreaGeneratedEvent(OpenNefia.Core.Areas.IArea! area) -> void
OpenNefia.Core.Areas.AreaId
OpenNefia.Core.Areas.AreaId.AreaId() -> void
OpenNefia.Core.Areas.AreaId.AreaId(int value) -> void
OpenNefia.Core.Areas.AreaId.Equals(OpenNefia.Core.Areas.AreaId other) -> bool
OpenNefia.Core.Areas.AreaInitializeEvent
OpenNefia.Core.Areas.AreaInitializeEvent.AreaId.get -> OpenNefia.Core.Areas.AreaId
OpenNefia.Core.Areas.AreaInitializeEvent.AreaInitializeEvent(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Areas.AreaId areaId) -> void
OpenNefia.Core.Areas.AreaInitializeEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Areas.AreaManager
OpenNefia.Core.Areas.AreaManager.ActiveArea.get -> OpenNefia.Core.Areas.IArea?
OpenNefia.Core.Areas.AreaManager.AreaExists(OpenNefia.Core.Areas.AreaId areaId) -> bool
OpenNefia.Core.Areas.AreaManager.AreaManager() -> void
OpenNefia.Core.Areas.AreaManager.CreateArea(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? areaEntityProtoId = null, OpenNefia.Core.Areas.GlobalAreaId? globalId = null, OpenNefia.Core.Areas.AreaId? parent = null) -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.AreaManager.DeleteArea(OpenNefia.Core.Areas.AreaId areaID) -> void
OpenNefia.Core.Areas.AreaManager.FlushAreas() -> void
OpenNefia.Core.Areas.AreaManager.GenerateAreaId() -> OpenNefia.Core.Areas.AreaId
OpenNefia.Core.Areas.AreaManager.GetArea(OpenNefia.Core.Areas.AreaId areasId) -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.AreaManager.GetGlobalArea(OpenNefia.Core.Areas.GlobalAreaId globalId) -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.AreaManager.GetOrGenerateMapForFloor(OpenNefia.Core.Areas.AreaId areaId, OpenNefia.Core.Areas.AreaFloorId floorId) -> OpenNefia.Core.Maps.MapId?
OpenNefia.Core.Areas.AreaManager.GlobalAreaExists(OpenNefia.Core.Areas.GlobalAreaId globalId) -> bool
OpenNefia.Core.Areas.AreaManager.Initialize() -> void
OpenNefia.Core.Areas.AreaManager.NextAreaId.get -> int
OpenNefia.Core.Areas.AreaManager.NextAreaId.set -> void
OpenNefia.Core.Areas.AreaManager.OnActiveAreaChanged -> OpenNefia.Core.Areas.ActiveAreaChangedDelegate?
OpenNefia.Core.Areas.AreaManager.RegisterArea(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaId areaId, OpenNefia.Core.GameObjects.EntityUid areaEntityUid) -> void
OpenNefia.Core.Areas.AreaManager.RegisterAreaFloor(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId, OpenNefia.Core.Areas.AreaFloor! floor) -> void
OpenNefia.Core.Areas.AreaManager.RegisterAreaFloor(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId, OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Areas.AreaManager.RegisterAreaFloor(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId, OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Areas.AreaManager.SetAreaEntity(OpenNefia.Core.Areas.AreaId areaId, OpenNefia.Core.GameObjects.EntityUid newAreaEntity) -> void
OpenNefia.Core.Areas.AreaManager.Shutdown() -> void
OpenNefia.Core.Areas.AreaManager.TryGetArea(OpenNefia.Core.Areas.AreaId areaId, out OpenNefia.Core.Areas.IArea? area) -> bool
OpenNefia.Core.Areas.AreaManager.TryGetAreaAndFloorOfMap(OpenNefia.Core.Maps.MapId map, out OpenNefia.Core.Areas.IArea? area, out OpenNefia.Core.Areas.AreaFloorId floorId) -> bool
OpenNefia.Core.Areas.AreaManager.TryGetAreaOfMap(OpenNefia.Core.Maps.IMap! map, out OpenNefia.Core.Areas.IArea? area) -> bool
OpenNefia.Core.Areas.AreaManager.TryGetAreaOfMap(OpenNefia.Core.Maps.MapId map, out OpenNefia.Core.Areas.IArea? area) -> bool
OpenNefia.Core.Areas.AreaManager.TryGetGlobalArea(OpenNefia.Core.Areas.GlobalAreaId globalId, out OpenNefia.Core.Areas.IArea? area) -> bool
OpenNefia.Core.Areas.AreaManager.TryGetParentArea(OpenNefia.Core.Areas.AreaId areaId, out OpenNefia.Core.Areas.IArea? parentArea) -> bool
OpenNefia.Core.Areas.AreaManager.UnregisterAreaFloor(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId) -> void
OpenNefia.Core.Areas.AreaStartupEvent
OpenNefia.Core.Areas.AreaStartupEvent.AreaId.get -> OpenNefia.Core.Areas.AreaId
OpenNefia.Core.Areas.AreaStartupEvent.AreaStartupEvent(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Areas.AreaId areaId) -> void
OpenNefia.Core.Areas.AreaStartupEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Areas.GlobalAreaId
OpenNefia.Core.Areas.GlobalAreaId.CompareTo(OpenNefia.Core.Areas.GlobalAreaId other) -> int
OpenNefia.Core.Areas.GlobalAreaId.Equals(OpenNefia.Core.Areas.GlobalAreaId other) -> bool
OpenNefia.Core.Areas.GlobalAreaId.GlobalAreaId() -> void
OpenNefia.Core.Areas.GlobalAreaId.GlobalAreaId(string! id) -> void
OpenNefia.Core.Areas.GlobalAreaId.IsValid() -> bool
OpenNefia.Core.Areas.IArea
OpenNefia.Core.Areas.IArea.AreaEntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Areas.IArea.ContainedMaps.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Areas.AreaFloorId, OpenNefia.Core.Areas.AreaFloor!>!
OpenNefia.Core.Areas.IArea.GlobalId.get -> OpenNefia.Core.Areas.GlobalAreaId?
OpenNefia.Core.Areas.IArea.Id.get -> OpenNefia.Core.Areas.AreaId
OpenNefia.Core.Areas.IArea.StartingFloor.get -> OpenNefia.Core.Areas.AreaFloorId?
OpenNefia.Core.Areas.IArea.StartingFloor.set -> void
OpenNefia.Core.Areas.IAreaManager
OpenNefia.Core.Areas.IAreaManager.ActiveArea.get -> OpenNefia.Core.Areas.IArea?
OpenNefia.Core.Areas.IAreaManager.AreaExists(OpenNefia.Core.Areas.AreaId areaId) -> bool
OpenNefia.Core.Areas.IAreaManager.CreateArea(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? areaEntityProtoId, OpenNefia.Core.Areas.GlobalAreaId? globalId = null, OpenNefia.Core.Areas.AreaId? parent = null) -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.IAreaManager.DeleteArea(OpenNefia.Core.Areas.AreaId areaId) -> void
OpenNefia.Core.Areas.IAreaManager.GetArea(OpenNefia.Core.Areas.AreaId areaId) -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.IAreaManager.GetGlobalArea(OpenNefia.Core.Areas.GlobalAreaId globalId) -> OpenNefia.Core.Areas.IArea!
OpenNefia.Core.Areas.IAreaManager.GetOrGenerateMapForFloor(OpenNefia.Core.Areas.AreaId areaId, OpenNefia.Core.Areas.AreaFloorId floorId) -> OpenNefia.Core.Maps.MapId?
OpenNefia.Core.Areas.IAreaManager.GlobalAreaExists(OpenNefia.Core.Areas.GlobalAreaId globalId) -> bool
OpenNefia.Core.Areas.IAreaManager.LoadedAreas.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Areas.AreaId, OpenNefia.Core.Areas.IArea!>!
OpenNefia.Core.Areas.IAreaManager.OnActiveAreaChanged -> OpenNefia.Core.Areas.ActiveAreaChangedDelegate?
OpenNefia.Core.Areas.IAreaManager.RegisterAreaFloor(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId, OpenNefia.Core.Areas.AreaFloor! areaFloor) -> void
OpenNefia.Core.Areas.IAreaManager.RegisterAreaFloor(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId, OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Areas.IAreaManager.RegisterAreaFloor(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId, OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Areas.IAreaManager.TryGetArea(OpenNefia.Core.Areas.AreaId areaId, out OpenNefia.Core.Areas.IArea? area) -> bool
OpenNefia.Core.Areas.IAreaManager.TryGetAreaAndFloorOfMap(OpenNefia.Core.Maps.MapId map, out OpenNefia.Core.Areas.IArea? area, out OpenNefia.Core.Areas.AreaFloorId floorId) -> bool
OpenNefia.Core.Areas.IAreaManager.TryGetAreaOfMap(OpenNefia.Core.Maps.IMap! map, out OpenNefia.Core.Areas.IArea? area) -> bool
OpenNefia.Core.Areas.IAreaManager.TryGetAreaOfMap(OpenNefia.Core.Maps.MapId map, out OpenNefia.Core.Areas.IArea? area) -> bool
OpenNefia.Core.Areas.IAreaManager.TryGetGlobalArea(OpenNefia.Core.Areas.GlobalAreaId globalId, out OpenNefia.Core.Areas.IArea? area) -> bool
OpenNefia.Core.Areas.IAreaManager.TryGetParentArea(OpenNefia.Core.Areas.AreaId areaId, out OpenNefia.Core.Areas.IArea? parentArea) -> bool
OpenNefia.Core.Areas.IAreaManager.UnregisterAreaFloor(OpenNefia.Core.Areas.IArea! area, OpenNefia.Core.Areas.AreaFloorId floorId) -> void
OpenNefia.Core.Asynchronous.HeadlessTaskRunner
OpenNefia.Core.Asynchronous.HeadlessTaskRunner.HeadlessTaskRunner() -> void
OpenNefia.Core.Asynchronous.HeadlessTaskRunner.Run(System.Threading.Tasks.Task! task) -> void
OpenNefia.Core.Asynchronous.HeadlessTaskRunner.Run<T>(System.Threading.Tasks.Task<T>! task) -> T
OpenNefia.Core.Asynchronous.ITaskManager
OpenNefia.Core.Asynchronous.ITaskManager.Initialize() -> void
OpenNefia.Core.Asynchronous.ITaskManager.ProcessPendingTasks() -> void
OpenNefia.Core.Asynchronous.ITaskManager.RunOnMainThread(System.Action! callback) -> void
OpenNefia.Core.Asynchronous.ITaskRunner
OpenNefia.Core.Asynchronous.ITaskRunner.Run(System.Threading.Tasks.Task! task) -> void
OpenNefia.Core.Asynchronous.ITaskRunner.Run<T>(System.Threading.Tasks.Task<T>! task) -> T
OpenNefia.Core.Asynchronous.LoveTaskRunner
OpenNefia.Core.Asynchronous.LoveTaskRunner.LoveTaskRunner() -> void
OpenNefia.Core.Asynchronous.LoveTaskRunner.Run(System.Threading.Tasks.Task! task) -> void
OpenNefia.Core.Asynchronous.LoveTaskRunner.Run<T>(System.Threading.Tasks.Task<T>! task) -> T
OpenNefia.Core.Asynchronous.RobustTaskScheduler
OpenNefia.Core.Asynchronous.TaskRunnerLayer
OpenNefia.Core.Asynchronous.TaskRunnerLayer.TaskRunnerLayer() -> void
OpenNefia.Core.Audio.AudioParams
OpenNefia.Core.Audio.AudioParams.AudioParams() -> void
OpenNefia.Core.Audio.AudioParams.Volume.get -> float
OpenNefia.Core.Audio.AudioParams.Volume.set -> void
OpenNefia.Core.Audio.AudioSystem
OpenNefia.Core.Audio.AudioSystem.AudioSystem() -> void
OpenNefia.Core.Audio.HeadlessAudioManager
OpenNefia.Core.Audio.HeadlessAudioManager.HeadlessAudioManager() -> void
OpenNefia.Core.Audio.HeadlessAudioManager.Initialize() -> void
OpenNefia.Core.Audio.HeadlessAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.HeadlessAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.GameObjects.EntityUid entityUid, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.HeadlessAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.HeadlessAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Maths.Vector2i screenPosition, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.HeadlessAudioManager.SetListenerPosition(OpenNefia.Core.Maths.Vector2 listenerPos) -> void
OpenNefia.Core.Audio.HeadlessAudioManager.Shutdown() -> void
OpenNefia.Core.Audio.HeadlessMusicManager
OpenNefia.Core.Audio.HeadlessMusicManager.GetMidiOutputDevices() -> System.Collections.Generic.IEnumerable<Melanchall.DryWetMidi.Multimedia.OutputDevice!>!
OpenNefia.Core.Audio.HeadlessMusicManager.HeadlessMusicManager() -> void
OpenNefia.Core.Audio.HeadlessMusicManager.Initialize() -> void
OpenNefia.Core.Audio.HeadlessMusicManager.IsPlaying.get -> bool
OpenNefia.Core.Audio.HeadlessMusicManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.MusicPrototype!> musicId) -> void
OpenNefia.Core.Audio.HeadlessMusicManager.Restart() -> void
OpenNefia.Core.Audio.HeadlessMusicManager.Shutdown() -> void
OpenNefia.Core.Audio.HeadlessMusicManager.Stop() -> void
OpenNefia.Core.Audio.IAudioManager
OpenNefia.Core.Audio.IAudioManager.Initialize() -> void
OpenNefia.Core.Audio.IAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.IAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.GameObjects.EntityUid entityUid, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.IAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.IAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Maths.Vector2i screenPosition, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.IAudioManager.SetListenerPosition(OpenNefia.Core.Maths.Vector2 listenerPos) -> void
OpenNefia.Core.Audio.IAudioManager.Shutdown() -> void
OpenNefia.Core.Audio.IMusicManager
OpenNefia.Core.Audio.IMusicManager.GetMidiOutputDevices() -> System.Collections.Generic.IEnumerable<Melanchall.DryWetMidi.Multimedia.OutputDevice!>!
OpenNefia.Core.Audio.IMusicManager.Initialize() -> void
OpenNefia.Core.Audio.IMusicManager.IsPlaying.get -> bool
OpenNefia.Core.Audio.IMusicManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.MusicPrototype!> musicId) -> void
OpenNefia.Core.Audio.IMusicManager.Restart() -> void
OpenNefia.Core.Audio.IMusicManager.Shutdown() -> void
OpenNefia.Core.Audio.IMusicManager.Stop() -> void
OpenNefia.Core.Audio.LoveAudioManager
OpenNefia.Core.Audio.LoveAudioManager.Initialize() -> void
OpenNefia.Core.Audio.LoveAudioManager.LoveAudioManager() -> void
OpenNefia.Core.Audio.LoveAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.LoveAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.LoveAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.LoveAudioManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> soundId, OpenNefia.Core.Maths.Vector2i screenPosition, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
OpenNefia.Core.Audio.LoveAudioManager.SetListenerPosition(OpenNefia.Core.Maths.Vector2 listenerPos) -> void
OpenNefia.Core.Audio.LoveAudioManager.Shutdown() -> void
OpenNefia.Core.Audio.LoveMusicManager
OpenNefia.Core.Audio.LoveMusicManager.GetMidiOutputDevices() -> System.Collections.Generic.IEnumerable<Melanchall.DryWetMidi.Multimedia.OutputDevice!>!
OpenNefia.Core.Audio.LoveMusicManager.Initialize() -> void
OpenNefia.Core.Audio.LoveMusicManager.IsPlaying.get -> bool
OpenNefia.Core.Audio.LoveMusicManager.LoveMusicManager() -> void
OpenNefia.Core.Audio.LoveMusicManager.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.MusicPrototype!> musicId) -> void
OpenNefia.Core.Audio.LoveMusicManager.Restart() -> void
OpenNefia.Core.Audio.LoveMusicManager.Shutdown() -> void
OpenNefia.Core.Audio.LoveMusicManager.Stop() -> void
OpenNefia.Core.Audio.Music
OpenNefia.Core.Audio.MusicPrototype
OpenNefia.Core.Audio.MusicPrototype.Filepath.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Audio.MusicPrototype.ID.get -> string!
OpenNefia.Core.Audio.MusicPrototype.MusicPrototype() -> void
OpenNefia.Core.Audio.SoundPrototype
OpenNefia.Core.Audio.SoundPrototype.Filepath.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Audio.SoundPrototype.ID.get -> string!
OpenNefia.Core.Audio.SoundPrototype.SoundPrototype() -> void
OpenNefia.Core.Audio.Sounds
OpenNefia.Core.Configuration.CVar
OpenNefia.Core.Configuration.CVar.Archive = 2 -> OpenNefia.Core.Configuration.CVar
OpenNefia.Core.Configuration.CVar.Cheat = 1 -> OpenNefia.Core.Configuration.CVar
OpenNefia.Core.Configuration.CVar.None = 0 -> OpenNefia.Core.Configuration.CVar
OpenNefia.Core.Configuration.CVarDef
OpenNefia.Core.Configuration.CVarDef.DefaultValue.get -> object!
OpenNefia.Core.Configuration.CVarDef.Desc.get -> string?
OpenNefia.Core.Configuration.CVarDef.Flags.get -> OpenNefia.Core.Configuration.CVar
OpenNefia.Core.Configuration.CVarDef.Name.get -> string!
OpenNefia.Core.Configuration.CVarDef.Type.get -> System.Type!
OpenNefia.Core.Configuration.CVarDef<T>
OpenNefia.Core.Configuration.CVarDef<T>.DefaultValue.get -> T
OpenNefia.Core.Configuration.CVarDefsAttribute
OpenNefia.Core.Configuration.CVarDefsAttribute.CVarDefsAttribute() -> void
OpenNefia.Core.Configuration.EnvironmentVariables
OpenNefia.Core.Configuration.IConfigurationManager
OpenNefia.Core.Configuration.IConfigurationManager.GetCVar<T>(OpenNefia.Core.Configuration.CVarDef<T>! def) -> T
OpenNefia.Core.Configuration.IConfigurationManager.GetCVar<T>(string! name) -> T
OpenNefia.Core.Configuration.IConfigurationManager.GetCVarRaw(OpenNefia.Core.Configuration.CVarDef! def) -> object!
OpenNefia.Core.Configuration.IConfigurationManager.GetCVarRaw(string! name) -> object!
OpenNefia.Core.Configuration.IConfigurationManager.GetCVarType(string! name) -> System.Type!
OpenNefia.Core.Configuration.IConfigurationManager.GetRegisteredCVars() -> System.Collections.Generic.IEnumerable<string!>!
OpenNefia.Core.Configuration.IConfigurationManager.IsCVarRegistered(string! name) -> bool
OpenNefia.Core.Configuration.IConfigurationManager.OnValueChanged<T>(OpenNefia.Core.Configuration.CVarDef<T>! cVar, System.Action<T>! onValueChanged, bool invokeImmediately = false) -> void
OpenNefia.Core.Configuration.IConfigurationManager.OnValueChanged<T>(string! name, System.Action<T>! onValueChanged, bool invokeImmediately = false) -> void
OpenNefia.Core.Configuration.IConfigurationManager.RegisterCVar<T>(string! name, T defaultValue, OpenNefia.Core.Configuration.CVar flags = OpenNefia.Core.Configuration.CVar.None, System.Action<T>? onValueChanged = null) -> void
OpenNefia.Core.Configuration.IConfigurationManager.SaveToFile() -> void
OpenNefia.Core.Configuration.IConfigurationManager.SetCVar(string! name, object! value) -> void
OpenNefia.Core.Configuration.IConfigurationManager.SetCVar<T>(OpenNefia.Core.Configuration.CVarDef<T>! def, T value) -> void
OpenNefia.Core.Configuration.IConfigurationManager.SetCVarRaw(OpenNefia.Core.Configuration.CVarDef! def, object! value) -> void
OpenNefia.Core.Configuration.IConfigurationManager.TryGetCVarDef(string! name, out OpenNefia.Core.Configuration.CVarDef? def) -> bool
OpenNefia.Core.Configuration.IConfigurationManager.TryGetCVarDef(string! name, System.Type! type, out OpenNefia.Core.Configuration.CVarDef? def) -> bool
OpenNefia.Core.Configuration.IConfigurationManager.TryGetCVarDef<T>(string! name, out OpenNefia.Core.Configuration.CVarDef<T>? def) -> bool
OpenNefia.Core.Configuration.IConfigurationManager.UnsubValueChanged<T>(OpenNefia.Core.Configuration.CVarDef<T>! cVar, System.Action<T>! onValueChanged) -> void
OpenNefia.Core.Configuration.IConfigurationManager.UnsubValueChanged<T>(string! name, System.Action<T>! onValueChanged) -> void
OpenNefia.Core.Configuration.InvalidConfigurationException
OpenNefia.Core.Configuration.InvalidConfigurationException.InvalidConfigurationException() -> void
OpenNefia.Core.Configuration.InvalidConfigurationException.InvalidConfigurationException(string! message) -> void
OpenNefia.Core.Configuration.InvalidConfigurationException.InvalidConfigurationException(string! message, System.Exception! inner) -> void
OpenNefia.Core.Configuration.InvalidConfigurationException.InvalidConfigurationException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.Console.ConAnyCommandCallback
OpenNefia.Core.Console.ConCommandCallback
OpenNefia.Core.Console.ConsoleCommandReplExecutor
OpenNefia.Core.Console.ConsoleCommandReplExecutor.Complete(string! text, int caret) -> System.Collections.Generic.IReadOnlyCollection<CSharpRepl.Services.Completion.CompletionItemWithDescription!>!
OpenNefia.Core.Console.ConsoleCommandReplExecutor.ConsoleCommandReplExecutor() -> void
OpenNefia.Core.Console.ConsoleCommandReplExecutor.Execute(string! code) -> OpenNefia.Core.Console.ReplExecutionResult!
OpenNefia.Core.Console.ConsoleCommandReplExecutor.Initialize() -> void
OpenNefia.Core.Console.ConsoleHost
OpenNefia.Core.Console.ConsoleHost.AnyCommandExecuted -> OpenNefia.Core.Console.ConAnyCommandCallback?
OpenNefia.Core.Console.ConsoleHost.ClearLocalConsole() -> void
OpenNefia.Core.Console.ConsoleHost.ClearText -> System.EventHandler?
OpenNefia.Core.Console.ConsoleHost.ConsoleHost() -> void
OpenNefia.Core.Console.ConsoleHost.ExecuteCommand(string! commandStr) -> void
OpenNefia.Core.Console.ConsoleHost.Initialize() -> void
OpenNefia.Core.Console.ConsoleHost.LoadConsoleCommands() -> void
OpenNefia.Core.Console.ConsoleHost.LocalShell.get -> OpenNefia.Core.Console.IConsoleShell!
OpenNefia.Core.Console.ConsoleHost.RegisteredCommands.get -> System.Collections.Generic.IReadOnlyDictionary<System.Type!, OpenNefia.Core.Console.IConsoleCommand!>!
OpenNefia.Core.Console.ConsoleHost.WriteError(string! text) -> void
OpenNefia.Core.Console.ConsoleHost.WriteLine(string! text) -> void
OpenNefia.Core.Console.ConsoleShell
OpenNefia.Core.Console.ConsoleShell.Clear() -> void
OpenNefia.Core.Console.ConsoleShell.ConsoleHost.get -> OpenNefia.Core.Console.IConsoleHost!
OpenNefia.Core.Console.ConsoleShell.ConsoleShell(OpenNefia.Core.Console.IConsoleHost! host) -> void
OpenNefia.Core.Console.ConsoleShell.ExecuteCommand(string! command) -> void
OpenNefia.Core.Console.ConsoleShell.WriteError(string! text) -> void
OpenNefia.Core.Console.ConsoleShell.WriteLine(string! text) -> void
OpenNefia.Core.Console.DummyConsole
OpenNefia.Core.Console.DummyConsole.BufferWidth.get -> int
OpenNefia.Core.Console.DummyConsole.CancelKeyPress -> System.ConsoleCancelEventHandler?
OpenNefia.Core.Console.DummyConsole.CaptureControlC.get -> bool
OpenNefia.Core.Console.DummyConsole.CaptureControlC.set -> void
OpenNefia.Core.Console.DummyConsole.Clear() -> void
OpenNefia.Core.Console.DummyConsole.CursorTop.get -> int
OpenNefia.Core.Console.DummyConsole.DummyConsole() -> void
OpenNefia.Core.Console.DummyConsole.HideCursor() -> void
OpenNefia.Core.Console.DummyConsole.InitVirtualTerminalProcessing() -> void
OpenNefia.Core.Console.DummyConsole.KeyAvailable.get -> bool
OpenNefia.Core.Console.DummyConsole.ReadKey(bool intercept) -> System.ConsoleKeyInfo
OpenNefia.Core.Console.DummyConsole.ShowCursor() -> void
OpenNefia.Core.Console.DummyConsole.WindowHeight.get -> int
OpenNefia.Core.Console.DummyConsole.WindowTop.get -> int
OpenNefia.Core.Console.DummyConsole.Write(string? value) -> void
OpenNefia.Core.Console.DummyConsole.WriteError(string? value) -> void
OpenNefia.Core.Console.DummyConsole.WriteErrorLine(string? value) -> void
OpenNefia.Core.Console.DummyConsole.WriteLine(string? value) -> void
OpenNefia.Core.Console.DummyConsoleOutput
OpenNefia.Core.Console.DummyConsoleOutput.DummyConsoleOutput() -> void
OpenNefia.Core.Console.DummyConsoleOutput.WriteError(string! text) -> void
OpenNefia.Core.Console.DummyConsoleOutput.WriteLine(string! text) -> void
OpenNefia.Core.Console.IConsoleCommand
OpenNefia.Core.Console.IConsoleCommand<T>
OpenNefia.Core.Console.IConsoleCommand<T>.Execute(OpenNefia.Core.Console.IConsoleShell! shell, T args) -> void
OpenNefia.Core.Console.IConsoleHost
OpenNefia.Core.Console.IConsoleHost.AnyCommandExecuted -> OpenNefia.Core.Console.ConAnyCommandCallback!
OpenNefia.Core.Console.IConsoleHost.ClearLocalConsole() -> void
OpenNefia.Core.Console.IConsoleHost.ClearText -> System.EventHandler!
OpenNefia.Core.Console.IConsoleHost.ExecuteCommand(string! command) -> void
OpenNefia.Core.Console.IConsoleHost.Initialize() -> void
OpenNefia.Core.Console.IConsoleHost.LoadConsoleCommands() -> void
OpenNefia.Core.Console.IConsoleHost.LocalShell.get -> OpenNefia.Core.Console.IConsoleShell!
OpenNefia.Core.Console.IConsoleHost.RegisteredCommands.get -> System.Collections.Generic.IReadOnlyDictionary<System.Type!, OpenNefia.Core.Console.IConsoleCommand!>!
OpenNefia.Core.Console.IConsoleHost.WriteError(string! text) -> void
OpenNefia.Core.Console.IConsoleHost.WriteLine(string! text) -> void
OpenNefia.Core.Console.IConsoleOutput
OpenNefia.Core.Console.IConsoleOutput.WriteError(string! text) -> void
OpenNefia.Core.Console.IConsoleOutput.WriteLine(string! text) -> void
OpenNefia.Core.Console.IConsoleShell
OpenNefia.Core.Console.IConsoleShell.Clear() -> void
OpenNefia.Core.Console.IConsoleShell.ConsoleHost.get -> OpenNefia.Core.Console.IConsoleHost!
OpenNefia.Core.Console.IConsoleShell.ExecuteCommand(string! command) -> void
OpenNefia.Core.Console.IConsoleShell.WriteError(string! text) -> void
OpenNefia.Core.Console.IConsoleShell.WriteLine(string! text) -> void
OpenNefia.Core.Console.IReplExecutor
OpenNefia.Core.Console.IReplExecutor.Complete(string! text, int caret) -> System.Collections.Generic.IReadOnlyCollection<CSharpRepl.Services.Completion.CompletionItemWithDescription!>!
OpenNefia.Core.Console.IReplExecutor.Execute(string! code) -> OpenNefia.Core.Console.ReplExecutionResult!
OpenNefia.Core.Console.IReplExecutor.Initialize() -> void
OpenNefia.Core.Console.ReplExecutionResult
OpenNefia.Core.Console.ReplExecutionResult.Error
OpenNefia.Core.Console.ReplExecutionResult.Error.Error(System.Exception! Exception) -> void
OpenNefia.Core.Console.ReplExecutionResult.Error.Exception.get -> System.Exception!
OpenNefia.Core.Console.ReplExecutionResult.Error.Exception.init -> void
OpenNefia.Core.Console.ReplExecutionResult.Success
OpenNefia.Core.Console.ReplExecutionResult.Success.Result.get -> string!
OpenNefia.Core.Console.ReplExecutionResult.Success.Result.init -> void
OpenNefia.Core.Console.ReplExecutionResult.Success.Success(string! Result) -> void
OpenNefia.Core.Containers.BaseContainer
OpenNefia.Core.Containers.BaseContainer.BaseContainer() -> void
OpenNefia.Core.Containers.BaseContainer.Deleted.get -> bool
OpenNefia.Core.Containers.BaseContainer.ForceRemove(OpenNefia.Core.GameObjects.EntityUid toRemove, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> void
OpenNefia.Core.Containers.BaseContainer.ID.get -> OpenNefia.Core.Containers.ContainerId
OpenNefia.Core.Containers.BaseContainer.Insert(OpenNefia.Core.GameObjects.EntityUid toinsert, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
OpenNefia.Core.Containers.BaseContainer.Manager.get -> OpenNefia.Core.Containers.IContainerManager!
OpenNefia.Core.Containers.BaseContainer.OccludesLight.get -> bool
OpenNefia.Core.Containers.BaseContainer.OccludesLight.set -> void
OpenNefia.Core.Containers.BaseContainer.Owner.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Containers.BaseContainer.Remove(OpenNefia.Core.GameObjects.EntityUid toremove, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
OpenNefia.Core.Containers.BaseContainer.ShowContents.get -> bool
OpenNefia.Core.Containers.BaseContainer.ShowContents.set -> void
OpenNefia.Core.Containers.Container
OpenNefia.Core.Containers.Container.Container() -> void
OpenNefia.Core.Containers.ContainerAttemptEventBase
OpenNefia.Core.Containers.ContainerAttemptEventBase.ContainerAttemptEventBase(OpenNefia.Core.Containers.IContainer! container, OpenNefia.Core.GameObjects.EntityUid entityUid) -> void
OpenNefia.Core.Containers.ContainerGettingInsertedAttemptEvent
OpenNefia.Core.Containers.ContainerGettingInsertedAttemptEvent.ContainerGettingInsertedAttemptEvent(OpenNefia.Core.Containers.IContainer! container, OpenNefia.Core.GameObjects.EntityUid entityUid) -> void
OpenNefia.Core.Containers.ContainerGettingRemovedAttemptEvent
OpenNefia.Core.Containers.ContainerGettingRemovedAttemptEvent.ContainerGettingRemovedAttemptEvent(OpenNefia.Core.Containers.IContainer! container, OpenNefia.Core.GameObjects.EntityUid entityUid) -> void
OpenNefia.Core.Containers.ContainerHelpers
OpenNefia.Core.Containers.ContainerHelpers.ContainerHelpers() -> void
OpenNefia.Core.Containers.ContainerId
OpenNefia.Core.Containers.ContainerId.CompareTo(OpenNefia.Core.Containers.ContainerId other) -> int
OpenNefia.Core.Containers.ContainerId.ContainerId() -> void
OpenNefia.Core.Containers.ContainerId.ContainerId(string! id) -> void
OpenNefia.Core.Containers.ContainerId.Equals(OpenNefia.Core.Containers.ContainerId other) -> bool
OpenNefia.Core.Containers.ContainerId.IsValid() -> bool
OpenNefia.Core.Containers.ContainerIsInsertingAttemptEvent
OpenNefia.Core.Containers.ContainerIsInsertingAttemptEvent.ContainerIsInsertingAttemptEvent(OpenNefia.Core.Containers.IContainer! container, OpenNefia.Core.GameObjects.EntityUid entityUid) -> void
OpenNefia.Core.Containers.ContainerIsRemovingAttemptEvent
OpenNefia.Core.Containers.ContainerIsRemovingAttemptEvent.ContainerIsRemovingAttemptEvent(OpenNefia.Core.Containers.IContainer! container, OpenNefia.Core.GameObjects.EntityUid entityUid) -> void
OpenNefia.Core.Containers.ContainerManagerComponent
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerable
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerable.AllContainersEnumerable() -> void
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerable.AllContainersEnumerable(OpenNefia.Core.Containers.ContainerManagerComponent? manager) -> void
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerable.GetEnumerator() -> OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerator
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerator
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerator.AllContainersEnumerator() -> void
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerator.AllContainersEnumerator(OpenNefia.Core.Containers.ContainerManagerComponent? manager) -> void
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerator.Current.get -> OpenNefia.Core.Containers.IContainer!
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerator.Dispose() -> void
OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerator.MoveNext() -> bool
OpenNefia.Core.Containers.ContainerManagerComponent.ContainerManagerComponent() -> void
OpenNefia.Core.Containers.ContainerManagerComponent.Containers.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Containers.ContainerId, OpenNefia.Core.Containers.IContainer!>!
OpenNefia.Core.Containers.ContainerManagerComponent.GetAllContainers() -> OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerable
OpenNefia.Core.Containers.ContainerManagerComponent.InternalContainerShutdown(OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.ContainerModifiedEventArgs
OpenNefia.Core.Containers.ContainerModifiedEventArgs.Container.get -> OpenNefia.Core.Containers.IContainer!
OpenNefia.Core.Containers.ContainerModifiedEventArgs.ContainerModifiedEventArgs(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.ContainerModifiedEventArgs.Entity.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Containers.ContainerModifiedMessage
OpenNefia.Core.Containers.ContainerModifiedMessage.Container.get -> OpenNefia.Core.Containers.IContainer!
OpenNefia.Core.Containers.ContainerModifiedMessage.ContainerModifiedMessage(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.ContainerModifiedMessage.Entity.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Containers.ContainerSlot
OpenNefia.Core.Containers.ContainerSlot.ContainedEntity.get -> OpenNefia.Core.GameObjects.EntityUid?
OpenNefia.Core.Containers.ContainerSlot.ContainerSlot() -> void
OpenNefia.Core.Containers.ContainerSystem
OpenNefia.Core.Containers.ContainerSystem.AttachParentToContainerOrMap(OpenNefia.Core.GameObjects.SpatialComponent! transform) -> void
OpenNefia.Core.Containers.ContainerSystem.CleanContainer(OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.ContainerSystem.ContainerSystem() -> void
OpenNefia.Core.Containers.ContainerSystem.ContainsEntity(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.EntityUid containedUid, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.ContainerSystem.EmptyContainer(OpenNefia.Core.Containers.IContainer! container, bool force = false, OpenNefia.Core.Maps.EntityCoordinates? moveTo = null, bool attachToMap = false) -> void
OpenNefia.Core.Containers.ContainerSystem.EnsureContainer<T>(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.ContainerId containerId) -> T
OpenNefia.Core.Containers.ContainerSystem.EnsureContainer<T>(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.ContainerId containerId, out bool alreadyExisted) -> T
OpenNefia.Core.Containers.ContainerSystem.EnsureContainer<T>(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> T
OpenNefia.Core.Containers.ContainerSystem.GetAllContainers(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerable
OpenNefia.Core.Containers.ContainerSystem.GetContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> OpenNefia.Core.Containers.IContainer!
OpenNefia.Core.Containers.ContainerSystem.HasContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.ContainerSystem.IsEntityInContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.SpatialComponent? transform = null) -> bool
OpenNefia.Core.Containers.ContainerSystem.IsInSameOrNoContainer(OpenNefia.Core.GameObjects.EntityUid user, OpenNefia.Core.GameObjects.EntityUid other) -> bool
OpenNefia.Core.Containers.ContainerSystem.IsInSameOrParentContainer(OpenNefia.Core.GameObjects.EntityUid user, OpenNefia.Core.GameObjects.EntityUid other) -> bool
OpenNefia.Core.Containers.ContainerSystem.IsInSameOrTransparentContainer(OpenNefia.Core.GameObjects.EntityUid user, OpenNefia.Core.GameObjects.EntityUid other, bool userSeeInsideSelf = false) -> bool
OpenNefia.Core.Containers.ContainerSystem.MakeContainer<T>(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> T
OpenNefia.Core.Containers.ContainerSystem.RemoveEntity(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.EntityUid containedUid, bool force = false, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.ContainerSystem.TryGetContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, out OpenNefia.Core.Containers.IContainer? container, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.ContainerSystem.TryGetContainerMan(OpenNefia.Core.GameObjects.EntityUid entity, out OpenNefia.Core.Containers.ContainerManagerComponent? manager) -> bool
OpenNefia.Core.Containers.ContainerSystem.TryGetContainingContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.EntityUid containedUid, out OpenNefia.Core.Containers.IContainer? container, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.ContainerSystem.TryGetContainingContainer(OpenNefia.Core.GameObjects.EntityUid uid, out OpenNefia.Core.Containers.IContainer? container, OpenNefia.Core.GameObjects.SpatialComponent? transform = null) -> bool
OpenNefia.Core.Containers.ContainerSystem.TryRemoveFromContainer(OpenNefia.Core.GameObjects.EntityUid entity, bool force = false) -> bool
OpenNefia.Core.Containers.ContainerSystem.TryRemoveFromContainer(OpenNefia.Core.GameObjects.EntityUid entity, bool force, out bool wasInContainer) -> bool
OpenNefia.Core.Containers.EntInsertedIntoContainerEventArgs
OpenNefia.Core.Containers.EntInsertedIntoContainerEventArgs.EntInsertedIntoContainerEventArgs(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.EntInsertedIntoContainerMessage
OpenNefia.Core.Containers.EntInsertedIntoContainerMessage.EntInsertedIntoContainerMessage(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.EntRemovedFromContainerEventArgs
OpenNefia.Core.Containers.EntRemovedFromContainerEventArgs.EntRemovedFromContainerEventArgs(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.EntRemovedFromContainerMessage
OpenNefia.Core.Containers.EntRemovedFromContainerMessage.EntRemovedFromContainerMessage(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.IContainer
OpenNefia.Core.Containers.IContainer.CanInsert(OpenNefia.Core.GameObjects.EntityUid toinsert, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
OpenNefia.Core.Containers.IContainer.CanRemove(OpenNefia.Core.GameObjects.EntityUid toremove, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
OpenNefia.Core.Containers.IContainer.ContainedEntities.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.GameObjects.EntityUid>!
OpenNefia.Core.Containers.IContainer.ContainerType.get -> string!
OpenNefia.Core.Containers.IContainer.Contains(OpenNefia.Core.GameObjects.EntityUid contained) -> bool
OpenNefia.Core.Containers.IContainer.Deleted.get -> bool
OpenNefia.Core.Containers.IContainer.ForceRemove(OpenNefia.Core.GameObjects.EntityUid toRemove, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> void
OpenNefia.Core.Containers.IContainer.ID.get -> OpenNefia.Core.Containers.ContainerId
OpenNefia.Core.Containers.IContainer.Insert(OpenNefia.Core.GameObjects.EntityUid toinsert, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
OpenNefia.Core.Containers.IContainer.Manager.get -> OpenNefia.Core.Containers.IContainerManager!
OpenNefia.Core.Containers.IContainer.OccludesLight.get -> bool
OpenNefia.Core.Containers.IContainer.OccludesLight.set -> void
OpenNefia.Core.Containers.IContainer.Owner.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Containers.IContainer.Remove(OpenNefia.Core.GameObjects.EntityUid toremove, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
OpenNefia.Core.Containers.IContainer.ShowContents.get -> bool
OpenNefia.Core.Containers.IContainer.ShowContents.set -> void
OpenNefia.Core.Containers.IContainer.Shutdown() -> void
OpenNefia.Core.Containers.IContainerManager
OpenNefia.Core.Containers.IContainerManager.InternalContainerShutdown(OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.IContainerSystem
OpenNefia.Core.Containers.IContainerSystem.AttachParentToContainerOrMap(OpenNefia.Core.GameObjects.SpatialComponent! transform) -> void
OpenNefia.Core.Containers.IContainerSystem.CleanContainer(OpenNefia.Core.Containers.IContainer! container) -> void
OpenNefia.Core.Containers.IContainerSystem.ContainsEntity(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.EntityUid containedUid, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.IContainerSystem.EmptyContainer(OpenNefia.Core.Containers.IContainer! container, bool force = false, OpenNefia.Core.Maps.EntityCoordinates? moveTo = null, bool attachToMap = false) -> void
OpenNefia.Core.Containers.IContainerSystem.EnsureContainer<T>(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.ContainerId containerId) -> T
OpenNefia.Core.Containers.IContainerSystem.EnsureContainer<T>(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Containers.ContainerId containerId, out bool alreadyExisted) -> T
OpenNefia.Core.Containers.IContainerSystem.EnsureContainer<T>(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> T
OpenNefia.Core.Containers.IContainerSystem.GetAllContainers(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> OpenNefia.Core.Containers.ContainerManagerComponent.AllContainersEnumerable
OpenNefia.Core.Containers.IContainerSystem.GetContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> OpenNefia.Core.Containers.IContainer!
OpenNefia.Core.Containers.IContainerSystem.HasContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.IContainerSystem.IsEntityInContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.SpatialComponent? transform = null) -> bool
OpenNefia.Core.Containers.IContainerSystem.IsInSameOrNoContainer(OpenNefia.Core.GameObjects.EntityUid user, OpenNefia.Core.GameObjects.EntityUid other) -> bool
OpenNefia.Core.Containers.IContainerSystem.IsInSameOrParentContainer(OpenNefia.Core.GameObjects.EntityUid user, OpenNefia.Core.GameObjects.EntityUid other) -> bool
OpenNefia.Core.Containers.IContainerSystem.IsInSameOrTransparentContainer(OpenNefia.Core.GameObjects.EntityUid user, OpenNefia.Core.GameObjects.EntityUid other, bool userSeeInsideSelf = false) -> bool
OpenNefia.Core.Containers.IContainerSystem.MakeContainer<T>(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> T
OpenNefia.Core.Containers.IContainerSystem.RemoveEntity(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.EntityUid containedUid, bool force = false, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.IContainerSystem.TryGetContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, out OpenNefia.Core.Containers.IContainer? container, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.IContainerSystem.TryGetContainerMan(OpenNefia.Core.GameObjects.EntityUid entity, out OpenNefia.Core.Containers.ContainerManagerComponent? manager) -> bool
OpenNefia.Core.Containers.IContainerSystem.TryGetContainingContainer(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.EntityUid containedUid, out OpenNefia.Core.Containers.IContainer? container, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
OpenNefia.Core.Containers.IContainerSystem.TryGetContainingContainer(OpenNefia.Core.GameObjects.EntityUid uid, out OpenNefia.Core.Containers.IContainer? container, OpenNefia.Core.GameObjects.SpatialComponent? transform = null) -> bool
OpenNefia.Core.Containers.IContainerSystem.TryRemoveFromContainer(OpenNefia.Core.GameObjects.EntityUid entity, bool force = false) -> bool
OpenNefia.Core.Containers.IContainerSystem.TryRemoveFromContainer(OpenNefia.Core.GameObjects.EntityUid entity, bool force, out bool wasInContainer) -> bool
OpenNefia.Core.Containers.UpdateContainerOcclusionEvent
OpenNefia.Core.Containers.UpdateContainerOcclusionEvent.Entity.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Containers.UpdateContainerOcclusionEvent.UpdateContainerOcclusionEvent() -> void
OpenNefia.Core.Containers.UpdateContainerOcclusionEvent.UpdateContainerOcclusionEvent(OpenNefia.Core.GameObjects.EntityUid entity) -> void
OpenNefia.Core.ContentPack.AppDomainExt
OpenNefia.Core.ContentPack.BaseModLoader
OpenNefia.Core.ContentPack.BaseModLoader.BaseModLoader() -> void
OpenNefia.Core.ContentPack.BaseModLoader.BroadcastRunLevel(OpenNefia.Core.ContentPack.ModRunLevel level) -> void
OpenNefia.Core.ContentPack.BaseModLoader.BroadcastUpdate(OpenNefia.Core.ContentPack.ModUpdateLevel level, OpenNefia.Core.Timing.FrameEventArgs frameEventArgs) -> void
OpenNefia.Core.ContentPack.BaseModLoader.GetAssembly(string! name) -> System.Reflection.Assembly!
OpenNefia.Core.ContentPack.BaseModLoader.InitMod(System.Reflection.Assembly! assembly) -> void
OpenNefia.Core.ContentPack.BaseModLoader.IsContentAssembly(System.Reflection.Assembly! typeAssembly) -> bool
OpenNefia.Core.ContentPack.BaseModLoader.LoadedModules.get -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly!>!
OpenNefia.Core.ContentPack.BaseModLoader.ModInfo
OpenNefia.Core.ContentPack.BaseModLoader.ModInfo.EntryPoints.get -> System.Collections.Generic.List<OpenNefia.Core.ContentPack.ModEntryPoint!>!
OpenNefia.Core.ContentPack.BaseModLoader.ModInfo.GameAssembly.get -> System.Reflection.Assembly!
OpenNefia.Core.ContentPack.BaseModLoader.ModInfo.ModInfo(System.Reflection.Assembly! gameAssembly) -> void
OpenNefia.Core.ContentPack.BaseModLoader.SetModuleBaseCallbacks(OpenNefia.Core.ContentPack.ModuleTestingCallbacks! testingCallbacks) -> void
OpenNefia.Core.ContentPack.BaseModLoader.Shutdown() -> void
OpenNefia.Core.ContentPack.IModLoader
OpenNefia.Core.ContentPack.IModLoader.GetAssembly(string! name) -> System.Reflection.Assembly!
OpenNefia.Core.ContentPack.IModLoader.IsContentAssembly(System.Reflection.Assembly! typeAssembly) -> bool
OpenNefia.Core.ContentPack.IModLoader.LoadedModules.get -> System.Collections.Generic.IEnumerable<System.Reflection.Assembly!>!
OpenNefia.Core.ContentPack.IModLoader.SetModuleBaseCallbacks(OpenNefia.Core.ContentPack.ModuleTestingCallbacks! testingCallbacks) -> void
OpenNefia.Core.ContentPack.IResourceManager
OpenNefia.Core.ContentPack.IResourceManager.ContentFileExists(OpenNefia.Core.Utility.ResourcePath! path) -> bool
OpenNefia.Core.ContentPack.IResourceManager.ContentFileExists(string! path) -> bool
OpenNefia.Core.ContentPack.IResourceManager.ContentFileRead(OpenNefia.Core.Utility.ResourcePath! path) -> System.IO.Stream!
OpenNefia.Core.ContentPack.IResourceManager.ContentFileRead(string! path) -> System.IO.Stream!
OpenNefia.Core.ContentPack.IResourceManager.ContentFileReadAllText(OpenNefia.Core.Utility.ResourcePath! path) -> string!
OpenNefia.Core.ContentPack.IResourceManager.ContentFileReadAllText(OpenNefia.Core.Utility.ResourcePath! path, System.Text.Encoding! encoding) -> string!
OpenNefia.Core.ContentPack.IResourceManager.ContentFileReadAllText(string! path) -> string!
OpenNefia.Core.ContentPack.IResourceManager.ContentFileReadText(OpenNefia.Core.Utility.ResourcePath! path) -> System.IO.StreamReader!
OpenNefia.Core.ContentPack.IResourceManager.ContentFileReadText(OpenNefia.Core.Utility.ResourcePath! path, System.Text.Encoding! encoding) -> System.IO.StreamReader!
OpenNefia.Core.ContentPack.IResourceManager.ContentFileReadYaml(OpenNefia.Core.Utility.ResourcePath! path) -> YamlDotNet.RepresentationModel.YamlStream!
OpenNefia.Core.ContentPack.IResourceManager.ContentFindFiles(OpenNefia.Core.Utility.ResourcePath! path) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.ResourcePath!>!
OpenNefia.Core.ContentPack.IResourceManager.ContentFindFiles(string! path) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.ResourcePath!>!
OpenNefia.Core.ContentPack.IResourceManager.ContentFindRelativeFiles(OpenNefia.Core.Utility.ResourcePath! path) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.ResourcePath!>!
OpenNefia.Core.ContentPack.IResourceManager.GetContentRoots() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.ResourcePath!>!
OpenNefia.Core.ContentPack.IResourceManager.TryContentFileRead(OpenNefia.Core.Utility.ResourcePath! path, out System.IO.Stream? fileStream) -> bool
OpenNefia.Core.ContentPack.IResourceManager.TryContentFileRead(string! path, out System.IO.Stream? fileStream) -> bool
OpenNefia.Core.ContentPack.IResourceManager.UserData.get -> OpenNefia.Core.ContentPack.IWritableDirProvider!
OpenNefia.Core.ContentPack.IWritableDirProvider
OpenNefia.Core.ContentPack.IWritableDirProvider.CreateDirectory(OpenNefia.Core.Utility.ResourcePath! path) -> void
OpenNefia.Core.ContentPack.IWritableDirProvider.Delete(OpenNefia.Core.Utility.ResourcePath! path) -> void
OpenNefia.Core.ContentPack.IWritableDirProvider.Exists(OpenNefia.Core.Utility.ResourcePath! path) -> bool
OpenNefia.Core.ContentPack.IWritableDirProvider.Find(string! pattern, bool recursive = true) -> (System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.ResourcePath!>! files, System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.ResourcePath!>! directories)
OpenNefia.Core.ContentPack.IWritableDirProvider.GetChild(OpenNefia.Core.Utility.ResourcePath! path) -> OpenNefia.Core.ContentPack.IWritableDirProvider!
OpenNefia.Core.ContentPack.IWritableDirProvider.GetLastWriteTime(OpenNefia.Core.Utility.ResourcePath! path) -> System.DateTime
OpenNefia.Core.ContentPack.IWritableDirProvider.IsDirectory(OpenNefia.Core.Utility.ResourcePath! path) -> bool
OpenNefia.Core.ContentPack.IWritableDirProvider.Open(OpenNefia.Core.Utility.ResourcePath! path, System.IO.FileMode fileMode) -> System.IO.Stream!
OpenNefia.Core.ContentPack.IWritableDirProvider.Open(OpenNefia.Core.Utility.ResourcePath! path, System.IO.FileMode fileMode, System.IO.FileAccess access, System.IO.FileShare share) -> System.IO.Stream!
OpenNefia.Core.ContentPack.IWritableDirProvider.Rename(OpenNefia.Core.Utility.ResourcePath! oldPath, OpenNefia.Core.Utility.ResourcePath! newPath) -> void
OpenNefia.Core.ContentPack.IWritableDirProvider.RootDir.get -> string?
OpenNefia.Core.ContentPack.ModEntryPoint
OpenNefia.Core.ContentPack.ModEntryPoint.Dispose() -> void
OpenNefia.Core.ContentPack.ModEntryPoint.ModEntryPoint() -> void
OpenNefia.Core.ContentPack.ModEntryPoint.SetTestingCallbacks(System.Collections.Generic.List<OpenNefia.Core.ContentPack.ModuleTestingCallbacks!>! testingCallbacks) -> void
OpenNefia.Core.ContentPack.ModEntryPoint.TestingCallbacks.get -> System.Collections.Generic.List<OpenNefia.Core.ContentPack.ModuleTestingCallbacks!>!
OpenNefia.Core.ContentPack.ModEntryPoint.~ModEntryPoint() -> void
OpenNefia.Core.ContentPack.ModLoaderExt
OpenNefia.Core.ContentPack.ModRunLevel
OpenNefia.Core.ContentPack.ModRunLevel.Error = 0 -> OpenNefia.Core.ContentPack.ModRunLevel
OpenNefia.Core.ContentPack.ModRunLevel.Init = 1 -> OpenNefia.Core.ContentPack.ModRunLevel
OpenNefia.Core.ContentPack.ModRunLevel.PostInit = 2 -> OpenNefia.Core.ContentPack.ModRunLevel
OpenNefia.Core.ContentPack.ModRunLevel.PreInit = 3 -> OpenNefia.Core.ContentPack.ModRunLevel
OpenNefia.Core.ContentPack.ModuleTestingCallbacks
OpenNefia.Core.ContentPack.ModuleTestingCallbacks.ModuleTestingCallbacks() -> void
OpenNefia.Core.ContentPack.ModUpdateLevel
OpenNefia.Core.ContentPack.ModUpdateLevel.FramePostEngine = 3 -> OpenNefia.Core.ContentPack.ModUpdateLevel
OpenNefia.Core.ContentPack.ModUpdateLevel.FramePreEngine = 1 -> OpenNefia.Core.ContentPack.ModUpdateLevel
OpenNefia.Core.ContentPack.ModUpdateLevel.PostEngine = 2 -> OpenNefia.Core.ContentPack.ModUpdateLevel
OpenNefia.Core.ContentPack.ModUpdateLevel.PreEngine = 0 -> OpenNefia.Core.ContentPack.ModUpdateLevel
OpenNefia.Core.ContentPack.ResourceManagerExt
OpenNefia.Core.ContentPack.TypeCheckFailedException
OpenNefia.Core.ContentPack.TypeCheckFailedException.TypeCheckFailedException() -> void
OpenNefia.Core.ContentPack.TypeCheckFailedException.TypeCheckFailedException(string! message) -> void
OpenNefia.Core.ContentPack.TypeCheckFailedException.TypeCheckFailedException(string! message, System.Exception! inner) -> void
OpenNefia.Core.ContentPack.TypeCheckFailedException.TypeCheckFailedException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.ContentPack.VirtualWritableDirProvider
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.CreateDirectory(OpenNefia.Core.Utility.ResourcePath! path) -> void
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.Delete(OpenNefia.Core.Utility.ResourcePath! path) -> void
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.Exists(OpenNefia.Core.Utility.ResourcePath! path) -> bool
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.Find(string! pattern, bool recursive = true) -> (System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.ResourcePath!>! files, System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.ResourcePath!>! directories)
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.GetChild(OpenNefia.Core.Utility.ResourcePath! path) -> OpenNefia.Core.ContentPack.IWritableDirProvider!
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.GetLastWriteTime(OpenNefia.Core.Utility.ResourcePath! path) -> System.DateTime
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.IsDirectory(OpenNefia.Core.Utility.ResourcePath! path) -> bool
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.Open(OpenNefia.Core.Utility.ResourcePath! path, System.IO.FileMode fileMode, System.IO.FileAccess access, System.IO.FileShare share) -> System.IO.Stream!
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.Rename(OpenNefia.Core.Utility.ResourcePath! oldPath, OpenNefia.Core.Utility.ResourcePath! newPath) -> void
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.RootDir.get -> string?
OpenNefia.Core.ContentPack.VirtualWritableDirProvider.VirtualWritableDirProvider() -> void
OpenNefia.Core.ContentPack.WritableDirProviderExt
OpenNefia.Core.ControlDesigner.ControlDesignerLayer
OpenNefia.Core.ControlDesigner.ControlDesignerLayer.ControlDesignerLayer() -> void
OpenNefia.Core.ControlDesigner.ControlDesignerLayer.Dispose() -> void
OpenNefia.Core.ControlDesigner.MeasurementPointer
OpenNefia.Core.ControlDesigner.MeasurementPointer.MeasurementPointer() -> void
OpenNefia.Core.ControlDesigner.MeasurementPointer.RulerColorOverride.get -> OpenNefia.Core.Maths.Color?
OpenNefia.Core.ControlDesigner.MeasurementPointer.RulerColorOverride.set -> void
OpenNefia.Core.ControlDesigner.MeasurementPointer.RulerThickness.get -> int
OpenNefia.Core.ControlDesigner.MeasurementPointer.RulerThicknessOverride.get -> int?
OpenNefia.Core.ControlDesigner.MeasurementPointer.RulerThicknessOverride.set -> void
OpenNefia.Core.ControlDesigner.MeasurementPointer.Target.get -> OpenNefia.Core.UI.Wisp.WispControl?
OpenNefia.Core.ControlDesigner.MeasurementPointer.Target.set -> void
OpenNefia.Core.CVars
OpenNefia.Core.CVars.CVars() -> void
OpenNefia.Core.Directions.DirectionUtility
OpenNefia.Core.Engine
OpenNefia.Core.Exceptions.IRuntimeLog
OpenNefia.Core.Exceptions.IRuntimeLog.Display() -> string!
OpenNefia.Core.Exceptions.IRuntimeLog.ExceptionCount.get -> int
OpenNefia.Core.Exceptions.IRuntimeLog.LogException(System.Exception! exception, string? catcher = null) -> void
OpenNefia.Core.Exceptions.SandboxArgumentException
OpenNefia.Core.Exceptions.SandboxArgumentException.SandboxArgumentException() -> void
OpenNefia.Core.Exceptions.SandboxArgumentException.SandboxArgumentException(string! message) -> void
OpenNefia.Core.Exceptions.SandboxArgumentException.SandboxArgumentException(string! message, System.Exception! inner) -> void
OpenNefia.Core.Exceptions.SandboxArgumentException.SandboxArgumentException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.Exceptions.TypeArgumentException
OpenNefia.Core.Exceptions.TypeArgumentException.TypeArgumentException() -> void
OpenNefia.Core.Exceptions.TypeArgumentException.TypeArgumentException(string! message) -> void
OpenNefia.Core.Exceptions.TypeArgumentException.TypeArgumentException(string! message, string! name) -> void
OpenNefia.Core.Exceptions.TypeArgumentException.TypeArgumentException(string! message, string! name, System.Exception! inner) -> void
OpenNefia.Core.Exceptions.TypeArgumentException.TypeArgumentException(string! message, System.Exception! inner) -> void
OpenNefia.Core.Game.GameSession
OpenNefia.Core.Game.GameSessionManager
OpenNefia.Core.Game.GameSessionManager.GameSessionManager() -> void
OpenNefia.Core.Game.GameSessionManager.IsPlayer(OpenNefia.Core.GameObjects.EntityUid ent) -> bool
OpenNefia.Core.Game.GameSessionManager.Player.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Game.GameSessionManager.Player.set -> void
OpenNefia.Core.Game.IGameSessionManager
OpenNefia.Core.Game.IGameSessionManager.IsPlayer(OpenNefia.Core.GameObjects.EntityUid objEntity) -> bool
OpenNefia.Core.Game.IGameSessionManager.Player.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Game.IGameSessionManager.Player.set -> void
OpenNefia.Core.GameController.DisplayMode
OpenNefia.Core.GameController.DisplayMode.Headless = 0 -> OpenNefia.Core.GameController.DisplayMode
OpenNefia.Core.GameController.DisplayMode.Love = 1 -> OpenNefia.Core.GameController.DisplayMode
OpenNefia.Core.GameController.EngineInitializedEvent
OpenNefia.Core.GameController.EngineInitializedEvent.EngineInitializedEvent() -> void
OpenNefia.Core.GameController.GameController
OpenNefia.Core.GameController.GameController.Draw() -> void
OpenNefia.Core.GameController.GameController.GameController() -> void
OpenNefia.Core.GameController.GameController.MainCallback.get -> System.Action?
OpenNefia.Core.GameController.GameController.MainCallback.set -> void
OpenNefia.Core.GameController.GameController.Options.get -> OpenNefia.Core.GameController.GameControllerOptions!
OpenNefia.Core.GameController.GameController.Run() -> void
OpenNefia.Core.GameController.GameController.Shutdown() -> void
OpenNefia.Core.GameController.GameController.Startup(OpenNefia.Core.GameController.GameControllerOptions! options) -> bool
OpenNefia.Core.GameController.GameController.SystemStep(bool stepInput = true) -> void
OpenNefia.Core.GameController.GameController.Update(OpenNefia.Core.Timing.FrameEventArgs frame) -> void
OpenNefia.Core.GameController.GameControllerOptions
OpenNefia.Core.GameController.GameControllerOptions.AssemblyDirectory.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.GameController.GameControllerOptions.AssemblyDirectory.init -> void
OpenNefia.Core.GameController.GameControllerOptions.ConfigFileName.get -> string!
OpenNefia.Core.GameController.GameControllerOptions.ConfigFileName.init -> void
OpenNefia.Core.GameController.GameControllerOptions.DefaultWindowTitle.get -> string!
OpenNefia.Core.GameController.GameControllerOptions.DefaultWindowTitle.init -> void
OpenNefia.Core.GameController.GameControllerOptions.GameControllerOptions() -> void
OpenNefia.Core.GameController.GameControllerOptions.LoadConfigAndUserData.get -> bool
OpenNefia.Core.GameController.GameControllerOptions.LoadConfigAndUserData.init -> void
OpenNefia.Core.GameController.GameControllerOptions.PrototypeDirectory.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.GameController.GameControllerOptions.PrototypeDirectory.init -> void
OpenNefia.Core.GameController.GameControllerOptions.ThemeDirectory.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.GameController.GameControllerOptions.ThemeDirectory.init -> void
OpenNefia.Core.GameController.GameControllerOptions.UserDataDirectoryName.get -> string!
OpenNefia.Core.GameController.GameControllerOptions.UserDataDirectoryName.init -> void
OpenNefia.Core.GameController.IGameController
OpenNefia.Core.GameController.IGameController.Draw() -> void
OpenNefia.Core.GameController.IGameController.MainCallback.get -> System.Action?
OpenNefia.Core.GameController.IGameController.MainCallback.set -> void
OpenNefia.Core.GameController.IGameController.Run() -> void
OpenNefia.Core.GameController.IGameController.Shutdown() -> void
OpenNefia.Core.GameController.IGameController.Startup(OpenNefia.Core.GameController.GameControllerOptions! options) -> bool
OpenNefia.Core.GameController.IGameController.SystemStep(bool stepInput = true) -> void
OpenNefia.Core.GameController.IGameController.Update(OpenNefia.Core.Timing.FrameEventArgs frame) -> void
OpenNefia.Core.GameObjects.AddedComponentEventArgs
OpenNefia.Core.GameObjects.AddedComponentEventArgs.AddedComponentEventArgs(OpenNefia.Core.GameObjects.IComponent! component, OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.AfterEntityClonedEvent
OpenNefia.Core.GameObjects.AfterEntityClonedEvent.AfterEntityClonedEvent(OpenNefia.Core.GameObjects.EntityUid clonedFrom) -> void
OpenNefia.Core.GameObjects.AfterEntityClonedEvent.ClonedFrom.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.AfterMoveEventArgs
OpenNefia.Core.GameObjects.AfterMoveEventArgs.AfterMoveEventArgs(OpenNefia.Core.Maps.MapCoordinates oldPosition, OpenNefia.Core.Maps.MapCoordinates newPosition) -> void
OpenNefia.Core.GameObjects.BeforeEntityClonedEvent
OpenNefia.Core.GameObjects.BeforeEntityClonedEvent.BeforeEntityClonedEvent(OpenNefia.Core.GameObjects.EntityUid newEntity) -> void
OpenNefia.Core.GameObjects.BeforeEntityClonedEvent.HandledTypes.get -> System.Collections.Generic.HashSet<System.Type!>!
OpenNefia.Core.GameObjects.BeforeEntityClonedEvent.MarkAsCloned<T>() -> void
OpenNefia.Core.GameObjects.BeforeEntityClonedEvent.NewEntity.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.BeforeMoveEventArgs
OpenNefia.Core.GameObjects.BeforeMoveEventArgs.BeforeMoveEventArgs(OpenNefia.Core.Maps.MapCoordinates oldPosition, OpenNefia.Core.Maps.MapCoordinates newPosition) -> void
OpenNefia.Core.GameObjects.BeforeMoveEventArgs.OutNewPosition -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.GameObjects.BroadcastEventHandler<T>
OpenNefia.Core.GameObjects.BroadcastEventRefHandler<T>
OpenNefia.Core.GameObjects.CancellableEntityEventArgs
OpenNefia.Core.GameObjects.CancellableEntityEventArgs.Cancel() -> void
OpenNefia.Core.GameObjects.CancellableEntityEventArgs.CancellableEntityEventArgs() -> void
OpenNefia.Core.GameObjects.CancellableEntityEventArgs.Cancelled.get -> bool
OpenNefia.Core.GameObjects.CancellableEntityEventArgs.Uncancel() -> void
OpenNefia.Core.GameObjects.ChipComponent
OpenNefia.Core.GameObjects.ChipComponent.ChipComponent() -> void
OpenNefia.Core.GameObjects.ChipComponent.ChipID.get -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.ChipPrototype!>
OpenNefia.Core.GameObjects.ChipComponent.ChipID.set -> void
OpenNefia.Core.GameObjects.ChipComponent.Color.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.GameObjects.ChipComponent.Color.set -> void
OpenNefia.Core.GameObjects.ChipComponent.DrawDepth.get -> int
OpenNefia.Core.GameObjects.ChipComponent.DrawDepth.set -> void
OpenNefia.Core.GameObjects.Component
OpenNefia.Core.GameObjects.Component.Component() -> void
OpenNefia.Core.GameObjects.Component.Deleted.get -> bool
OpenNefia.Core.GameObjects.Component.Initialized.get -> bool
OpenNefia.Core.GameObjects.Component.LifeStage.get -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.Component.Owner.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.Component.Owner.set -> void
OpenNefia.Core.GameObjects.Component.Running.get -> bool
OpenNefia.Core.GameObjects.ComponentAdd
OpenNefia.Core.GameObjects.ComponentAdd.ComponentAdd() -> void
OpenNefia.Core.GameObjects.ComponentDependencyAttribute
OpenNefia.Core.GameObjects.ComponentDependencyAttribute.ComponentDependencyAttribute(string? onAddMethodName = null, string? onRemoveMethodName = null) -> void
OpenNefia.Core.GameObjects.ComponentDependencyInvalidMethodNameException
OpenNefia.Core.GameObjects.ComponentDependencyInvalidMethodNameException.ComponentDependencyInvalidMethodNameException(string! methodTarget, System.Reflection.FieldInfo! field) -> void
OpenNefia.Core.GameObjects.ComponentDependencyInvalidOnAddMethodNameException
OpenNefia.Core.GameObjects.ComponentDependencyInvalidOnAddMethodNameException.ComponentDependencyInvalidOnAddMethodNameException(System.Reflection.FieldInfo! field) -> void
OpenNefia.Core.GameObjects.ComponentDependencyInvalidOnRemoveMethodNameException
OpenNefia.Core.GameObjects.ComponentDependencyInvalidOnRemoveMethodNameException.ComponentDependencyInvalidOnRemoveMethodNameException(System.Reflection.FieldInfo! field) -> void
OpenNefia.Core.GameObjects.ComponentDependencyManager
OpenNefia.Core.GameObjects.ComponentDependencyManager.ComponentDependencyManager() -> void
OpenNefia.Core.GameObjects.ComponentDependencyManager.OnComponentAdd(OpenNefia.Core.GameObjects.EntityUid eUid, OpenNefia.Core.GameObjects.IComponent! newComp) -> void
OpenNefia.Core.GameObjects.ComponentDependencyManager.OnComponentRemove(OpenNefia.Core.GameObjects.EntityUid eUid, OpenNefia.Core.GameObjects.IComponent! removedComp) -> void
OpenNefia.Core.GameObjects.ComponentDependencyNotNullableException
OpenNefia.Core.GameObjects.ComponentDependencyNotNullableException.ComponentDependencyNotNullableException(System.Type! componentType, System.Reflection.FieldInfo! field) -> void
OpenNefia.Core.GameObjects.ComponentDependencyValueTypeException
OpenNefia.Core.GameObjects.ComponentDependencyValueTypeException.ComponentDependencyValueTypeException(System.Type! componentType, System.Reflection.FieldInfo! fieldInfo) -> void
OpenNefia.Core.GameObjects.ComponentEventArgs
OpenNefia.Core.GameObjects.ComponentEventArgs.Component.get -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.ComponentEventArgs.ComponentEventArgs(OpenNefia.Core.GameObjects.IComponent! component, OpenNefia.Core.GameObjects.EntityUid ownerUid) -> void
OpenNefia.Core.GameObjects.ComponentEventArgs.Owner.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.ComponentEventHandler<TComp, TEvent>
OpenNefia.Core.GameObjects.ComponentEventRefHandler<TComp, TEvent>
OpenNefia.Core.GameObjects.ComponentInit
OpenNefia.Core.GameObjects.ComponentInit.ComponentInit() -> void
OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Added = 2 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Adding = 1 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Deleted = 10 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Initialized = 4 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Initializing = 3 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.PreAdd = 0 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Removing = 9 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Running = 6 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Starting = 5 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Stopped = 8 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLifeStage.Stopping = 7 -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.ComponentLocalizer
OpenNefia.Core.GameObjects.ComponentLocalizer.ComponentLocalizer() -> void
OpenNefia.Core.GameObjects.ComponentLocalizer.Initialize() -> void
OpenNefia.Core.GameObjects.ComponentLocalizer.LocalizeComponent(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Locale.IComponentLocalizable! compLocalizable) -> void
OpenNefia.Core.GameObjects.ComponentLocalizer.LocalizeComponents(OpenNefia.Core.GameObjects.EntityUid entity) -> void
OpenNefia.Core.GameObjects.ComponentReferenceAttribute
OpenNefia.Core.GameObjects.ComponentReferenceAttribute.ComponentReferenceAttribute(System.Type! referenceType) -> void
OpenNefia.Core.GameObjects.ComponentReferenceAttribute.ReferenceType.get -> System.Type!
OpenNefia.Core.GameObjects.ComponentRegistrationLockException
OpenNefia.Core.GameObjects.ComponentRegistrationLockException.ComponentRegistrationLockException() -> void
OpenNefia.Core.GameObjects.ComponentRemove
OpenNefia.Core.GameObjects.ComponentRemove.ComponentRemove() -> void
OpenNefia.Core.GameObjects.ComponentShutdown
OpenNefia.Core.GameObjects.ComponentShutdown.ComponentShutdown() -> void
OpenNefia.Core.GameObjects.ComponentStartup
OpenNefia.Core.GameObjects.ComponentStartup.ComponentStartup() -> void
OpenNefia.Core.GameObjects.ComponentTarget
OpenNefia.Core.GameObjects.ComponentTarget.Area = 2 -> OpenNefia.Core.GameObjects.ComponentTarget
OpenNefia.Core.GameObjects.ComponentTarget.Map = 1 -> OpenNefia.Core.GameObjects.ComponentTarget
OpenNefia.Core.GameObjects.ComponentTarget.Normal = 0 -> OpenNefia.Core.GameObjects.ComponentTarget
OpenNefia.Core.GameObjects.ComponentUsageAttribute
OpenNefia.Core.GameObjects.ComponentUsageAttribute.ComponentUsageAttribute(OpenNefia.Core.GameObjects.ComponentTarget target) -> void
OpenNefia.Core.GameObjects.ComponentUsageAttribute.Target.get -> OpenNefia.Core.GameObjects.ComponentTarget
OpenNefia.Core.GameObjects.DeletedComponentEventArgs
OpenNefia.Core.GameObjects.DeletedComponentEventArgs.DeletedComponentEventArgs(OpenNefia.Core.GameObjects.IComponent! component, OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.DrawDepth
OpenNefia.Core.GameObjects.DrawDepth.DrawDepth() -> void
OpenNefia.Core.GameObjects.EntityCreationException
OpenNefia.Core.GameObjects.EntityCreationException.EntityCreationException() -> void
OpenNefia.Core.GameObjects.EntityCreationException.EntityCreationException(string! message) -> void
OpenNefia.Core.GameObjects.EntityCreationException.EntityCreationException(string! message, System.Exception! inner) -> void
OpenNefia.Core.GameObjects.EntityCreationException.EntityCreationException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.GameObjects.EntityDeletedEvent
OpenNefia.Core.GameObjects.EntityDeletedEvent.EntityDeletedEvent(OpenNefia.Core.GameObjects.EntityUid entityUid) -> void
OpenNefia.Core.GameObjects.EntityDeletedEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntityEventArgs
OpenNefia.Core.GameObjects.EntityEventArgs.EntityEventArgs() -> void
OpenNefia.Core.GameObjects.EntityEventHandler<TEvent>
OpenNefia.Core.GameObjects.EntityEventRefHandler<TEvent>
OpenNefia.Core.GameObjects.EntityFactory
OpenNefia.Core.GameObjects.EntityFactory.EntityFactory() -> void
OpenNefia.Core.GameObjects.EntityFactory.LoadEntity(OpenNefia.Core.Prototypes.EntityPrototype? prototype, OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.GameObjects.IComponentFactory! factory, OpenNefia.Core.GameObjects.IEntityLoadContext? context) -> void
OpenNefia.Core.GameObjects.EntityFactory.UpdateEntity(OpenNefia.Core.GameObjects.MetaDataComponent! metaData, OpenNefia.Core.Prototypes.EntityPrototype! prototype) -> void
OpenNefia.Core.GameObjects.EntityGameLiveness
OpenNefia.Core.GameObjects.EntityGameLiveness.Alive = 0 -> OpenNefia.Core.GameObjects.EntityGameLiveness
OpenNefia.Core.GameObjects.EntityGameLiveness.DeadAndBuried = 2 -> OpenNefia.Core.GameObjects.EntityGameLiveness
OpenNefia.Core.GameObjects.EntityGameLiveness.Hidden = 1 -> OpenNefia.Core.GameObjects.EntityGameLiveness
OpenNefia.Core.GameObjects.EntityInitializedEvent
OpenNefia.Core.GameObjects.EntityInitializedEvent.EntityInitializedEvent(OpenNefia.Core.GameObjects.EntityUid entityUid) -> void
OpenNefia.Core.GameObjects.EntityInitializedEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntityLifeStage
OpenNefia.Core.GameObjects.EntityLifeStage.Deleted = 5 -> OpenNefia.Core.GameObjects.EntityLifeStage
OpenNefia.Core.GameObjects.EntityLifeStage.Initialized = 2 -> OpenNefia.Core.GameObjects.EntityLifeStage
OpenNefia.Core.GameObjects.EntityLifeStage.Initializing = 1 -> OpenNefia.Core.GameObjects.EntityLifeStage
OpenNefia.Core.GameObjects.EntityLifeStage.MapInitialized = 3 -> OpenNefia.Core.GameObjects.EntityLifeStage
OpenNefia.Core.GameObjects.EntityLifeStage.PreInit = 0 -> OpenNefia.Core.GameObjects.EntityLifeStage
OpenNefia.Core.GameObjects.EntityLifeStage.Terminating = 4 -> OpenNefia.Core.GameObjects.EntityLifeStage
OpenNefia.Core.GameObjects.EntityLivenessChangedEvent
OpenNefia.Core.GameObjects.EntityLivenessChangedEvent.EntityLivenessChangedEvent() -> void
OpenNefia.Core.GameObjects.EntityLivenessChangedEvent.EntityLivenessChangedEvent(OpenNefia.Core.GameObjects.EntityUid entityUid, OpenNefia.Core.GameObjects.EntityGameLiveness oldLiveness, OpenNefia.Core.GameObjects.EntityGameLiveness liveness) -> void
OpenNefia.Core.GameObjects.EntityLookup
OpenNefia.Core.GameObjects.EntityLookup.EntitiesUnderneath(OpenNefia.Core.GameObjects.EntityUid player, bool includeMapEntity = false, OpenNefia.Core.GameObjects.SpatialComponent? spatial = null) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.EntityLookup.EntityLookup() -> void
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryDirectlyIn<TComp1, TComp2, TComp3, TComp4>(OpenNefia.Core.GameObjects.EntityUid ent) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3, TComp4)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryDirectlyIn<TComp1, TComp2, TComp3>(OpenNefia.Core.GameObjects.EntityUid ent) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryDirectlyIn<TComp1, TComp2>(OpenNefia.Core.GameObjects.EntityUid ent) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryDirectlyIn<TComp>(OpenNefia.Core.GameObjects.EntityUid ent) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryInMap<TComp1, TComp2, TComp3, TComp4>(OpenNefia.Core.Maps.IMap! map, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3, TComp4)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryInMap<TComp1, TComp2, TComp3, TComp4>(OpenNefia.Core.Maps.MapId mapId, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3, TComp4)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryInMap<TComp1, TComp2, TComp3>(OpenNefia.Core.Maps.IMap! map, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryInMap<TComp1, TComp2, TComp3>(OpenNefia.Core.Maps.MapId mapId, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryInMap<TComp1, TComp2>(OpenNefia.Core.Maps.IMap! map, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryInMap<TComp1, TComp2>(OpenNefia.Core.Maps.MapId mapId, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2)>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryInMap<TComp>(OpenNefia.Core.Maps.IMap! map, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.EntityLookup.EntityQueryInMap<TComp>(OpenNefia.Core.Maps.MapId mapId, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.EntityLookup.GetAllEntitiesIn(OpenNefia.Core.Maps.MapId mapId, bool includeMapEntity = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.EntityLookup.GetBlockingEntity(OpenNefia.Core.Maps.MapCoordinates coords) -> OpenNefia.Core.GameObjects.SpatialComponent?
OpenNefia.Core.GameObjects.EntityLookup.GetEntitiesDirectlyIn(OpenNefia.Core.GameObjects.EntityUid entity, bool includeParent = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.EntityLookup.GetEntitiesDirectlyIn(OpenNefia.Core.Maps.MapId mapId, bool includeParent = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.EntityLookup.GetLiveEntitiesAtCoords(OpenNefia.Core.Maps.EntityCoordinates coords, bool includeParent = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.EntityLookup.GetLiveEntitiesAtCoords(OpenNefia.Core.Maps.MapCoordinates coords, bool includeMapEntity = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.EntityLookup.QueryLiveEntitiesAtCoords<TComp>(OpenNefia.Core.Maps.EntityCoordinates coords) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.EntityLookup.QueryLiveEntitiesAtCoords<TComp>(OpenNefia.Core.Maps.MapCoordinates coords) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.EntityLookup.TryGetOwningEntity<T>(OpenNefia.Core.GameObjects.EntityUid item, out OpenNefia.Core.GameObjects.EntityUid? owner) -> bool
OpenNefia.Core.GameObjects.EntityManager
OpenNefia.Core.GameObjects.EntityManager.AddComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.EntityManager.AddComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> T!
OpenNefia.Core.GameObjects.EntityManager.AddComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid, T! component, bool overwrite = false) -> void
OpenNefia.Core.GameObjects.EntityManager.Cleanup() -> void
OpenNefia.Core.GameObjects.EntityManager.ClearComponents() -> void
OpenNefia.Core.GameObjects.EntityManager.ComponentAdded -> System.EventHandler<OpenNefia.Core.GameObjects.ComponentEventArgs!>?
OpenNefia.Core.GameObjects.EntityManager.ComponentDeleted -> System.EventHandler<OpenNefia.Core.GameObjects.ComponentEventArgs!>?
OpenNefia.Core.GameObjects.EntityManager.ComponentFactory.get -> OpenNefia.Core.GameObjects.IComponentFactory!
OpenNefia.Core.GameObjects.EntityManager.ComponentRemoved -> System.EventHandler<OpenNefia.Core.GameObjects.ComponentEventArgs!>?
OpenNefia.Core.GameObjects.EntityManager.CreateEntityUninitialized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? prototypeId, OpenNefia.Core.GameObjects.EntityUid? euid = null, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntityManager.CreateEntityUninitialized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? prototypeId, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntityManager.CullRemovedComponents() -> void
OpenNefia.Core.GameObjects.EntityManager.Deleted(OpenNefia.Core.GameObjects.EntityUid uid) -> bool
OpenNefia.Core.GameObjects.EntityManager.Deleted(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.EntityManager.DeleteEntity(OpenNefia.Core.GameObjects.EntityUid e) -> void
OpenNefia.Core.GameObjects.EntityManager.DisposeComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.EntityManager.EnsureComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.EntityManager.EnsureComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> T!
OpenNefia.Core.GameObjects.EntityManager.EntityAdded -> System.EventHandler<OpenNefia.Core.GameObjects.EntityUid>?
OpenNefia.Core.GameObjects.EntityManager.EntityCount.get -> int
OpenNefia.Core.GameObjects.EntityManager.EntityDeleted -> System.EventHandler<OpenNefia.Core.GameObjects.EntityUid>?
OpenNefia.Core.GameObjects.EntityManager.EntityExists(OpenNefia.Core.GameObjects.EntityUid uid) -> bool
OpenNefia.Core.GameObjects.EntityManager.EntityExists(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.EntityManager.EntityInitialized -> System.EventHandler<OpenNefia.Core.GameObjects.EntityUid>?
OpenNefia.Core.GameObjects.EntityManager.EntityManager() -> void
OpenNefia.Core.GameObjects.EntityManager.EntityQuery<T>() -> System.Collections.Generic.IEnumerable<T>!
OpenNefia.Core.GameObjects.EntityManager.EntityQuery<TComp1, TComp2, TComp3, TComp4>() -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3, TComp4)>!
OpenNefia.Core.GameObjects.EntityManager.EntityQuery<TComp1, TComp2, TComp3>() -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3)>!
OpenNefia.Core.GameObjects.EntityManager.EntityQuery<TComp1, TComp2>() -> System.Collections.Generic.IEnumerable<(TComp1, TComp2)>!
OpenNefia.Core.GameObjects.EntityManager.EntityStarted -> System.EventHandler<OpenNefia.Core.GameObjects.EntityUid>?
OpenNefia.Core.GameObjects.EntityManager.EntitySysManager.get -> OpenNefia.Core.GameObjects.IEntitySystemManager!
OpenNefia.Core.GameObjects.EntityManager.EventBus.get -> OpenNefia.Core.GameObjects.IEventBus!
OpenNefia.Core.GameObjects.EntityManager.FlushEntities() -> void
OpenNefia.Core.GameObjects.EntityManager.GetAllComponents(System.Type! type) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.IComponent!>!
OpenNefia.Core.GameObjects.EntityManager.GetAllComponents<T>() -> System.Collections.Generic.IEnumerable<T>!
OpenNefia.Core.GameObjects.EntityManager.GetComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.EntityManager.GetComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> T
OpenNefia.Core.GameObjects.EntityManager.GetComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.IComponent!>!
OpenNefia.Core.GameObjects.EntityManager.GetComponents<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> System.Collections.Generic.IEnumerable<T>!
OpenNefia.Core.GameObjects.EntityManager.GetEntityUids() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.EntityUid>!
OpenNefia.Core.GameObjects.EntityManager.HasComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> bool
OpenNefia.Core.GameObjects.EntityManager.HasComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> bool
OpenNefia.Core.GameObjects.EntityManager.HasComponent<T>(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.EntityManager.Initialize() -> void
OpenNefia.Core.GameObjects.EntityManager.InitializeComponents() -> void
OpenNefia.Core.GameObjects.EntityManager.InitializeComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.EntityManager.Initialized.get -> bool
OpenNefia.Core.GameObjects.EntityManager.IsAlive(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.EntityManager.IsDeadAndBuried(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.EntityManager.NextEntityUid.get -> int
OpenNefia.Core.GameObjects.EntityManager.NextEntityUid.set -> void
OpenNefia.Core.GameObjects.EntityManager.QueueDeleteEntity(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.EntityManager.RemoveComponent(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.IComponent! component) -> void
OpenNefia.Core.GameObjects.EntityManager.RemoveComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> void
OpenNefia.Core.GameObjects.EntityManager.RemoveComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.EntityManager.RemoveComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.EntityManager.Shutdown() -> void
OpenNefia.Core.GameObjects.EntityManager.StartComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.EntityManager.Started.get -> bool
OpenNefia.Core.GameObjects.EntityManager.Startup() -> void
OpenNefia.Core.GameObjects.EntityManager.TryGetComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type, out OpenNefia.Core.GameObjects.IComponent? component) -> bool
OpenNefia.Core.GameObjects.EntityManager.TryGetComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid, out T component) -> bool
OpenNefia.Core.GameObjects.EntityManagerExt
OpenNefia.Core.GameObjects.EntityMapInitEvent
OpenNefia.Core.GameObjects.EntityMapInitEvent.EntityMapInitEvent() -> void
OpenNefia.Core.GameObjects.EntityMessageType
OpenNefia.Core.GameObjects.EntityMessageType.ComponentMessage = 1 -> OpenNefia.Core.GameObjects.EntityMessageType
OpenNefia.Core.GameObjects.EntityMessageType.Error = 0 -> OpenNefia.Core.GameObjects.EntityMessageType
OpenNefia.Core.GameObjects.EntityMessageType.SystemMessage = 2 -> OpenNefia.Core.GameObjects.EntityMessageType
OpenNefia.Core.GameObjects.EntityParentChangedEvent
OpenNefia.Core.GameObjects.EntityParentChangedEvent.EntityParentChangedEvent() -> void
OpenNefia.Core.GameObjects.EntityParentChangedEvent.EntityParentChangedEvent(OpenNefia.Core.GameObjects.EntityUid? oldParent) -> void
OpenNefia.Core.GameObjects.EntityParentChangedEvent.OldParent.get -> OpenNefia.Core.GameObjects.EntityUid?
OpenNefia.Core.GameObjects.EntityPositionChangedEvent
OpenNefia.Core.GameObjects.EntityPositionChangedEvent.EntityPositionChangedEvent() -> void
OpenNefia.Core.GameObjects.EntityPositionChangedEvent.EntityPositionChangedEvent(OpenNefia.Core.Maps.EntityCoordinates oldPos, OpenNefia.Core.Maps.EntityCoordinates newPos, OpenNefia.Core.GameObjects.SpatialComponent! component) -> void
OpenNefia.Core.GameObjects.EntitySplitEvent
OpenNefia.Core.GameObjects.EntitySplitEvent.EntitySplitEvent() -> void
OpenNefia.Core.GameObjects.EntitySplitEvent.EntitySplitEvent(OpenNefia.Core.GameObjects.EntityUid splitInto) -> void
OpenNefia.Core.GameObjects.EntitySplitEvent.SplitInto.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntityStackedEvent
OpenNefia.Core.GameObjects.EntityStackedEvent.EntityStackedEvent() -> void
OpenNefia.Core.GameObjects.EntityStackedEvent.EntityStackedEvent(OpenNefia.Core.GameObjects.EntityUid stackedWith, int oldCount, int newCount, bool showMessage) -> void
OpenNefia.Core.GameObjects.EntityStackedEvent.NewCount.get -> int
OpenNefia.Core.GameObjects.EntityStackedEvent.OldCount.get -> int
OpenNefia.Core.GameObjects.EntityStackedEvent.ShowMessage.get -> bool
OpenNefia.Core.GameObjects.EntityStackedEvent.StackedWith.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntityStringRepresentation
OpenNefia.Core.GameObjects.EntityStringRepresentation.Deleted.get -> bool
OpenNefia.Core.GameObjects.EntityStringRepresentation.Deleted.init -> void
OpenNefia.Core.GameObjects.EntityStringRepresentation.EntityStringRepresentation() -> void
OpenNefia.Core.GameObjects.EntityStringRepresentation.EntityStringRepresentation(OpenNefia.Core.GameObjects.EntityUid Uid, bool Deleted, string? Name = null, string? Prototype = null) -> void
OpenNefia.Core.GameObjects.EntityStringRepresentation.Name.get -> string?
OpenNefia.Core.GameObjects.EntityStringRepresentation.Name.init -> void
OpenNefia.Core.GameObjects.EntityStringRepresentation.Prototype.get -> string?
OpenNefia.Core.GameObjects.EntityStringRepresentation.Prototype.init -> void
OpenNefia.Core.GameObjects.EntityStringRepresentation.ToString(string? format, System.IFormatProvider? formatProvider) -> string!
OpenNefia.Core.GameObjects.EntityStringRepresentation.Uid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntityStringRepresentation.Uid.init -> void
OpenNefia.Core.GameObjects.EntitySystem
OpenNefia.Core.GameObjects.EntitySystem.AreaOrNull(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Maps.IMapManager? mapMan = null, OpenNefia.Core.Areas.IAreaManager? areaMan = null) -> OpenNefia.Core.Areas.IArea?
OpenNefia.Core.GameObjects.EntitySystem.Comp<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> T!
OpenNefia.Core.GameObjects.EntitySystem.CompOrNull<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> T?
OpenNefia.Core.GameObjects.EntitySystem.CompOrNull<T>(OpenNefia.Core.GameObjects.EntityUid? uid) -> T?
OpenNefia.Core.GameObjects.EntitySystem.EnsureComp<T>(OpenNefia.Core.GameObjects.EntityUid ent) -> T!
OpenNefia.Core.GameObjects.EntitySystem.EntitySystem() -> void
OpenNefia.Core.GameObjects.EntitySystem.EntitySystem(OpenNefia.Core.GameObjects.IEntityManager! entityManager) -> void
OpenNefia.Core.GameObjects.EntitySystem.GetMap(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Maps.IMapManager? mapMan = null) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.GameObjects.EntitySystem.GetMap(OpenNefia.Core.Maps.MapCoordinates coords, OpenNefia.Core.Maps.IMapManager? mapMan = null) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.GameObjects.EntitySystem.HasComp<T>(OpenNefia.Core.GameObjects.EntityUid ent) -> bool
OpenNefia.Core.GameObjects.EntitySystem.IsAlive(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.EntitySystem.MapOrNull(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Maps.IMapManager? mapMan = null) -> OpenNefia.Core.Maps.IMap?
OpenNefia.Core.GameObjects.EntitySystem.MetaData(OpenNefia.Core.GameObjects.EntityUid uid) -> OpenNefia.Core.GameObjects.MetaDataComponent!
OpenNefia.Core.GameObjects.EntitySystem.ProtoIDOrNull(OpenNefia.Core.GameObjects.EntityUid uid) -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>?
OpenNefia.Core.GameObjects.EntitySystem.Raise<T1, T2>(OpenNefia.Core.GameObjects.EntityUid uid, T1! args, T2! propagateTo) -> bool
OpenNefia.Core.GameObjects.EntitySystem.Raise<T>(OpenNefia.Core.GameObjects.EntityUid uid, T! args, bool broadcast = true) -> bool
OpenNefia.Core.GameObjects.EntitySystem.RaiseEvent(object! message) -> void
OpenNefia.Core.GameObjects.EntitySystem.RaiseEvent(OpenNefia.Core.GameObjects.EntityUid uid, object! args, bool broadcast = true) -> void
OpenNefia.Core.GameObjects.EntitySystem.RaiseEvent(OpenNefia.Core.GameObjects.EntityUid uid, ref object! args, bool broadcast = true) -> void
OpenNefia.Core.GameObjects.EntitySystem.RaiseEvent<T>(T message) -> void
OpenNefia.Core.GameObjects.EntitySystem.RaiseEvent<TEvent>(OpenNefia.Core.GameObjects.EntityUid uid, ref TEvent args, bool broadcast = true) -> void
OpenNefia.Core.GameObjects.EntitySystem.RaiseEvent<TEvent>(OpenNefia.Core.GameObjects.EntityUid uid, TEvent args, bool broadcast = true) -> void
OpenNefia.Core.GameObjects.EntitySystem.Resolve<TComp1, TComp2, TComp3, TComp4>(OpenNefia.Core.GameObjects.EntityUid uid, ref TComp1? comp1, ref TComp2? comp2, ref TComp3? comp3, ref TComp4? comp4, bool logMissing = true) -> bool
OpenNefia.Core.GameObjects.EntitySystem.Resolve<TComp1, TComp2, TComp3>(OpenNefia.Core.GameObjects.EntityUid uid, ref TComp1? comp1, ref TComp2? comp2, ref TComp3? comp3, bool logMissing = true) -> bool
OpenNefia.Core.GameObjects.EntitySystem.Resolve<TComp1, TComp2>(OpenNefia.Core.GameObjects.EntityUid uid, ref TComp1? comp1, ref TComp2? comp2, bool logMissing = true) -> bool
OpenNefia.Core.GameObjects.EntitySystem.Resolve<TComp>(OpenNefia.Core.GameObjects.EntityUid uid, ref TComp? component, bool logMissing = true) -> bool
OpenNefia.Core.GameObjects.EntitySystem.Spatial(OpenNefia.Core.GameObjects.EntityUid uid) -> OpenNefia.Core.GameObjects.SpatialComponent!
OpenNefia.Core.GameObjects.EntitySystem.Subs.get -> OpenNefia.Core.GameObjects.EntitySystem.Subscriptions!
OpenNefia.Core.GameObjects.EntitySystem.SubscribeBroadcast<T>(OpenNefia.Core.GameObjects.BroadcastEventHandler<T>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.EntitySystem.SubscribeBroadcast<T>(OpenNefia.Core.GameObjects.BroadcastEventRefHandler<T>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.EntitySystem.SubscribeComponent<TComp, TEvent>(OpenNefia.Core.GameObjects.ComponentEventHandler<TComp, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.EntitySystem.SubscribeComponent<TComp, TEvent>(OpenNefia.Core.GameObjects.ComponentEventRefHandler<TComp, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.EntitySystem.SubscribeEntity<TEvent>(OpenNefia.Core.GameObjects.EntityEventHandler<TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.EntitySystem.SubscribeEntity<TEvent>(OpenNefia.Core.GameObjects.EntityEventRefHandler<TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.EntitySystem.Subscriptions
OpenNefia.Core.GameObjects.EntitySystem.Subscriptions.SubBroadcast<T>(OpenNefia.Core.GameObjects.BroadcastEventHandler<T>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.EntitySystem.Subscriptions.SubscribeLocalEvent<TComp, TEvent>(OpenNefia.Core.GameObjects.ComponentEventHandler<TComp, TEvent!>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.EntitySystem.Subscriptions.System.get -> OpenNefia.Core.GameObjects.EntitySystem!
OpenNefia.Core.GameObjects.EntitySystem.TryArea(OpenNefia.Core.Areas.AreaId areaId, out OpenNefia.Core.Areas.IArea? area, OpenNefia.Core.Areas.IAreaManager? areaMan = null) -> bool
OpenNefia.Core.GameObjects.EntitySystem.TryArea(OpenNefia.Core.GameObjects.EntityUid uid, out OpenNefia.Core.Areas.IArea? area, OpenNefia.Core.Maps.IMapManager? mapMan = null, OpenNefia.Core.Areas.IAreaManager? areaMan = null) -> bool
OpenNefia.Core.GameObjects.EntitySystem.TryArea(OpenNefia.Core.Maps.IMap! map, out OpenNefia.Core.Areas.IArea? area, OpenNefia.Core.Areas.IAreaManager? areaMan = null) -> bool
OpenNefia.Core.GameObjects.EntitySystem.TryComp<T>(OpenNefia.Core.GameObjects.EntityUid? uid, out T? component) -> bool
OpenNefia.Core.GameObjects.EntitySystem.TryMap(OpenNefia.Core.GameObjects.EntityUid uid, out OpenNefia.Core.Maps.IMap? map, OpenNefia.Core.Maps.IMapManager? mapMan = null) -> bool
OpenNefia.Core.GameObjects.EntitySystem.TryMap(OpenNefia.Core.Maps.MapCoordinates coords, out OpenNefia.Core.Maps.IMap? map, OpenNefia.Core.Maps.IMapManager? mapMan = null) -> bool
OpenNefia.Core.GameObjects.EntitySystem.TryProto(OpenNefia.Core.GameObjects.EntityUid uid, out OpenNefia.Core.Prototypes.EntityPrototype? proto) -> bool
OpenNefia.Core.GameObjects.EntitySystem.TryProtoID(OpenNefia.Core.GameObjects.EntityUid uid, out OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? protoID) -> bool
OpenNefia.Core.GameObjects.EntitySystemManager
OpenNefia.Core.GameObjects.EntitySystemManager.Clear() -> void
OpenNefia.Core.GameObjects.EntitySystemManager.DependencyCollection.get -> OpenNefia.Core.IoC.IDependencyCollection!
OpenNefia.Core.GameObjects.EntitySystemManager.EntitySystemManager() -> void
OpenNefia.Core.GameObjects.EntitySystemManager.GetEntitySystem(System.Type! type) -> OpenNefia.Core.GameObjects.IEntitySystem!
OpenNefia.Core.GameObjects.EntitySystemManager.GetEntitySystem<T>() -> T
OpenNefia.Core.GameObjects.EntitySystemManager.Initialize() -> void
OpenNefia.Core.GameObjects.EntitySystemManager.InjectDependencies<T>(T obj) -> T
OpenNefia.Core.GameObjects.EntitySystemManager.LoadExtraSystemType(System.Type! type) -> void
OpenNefia.Core.GameObjects.EntitySystemManager.LoadExtraSystemType<T>() -> void
OpenNefia.Core.GameObjects.EntitySystemManager.MetricsEnabled.get -> bool
OpenNefia.Core.GameObjects.EntitySystemManager.MetricsEnabled.set -> void
OpenNefia.Core.GameObjects.EntitySystemManager.Resolve<T1, T2, T3, T4>(ref T1? instance1, ref T2? instance2, ref T3? instance3, ref T4? instance4) -> void
OpenNefia.Core.GameObjects.EntitySystemManager.Resolve<T1, T2, T3>(ref T1? instance1, ref T2? instance2, ref T3? instance3) -> void
OpenNefia.Core.GameObjects.EntitySystemManager.Resolve<T1, T2>(ref T1? instance1, ref T2? instance2) -> void
OpenNefia.Core.GameObjects.EntitySystemManager.Resolve<T>(ref T? instance) -> void
OpenNefia.Core.GameObjects.EntitySystemManager.Shutdown() -> void
OpenNefia.Core.GameObjects.EntitySystemManager.SystemLoaded -> System.EventHandler<OpenNefia.Core.GameObjects.SystemChangedArgs!>?
OpenNefia.Core.GameObjects.EntitySystemManager.SystemTypes.get -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.GameObjects.EntitySystemManager.SystemUnloaded -> System.EventHandler<OpenNefia.Core.GameObjects.SystemChangedArgs!>?
OpenNefia.Core.GameObjects.EntitySystemManager.TryGetEntitySystem(System.Type! type, out OpenNefia.Core.GameObjects.IEntitySystem? entitySystem) -> bool
OpenNefia.Core.GameObjects.EntitySystemManager.TryGetEntitySystem<T>(out T? entitySystem) -> bool
OpenNefia.Core.GameObjects.EntityTangibilityChangedEvent
OpenNefia.Core.GameObjects.EntityTangibilityChangedEvent.EntityTangibilityChangedEvent() -> void
OpenNefia.Core.GameObjects.EntityTerminatingEvent
OpenNefia.Core.GameObjects.EntityTerminatingEvent.EntityTerminatingEvent() -> void
OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntityUid.CompareTo(OpenNefia.Core.GameObjects.EntityUid other) -> int
OpenNefia.Core.GameObjects.EntityUid.EntityUid() -> void
OpenNefia.Core.GameObjects.EntityUid.EntityUid(int uid) -> void
OpenNefia.Core.GameObjects.EntityUid.Equals(OpenNefia.Core.GameObjects.EntityUid other) -> bool
OpenNefia.Core.GameObjects.EntityUid.IsValid() -> bool
OpenNefia.Core.GameObjects.EntityUidQueryCallback
OpenNefia.Core.GameObjects.EntMapIdChangedEvent
OpenNefia.Core.GameObjects.EntMapIdChangedEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.EntMapIdChangedEvent.EntMapIdChangedEvent(OpenNefia.Core.GameObjects.EntityUid entityUid, OpenNefia.Core.Maps.MapId oldMapId) -> void
OpenNefia.Core.GameObjects.EntMapIdChangedEvent.OldMapId.get -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.GameObjects.EventPriorities
OpenNefia.Core.GameObjects.EventTarget
OpenNefia.Core.GameObjects.EventTarget.Area = 2 -> OpenNefia.Core.GameObjects.EventTarget
OpenNefia.Core.GameObjects.EventTarget.Map = 1 -> OpenNefia.Core.GameObjects.EventTarget
OpenNefia.Core.GameObjects.EventTarget.Normal = 0 -> OpenNefia.Core.GameObjects.EventTarget
OpenNefia.Core.GameObjects.EventUsageAttribute
OpenNefia.Core.GameObjects.EventUsageAttribute.EventUsageAttribute(OpenNefia.Core.GameObjects.EventTarget target) -> void
OpenNefia.Core.GameObjects.EventUsageAttribute.Target.get -> OpenNefia.Core.GameObjects.EventTarget
OpenNefia.Core.GameObjects.GetVerbsEventArgs
OpenNefia.Core.GameObjects.GetVerbsEventArgs.GetVerbsEventArgs(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target) -> void
OpenNefia.Core.GameObjects.HandledEntityEventArgs
OpenNefia.Core.GameObjects.HandledEntityEventArgs.Handled.get -> bool
OpenNefia.Core.GameObjects.HandledEntityEventArgs.Handled.set -> void
OpenNefia.Core.GameObjects.HandledEntityEventArgs.HandledEntityEventArgs() -> void
OpenNefia.Core.GameObjects.IBroadcastEventBus
OpenNefia.Core.GameObjects.IBroadcastEventBus.RaiseEvent(object! toRaise) -> void
OpenNefia.Core.GameObjects.IBroadcastEventBus.RaiseEvent<T>(ref T toRaise) -> void
OpenNefia.Core.GameObjects.IBroadcastEventBus.RaiseEvent<T>(T toRaise) -> void
OpenNefia.Core.GameObjects.IBroadcastEventBus.SubscribeBroadcastEvent<T>(OpenNefia.Core.GameObjects.IEntityEventSubscriber! subscriber, OpenNefia.Core.GameObjects.BroadcastEventHandler<T>! eventHandler, long priority = 0) -> void
OpenNefia.Core.GameObjects.IBroadcastEventBus.SubscribeBroadcastEvent<T>(OpenNefia.Core.GameObjects.IEntityEventSubscriber! subscriber, OpenNefia.Core.GameObjects.BroadcastEventRefHandler<T>! eventHandler, long priority = 0) -> void
OpenNefia.Core.GameObjects.IBroadcastEventBus.UnsubscribeEvent<T>(OpenNefia.Core.GameObjects.IEntityEventSubscriber! subscriber) -> void
OpenNefia.Core.GameObjects.IBroadcastEventBus.UnsubscribeEvents(OpenNefia.Core.GameObjects.IEntityEventSubscriber! subscriber) -> void
OpenNefia.Core.GameObjects.IComponent
OpenNefia.Core.GameObjects.IComponent.Deleted.get -> bool
OpenNefia.Core.GameObjects.IComponent.Initialized.get -> bool
OpenNefia.Core.GameObjects.IComponent.LifeStage.get -> OpenNefia.Core.GameObjects.ComponentLifeStage
OpenNefia.Core.GameObjects.IComponent.Name.get -> string!
OpenNefia.Core.GameObjects.IComponent.Owner.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.IComponent.Running.get -> bool
OpenNefia.Core.GameObjects.IComponentDependencyManager
OpenNefia.Core.GameObjects.IComponentDependencyManager.OnComponentAdd(OpenNefia.Core.GameObjects.EntityUid eUid, OpenNefia.Core.GameObjects.IComponent! newComp) -> void
OpenNefia.Core.GameObjects.IComponentDependencyManager.OnComponentRemove(OpenNefia.Core.GameObjects.EntityUid eUid, OpenNefia.Core.GameObjects.IComponent! removedComp) -> void
OpenNefia.Core.GameObjects.IComponentFactory
OpenNefia.Core.GameObjects.IComponentFactory.AllRegisteredTypes.get -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.GameObjects.IComponentFactory.ComponentAdded -> System.Action<OpenNefia.Core.GameObjects.IComponentRegistration!>!
OpenNefia.Core.GameObjects.IComponentFactory.ComponentIgnoreAdded -> System.Action<string!>!
OpenNefia.Core.GameObjects.IComponentFactory.ComponentReferenceAdded -> System.Action<(OpenNefia.Core.GameObjects.IComponentRegistration!, System.Type!)>!
OpenNefia.Core.GameObjects.IComponentFactory.DoAutoRegistrations() -> void
OpenNefia.Core.GameObjects.IComponentFactory.DoDefaultRegistrations() -> void
OpenNefia.Core.GameObjects.IComponentFactory.FinishRegistration() -> void
OpenNefia.Core.GameObjects.IComponentFactory.GetAllRefTypes() -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.GameObjects.IComponentFactory.GetComponent(string! componentName, bool ignoreCase = false) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.IComponentFactory.GetComponent(System.Type! componentType) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.IComponentFactory.GetComponent<T>() -> T
OpenNefia.Core.GameObjects.IComponentFactory.GetRegistration(OpenNefia.Core.GameObjects.IComponent! component) -> OpenNefia.Core.GameObjects.IComponentRegistration!
OpenNefia.Core.GameObjects.IComponentFactory.GetRegistration(string! componentName, bool ignoreCase = false) -> OpenNefia.Core.GameObjects.IComponentRegistration!
OpenNefia.Core.GameObjects.IComponentFactory.GetRegistration(System.Type! reference) -> OpenNefia.Core.GameObjects.IComponentRegistration!
OpenNefia.Core.GameObjects.IComponentFactory.GetRegistration<T>() -> OpenNefia.Core.GameObjects.IComponentRegistration!
OpenNefia.Core.GameObjects.IComponentFactory.IsRegistered(string! name) -> bool
OpenNefia.Core.GameObjects.IComponentFactory.RegisterClass<T>(bool overwrite = false) -> void
OpenNefia.Core.GameObjects.IComponentFactory.RegisterIgnore(string! name, bool overwrite = false) -> void
OpenNefia.Core.GameObjects.IComponentFactory.TryGetRegistration(OpenNefia.Core.GameObjects.IComponent! component, out OpenNefia.Core.GameObjects.IComponentRegistration? registration) -> bool
OpenNefia.Core.GameObjects.IComponentFactory.TryGetRegistration(string! componentName, out OpenNefia.Core.GameObjects.IComponentRegistration? registration, bool ignoreCase = false) -> bool
OpenNefia.Core.GameObjects.IComponentFactory.TryGetRegistration(System.Type! reference, out OpenNefia.Core.GameObjects.IComponentRegistration? registration) -> bool
OpenNefia.Core.GameObjects.IComponentFactory.TryGetRegistration<T>(out OpenNefia.Core.GameObjects.IComponentRegistration? registration) -> bool
OpenNefia.Core.GameObjects.IComponentLocalizer
OpenNefia.Core.GameObjects.IComponentLocalizer.LocalizeComponent(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Locale.IComponentLocalizable! compLocalizable) -> void
OpenNefia.Core.GameObjects.IComponentLocalizer.LocalizeComponents(OpenNefia.Core.GameObjects.EntityUid entityUid) -> void
OpenNefia.Core.GameObjects.IComponentRegistration
OpenNefia.Core.GameObjects.IComponentRegistration.Name.get -> string!
OpenNefia.Core.GameObjects.IComponentRegistration.References.get -> System.Collections.Generic.IReadOnlyList<System.Type!>!
OpenNefia.Core.GameObjects.IComponentRegistration.Type.get -> System.Type!
OpenNefia.Core.GameObjects.IDirectedEventBus
OpenNefia.Core.GameObjects.IDirectedEventBus.RaiseEvent(OpenNefia.Core.GameObjects.EntityUid uid, object! args, bool broadcast = true) -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.RaiseEvent(OpenNefia.Core.GameObjects.EntityUid uid, ref object! args, bool broadcast = true) -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.RaiseEvent<TEvent>(OpenNefia.Core.GameObjects.EntityUid uid, ref TEvent args, bool broadcast = true) -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.RaiseEvent<TEvent>(OpenNefia.Core.GameObjects.EntityUid uid, TEvent args, bool broadcast = true) -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.SubscribeComponentEvent<TComp, TEvent>(OpenNefia.Core.GameObjects.ComponentEventHandler<TComp, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.SubscribeComponentEvent<TComp, TEvent>(OpenNefia.Core.GameObjects.ComponentEventRefHandler<TComp, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.SubscribeEntityEvent<TEvent>(OpenNefia.Core.GameObjects.EntityEventHandler<TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.SubscribeEntityEvent<TEvent>(OpenNefia.Core.GameObjects.EntityEventRefHandler<TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.UnsubscribeAllComponentEvents<TComp, TEvent>() -> void
OpenNefia.Core.GameObjects.IDirectedEventBus.UnsubscribeAllEntityEvents<TEvent>() -> void
OpenNefia.Core.GameObjects.IEntityEventSubscriber
OpenNefia.Core.GameObjects.IEntityFactory
OpenNefia.Core.GameObjects.IEntityFactory.UpdateEntity(OpenNefia.Core.GameObjects.MetaDataComponent! metaData, OpenNefia.Core.Prototypes.EntityPrototype! prototype) -> void
OpenNefia.Core.GameObjects.IEntityLoadContext
OpenNefia.Core.GameObjects.IEntityLoadContext.GetComponentData(string! componentName, OpenNefia.Core.GameObjects.IComponent? protoData) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.IEntityLoadContext.GetExtraComponentTypes() -> System.Collections.Generic.IEnumerable<string!>!
OpenNefia.Core.GameObjects.IEntityLoadContext.ShouldLoadComponent(string! componentName) -> bool
OpenNefia.Core.GameObjects.IEntityLookup
OpenNefia.Core.GameObjects.IEntityLookup.EntitiesUnderneath(OpenNefia.Core.GameObjects.EntityUid player, bool includeMapEntity = false, OpenNefia.Core.GameObjects.SpatialComponent? spatial = null) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryDirectlyIn<TComp1, TComp2, TComp3, TComp4>(OpenNefia.Core.GameObjects.EntityUid ent) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3, TComp4)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryDirectlyIn<TComp1, TComp2, TComp3>(OpenNefia.Core.GameObjects.EntityUid ent) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryDirectlyIn<TComp1, TComp2>(OpenNefia.Core.GameObjects.EntityUid ent) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryDirectlyIn<TComp>(OpenNefia.Core.GameObjects.EntityUid ent) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryInMap<TComp1, TComp2, TComp3, TComp4>(OpenNefia.Core.Maps.IMap! map, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3, TComp4)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryInMap<TComp1, TComp2, TComp3, TComp4>(OpenNefia.Core.Maps.MapId mapId, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3, TComp4)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryInMap<TComp1, TComp2, TComp3>(OpenNefia.Core.Maps.IMap! map, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryInMap<TComp1, TComp2, TComp3>(OpenNefia.Core.Maps.MapId mapId, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryInMap<TComp1, TComp2>(OpenNefia.Core.Maps.IMap! map, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryInMap<TComp1, TComp2>(OpenNefia.Core.Maps.MapId mapId, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<(TComp1, TComp2)>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryInMap<TComp>(OpenNefia.Core.Maps.IMap! map, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.IEntityLookup.EntityQueryInMap<TComp>(OpenNefia.Core.Maps.MapId mapId, bool includeChildren = false, bool includeDead = false) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.IEntityLookup.GetAllEntitiesIn(OpenNefia.Core.Maps.MapId mapId, bool includeMapEntity = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.IEntityLookup.GetBlockingEntity(OpenNefia.Core.Maps.MapCoordinates coords) -> OpenNefia.Core.GameObjects.SpatialComponent?
OpenNefia.Core.GameObjects.IEntityLookup.GetEntitiesDirectlyIn(OpenNefia.Core.GameObjects.EntityUid entity, bool includeParent = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.IEntityLookup.GetEntitiesDirectlyIn(OpenNefia.Core.Maps.MapId mapId, bool includeMapEntity = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.IEntityLookup.GetLiveEntitiesAtCoords(OpenNefia.Core.Maps.EntityCoordinates coords, bool includeParent = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.IEntityLookup.GetLiveEntitiesAtCoords(OpenNefia.Core.Maps.MapCoordinates coords, bool includeMapEntity = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.IEntityLookup.QueryLiveEntitiesAtCoords<TComp>(OpenNefia.Core.Maps.EntityCoordinates coords) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.IEntityLookup.QueryLiveEntitiesAtCoords<TComp>(OpenNefia.Core.Maps.MapCoordinates coords) -> System.Collections.Generic.IEnumerable<TComp>!
OpenNefia.Core.GameObjects.IEntityLookup.TryGetOwningEntity<T>(OpenNefia.Core.GameObjects.EntityUid item, out OpenNefia.Core.GameObjects.EntityUid? owner) -> bool
OpenNefia.Core.GameObjects.IEntityManager
OpenNefia.Core.GameObjects.IEntityManager.AddComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.IEntityManager.AddComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> T!
OpenNefia.Core.GameObjects.IEntityManager.AddComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid, T! component, bool overwrite = false) -> void
OpenNefia.Core.GameObjects.IEntityManager.Cleanup() -> void
OpenNefia.Core.GameObjects.IEntityManager.ComponentAdded -> System.EventHandler<OpenNefia.Core.GameObjects.ComponentEventArgs!>?
OpenNefia.Core.GameObjects.IEntityManager.ComponentDeleted -> System.EventHandler<OpenNefia.Core.GameObjects.ComponentEventArgs!>?
OpenNefia.Core.GameObjects.IEntityManager.ComponentFactory.get -> OpenNefia.Core.GameObjects.IComponentFactory!
OpenNefia.Core.GameObjects.IEntityManager.ComponentRemoved -> System.EventHandler<OpenNefia.Core.GameObjects.ComponentEventArgs!>?
OpenNefia.Core.GameObjects.IEntityManager.CreateEntityUninitialized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? prototypeId, OpenNefia.Core.GameObjects.EntityUid? euid, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.IEntityManager.CreateEntityUninitialized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? prototypeId, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.IEntityManager.CreateEntityUninitialized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? prototypeId, OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.IEntityManager.CreateEntityUninitialized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? prototypeId, OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.IEntityManager.CullRemovedComponents() -> void
OpenNefia.Core.GameObjects.IEntityManager.Deleted(OpenNefia.Core.GameObjects.EntityUid uid) -> bool
OpenNefia.Core.GameObjects.IEntityManager.Deleted(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.IEntityManager.DeleteEntity(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.IEntityManager.DisposeComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.IEntityManager.EnsureComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.IEntityManager.EnsureComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> T!
OpenNefia.Core.GameObjects.IEntityManager.EntityAdded -> System.EventHandler<OpenNefia.Core.GameObjects.EntityUid>?
OpenNefia.Core.GameObjects.IEntityManager.EntityCount.get -> int
OpenNefia.Core.GameObjects.IEntityManager.EntityDeleted -> System.EventHandler<OpenNefia.Core.GameObjects.EntityUid>?
OpenNefia.Core.GameObjects.IEntityManager.EntityExists(OpenNefia.Core.GameObjects.EntityUid uid) -> bool
OpenNefia.Core.GameObjects.IEntityManager.EntityInitialized -> System.EventHandler<OpenNefia.Core.GameObjects.EntityUid>?
OpenNefia.Core.GameObjects.IEntityManager.EntityQuery<T>() -> System.Collections.Generic.IEnumerable<T>!
OpenNefia.Core.GameObjects.IEntityManager.EntityQuery<TComp1, TComp2, TComp3, TComp4>() -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3, TComp4)>!
OpenNefia.Core.GameObjects.IEntityManager.EntityQuery<TComp1, TComp2, TComp3>() -> System.Collections.Generic.IEnumerable<(TComp1, TComp2, TComp3)>!
OpenNefia.Core.GameObjects.IEntityManager.EntityQuery<TComp1, TComp2>() -> System.Collections.Generic.IEnumerable<(TComp1, TComp2)>!
OpenNefia.Core.GameObjects.IEntityManager.EntityStarted -> System.EventHandler<OpenNefia.Core.GameObjects.EntityUid>?
OpenNefia.Core.GameObjects.IEntityManager.EntitySysManager.get -> OpenNefia.Core.GameObjects.IEntitySystemManager!
OpenNefia.Core.GameObjects.IEntityManager.EventBus.get -> OpenNefia.Core.GameObjects.IEventBus!
OpenNefia.Core.GameObjects.IEntityManager.GetAllComponents(System.Type! type) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.IComponent!>!
OpenNefia.Core.GameObjects.IEntityManager.GetAllComponents<T>() -> System.Collections.Generic.IEnumerable<T>!
OpenNefia.Core.GameObjects.IEntityManager.GetComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> OpenNefia.Core.GameObjects.IComponent!
OpenNefia.Core.GameObjects.IEntityManager.GetComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> T
OpenNefia.Core.GameObjects.IEntityManager.GetComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.IComponent!>!
OpenNefia.Core.GameObjects.IEntityManager.GetComponents<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> System.Collections.Generic.IEnumerable<T>!
OpenNefia.Core.GameObjects.IEntityManager.GetEntityUids() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.EntityUid>!
OpenNefia.Core.GameObjects.IEntityManager.HasComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> bool
OpenNefia.Core.GameObjects.IEntityManager.HasComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> bool
OpenNefia.Core.GameObjects.IEntityManager.Initialize() -> void
OpenNefia.Core.GameObjects.IEntityManager.InitializeComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.IEntityManager.IsAlive(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.IEntityManager.IsDeadAndBuried(OpenNefia.Core.GameObjects.EntityUid? uid) -> bool
OpenNefia.Core.GameObjects.IEntityManager.RemoveComponent(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.IComponent! component) -> void
OpenNefia.Core.GameObjects.IEntityManager.RemoveComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type) -> void
OpenNefia.Core.GameObjects.IEntityManager.RemoveComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.IEntityManager.RemoveComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.IEntityManager.Shutdown() -> void
OpenNefia.Core.GameObjects.IEntityManager.SpawnEntity(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? protoId, OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.IEntityManager.SpawnEntity(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? protoId, OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.IEntityManager.StartComponents(OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.IEntityManager.Startup() -> void
OpenNefia.Core.GameObjects.IEntityManager.ToPrettyString(OpenNefia.Core.GameObjects.EntityUid uid) -> OpenNefia.Core.GameObjects.EntityStringRepresentation
OpenNefia.Core.GameObjects.IEntityManager.TryGetComponent(OpenNefia.Core.GameObjects.EntityUid uid, System.Type! type, out OpenNefia.Core.GameObjects.IComponent? component) -> bool
OpenNefia.Core.GameObjects.IEntityManager.TryGetComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid, out T component) -> bool
OpenNefia.Core.GameObjects.IEntitySystem
OpenNefia.Core.GameObjects.IEntitySystem.Initialize() -> void
OpenNefia.Core.GameObjects.IEntitySystem.Shutdown() -> void
OpenNefia.Core.GameObjects.IEntitySystemManager
OpenNefia.Core.GameObjects.IEntitySystemManager.Clear() -> void
OpenNefia.Core.GameObjects.IEntitySystemManager.DependencyCollection.get -> OpenNefia.Core.IoC.IDependencyCollection!
OpenNefia.Core.GameObjects.IEntitySystemManager.GetEntitySystem(System.Type! type) -> OpenNefia.Core.GameObjects.IEntitySystem!
OpenNefia.Core.GameObjects.IEntitySystemManager.GetEntitySystem<T>() -> T
OpenNefia.Core.GameObjects.IEntitySystemManager.Initialize() -> void
OpenNefia.Core.GameObjects.IEntitySystemManager.InjectDependencies<T>(T obj) -> T
OpenNefia.Core.GameObjects.IEntitySystemManager.LoadExtraSystemType(System.Type! type) -> void
OpenNefia.Core.GameObjects.IEntitySystemManager.LoadExtraSystemType<T>() -> void
OpenNefia.Core.GameObjects.IEntitySystemManager.Resolve<T>(ref T? instance) -> void
OpenNefia.Core.GameObjects.IEntitySystemManager.Shutdown() -> void
OpenNefia.Core.GameObjects.IEntitySystemManager.SystemLoaded -> System.EventHandler<OpenNefia.Core.GameObjects.SystemChangedArgs!>!
OpenNefia.Core.GameObjects.IEntitySystemManager.SystemTypes.get -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.GameObjects.IEntitySystemManager.SystemUnloaded -> System.EventHandler<OpenNefia.Core.GameObjects.SystemChangedArgs!>!
OpenNefia.Core.GameObjects.IEntitySystemManager.TryGetEntitySystem(System.Type! type, out OpenNefia.Core.GameObjects.IEntitySystem? entitySystem) -> bool
OpenNefia.Core.GameObjects.IEntitySystemManager.TryGetEntitySystem<T>(out T? entitySystem) -> bool
OpenNefia.Core.GameObjects.IEventBus
OpenNefia.Core.GameObjects.IMoveableSystem
OpenNefia.Core.GameObjects.IMoveableSystem.MoveEntity(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Maps.MapCoordinates newPosition, OpenNefia.Core.GameObjects.MoveableComponent? moveable = null, OpenNefia.Core.GameObjects.SpatialComponent? spatial = null) -> OpenNefia.Core.GameObjects.TurnResult?
OpenNefia.Core.GameObjects.IMoveableSystem.SwapPlaces(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.GameObjects.EntityUid with, OpenNefia.Core.GameObjects.SpatialComponent? spatial = null, OpenNefia.Core.GameObjects.SpatialComponent? withSpatial = null) -> bool
OpenNefia.Core.GameObjects.ISlotSystem
OpenNefia.Core.GameObjects.ISlotSystem.AddSlot(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry! comps, bool overwrite = false) -> OpenNefia.Core.GameObjects.SlotId
OpenNefia.Core.GameObjects.ISlotSystem.FindSlotWithComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.SlotsComponent? slots = null) -> OpenNefia.Core.GameObjects.SlotId?
OpenNefia.Core.GameObjects.ISlotSystem.HasSlot(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.SlotId slotId, OpenNefia.Core.GameObjects.SlotsComponent? slots = null) -> bool
OpenNefia.Core.GameObjects.ISlotSystem.RemoveSlot(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.SlotId slotId, OpenNefia.Core.GameObjects.SlotsComponent? slots = null) -> void
OpenNefia.Core.GameObjects.IStackSystem
OpenNefia.Core.GameObjects.IStackSystem.CanStack(OpenNefia.Core.GameObjects.EntityUid ent1, OpenNefia.Core.GameObjects.EntityUid ent2, ref OpenNefia.Core.GameObjects.StackComponent? stackEnt1, ref OpenNefia.Core.GameObjects.StackComponent? stackEnt2) -> bool
OpenNefia.Core.GameObjects.IStackSystem.Clone(OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Maps.EntityCoordinates spawnPosition) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.IStackSystem.Clone(OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Maps.MapCoordinates spawnPosition) -> OpenNefia.Core.GameObjects.EntityUid?
OpenNefia.Core.GameObjects.IStackSystem.GetCount(OpenNefia.Core.GameObjects.EntityUid? uid, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> int
OpenNefia.Core.GameObjects.IStackSystem.SetCount(OpenNefia.Core.GameObjects.EntityUid uid, int amount, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> void
OpenNefia.Core.GameObjects.IStackSystem.TrySplit(OpenNefia.Core.GameObjects.EntityUid uid, int amount, OpenNefia.Core.Maps.EntityCoordinates spawnPosition, out OpenNefia.Core.GameObjects.EntityUid split, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> bool
OpenNefia.Core.GameObjects.IStackSystem.TrySplit(OpenNefia.Core.GameObjects.EntityUid uid, int amount, OpenNefia.Core.Maps.MapCoordinates spawnPosition, out OpenNefia.Core.GameObjects.EntityUid split, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> bool
OpenNefia.Core.GameObjects.IStackSystem.TrySplit(OpenNefia.Core.GameObjects.EntityUid uid, int amount, out OpenNefia.Core.GameObjects.EntityUid split, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> bool
OpenNefia.Core.GameObjects.IStackSystem.TryStack(OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.GameObjects.EntityUid with, bool showMessage = false, OpenNefia.Core.GameObjects.StackComponent? stackTarget = null, OpenNefia.Core.GameObjects.StackComponent? stackWith = null) -> bool
OpenNefia.Core.GameObjects.IStackSystem.TryStackAtPos(OpenNefia.Core.Maps.MapCoordinates coords, bool showMessage = false) -> bool
OpenNefia.Core.GameObjects.IStackSystem.TryStackAtSamePos(OpenNefia.Core.GameObjects.EntityUid target, bool showMessage = false, OpenNefia.Core.GameObjects.SpatialComponent? spatialTarget = null, OpenNefia.Core.GameObjects.StackComponent? stackTarget = null) -> bool
OpenNefia.Core.GameObjects.IStackSystem.Use(OpenNefia.Core.GameObjects.EntityUid uid, int amount, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> bool
OpenNefia.Core.GameObjects.IVerbSystem
OpenNefia.Core.GameObjects.IVerbSystem.CanUseAnyVerbOn(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, System.Collections.Generic.ISet<string!>! verbTypes) -> bool
OpenNefia.Core.GameObjects.IVerbSystem.CanUseVerbOn(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Logic.VerbRequest! verbReq) -> bool
OpenNefia.Core.GameObjects.IVerbSystem.CanUseVerbOn(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, string! verbType) -> bool
OpenNefia.Core.GameObjects.IVerbSystem.GetLocalVerbs(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target) -> System.Collections.Generic.SortedSet<OpenNefia.Core.Logic.Verb!>!
OpenNefia.Core.GameObjects.IVerbSystem.GetVerbOrNull(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Logic.VerbRequest! verbReq) -> OpenNefia.Core.Logic.Verb?
OpenNefia.Core.GameObjects.IVerbSystem.GetVerbOrNull(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, string! verbType) -> OpenNefia.Core.Logic.Verb?
OpenNefia.Core.GameObjects.IVerbSystem.TryGetVerb(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Logic.VerbRequest! verbReq, out OpenNefia.Core.Logic.Verb? verb) -> bool
OpenNefia.Core.GameObjects.IVerbSystem.TryGetVerb(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, string! verbType, out OpenNefia.Core.Logic.Verb? verb) -> bool
OpenNefia.Core.GameObjects.MapInitExt
OpenNefia.Core.GameObjects.MapSaveIdComponent
OpenNefia.Core.GameObjects.MapSaveIdComponent.MapSaveIdComponent() -> void
OpenNefia.Core.GameObjects.MapSaveIdComponent.Uid.get -> int
OpenNefia.Core.GameObjects.MapSaveIdComponent.Uid.set -> void
OpenNefia.Core.GameObjects.MetaDataComponent
OpenNefia.Core.GameObjects.MetaDataComponent.DisplayName.get -> string?
OpenNefia.Core.GameObjects.MetaDataComponent.DisplayName.set -> void
OpenNefia.Core.GameObjects.MetaDataComponent.EntityDeleted.get -> bool
OpenNefia.Core.GameObjects.MetaDataComponent.EntityInitialized.get -> bool
OpenNefia.Core.GameObjects.MetaDataComponent.EntityInitializing.get -> bool
OpenNefia.Core.GameObjects.MetaDataComponent.EntityLifeStage.get -> OpenNefia.Core.GameObjects.EntityLifeStage
OpenNefia.Core.GameObjects.MetaDataComponent.EntityPrototype.get -> OpenNefia.Core.Prototypes.EntityPrototype?
OpenNefia.Core.GameObjects.MetaDataComponent.EntityPrototype.set -> void
OpenNefia.Core.GameObjects.MetaDataComponent.EntityTerminating.get -> bool
OpenNefia.Core.GameObjects.MetaDataComponent.IsAlive.get -> bool
OpenNefia.Core.GameObjects.MetaDataComponent.IsDeadAndBuried.get -> bool
OpenNefia.Core.GameObjects.MetaDataComponent.Liveness.get -> OpenNefia.Core.GameObjects.EntityGameLiveness
OpenNefia.Core.GameObjects.MetaDataComponent.Liveness.set -> void
OpenNefia.Core.GameObjects.MetaDataComponent.MetaDataComponent() -> void
OpenNefia.Core.GameObjects.MoveableComponent
OpenNefia.Core.GameObjects.MoveableComponent.MoveableComponent() -> void
OpenNefia.Core.GameObjects.MoveableSystem
OpenNefia.Core.GameObjects.MoveableSystem.MoveableSystem() -> void
OpenNefia.Core.GameObjects.MoveableSystem.MoveEntity(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Maps.MapCoordinates newPosition, OpenNefia.Core.GameObjects.MoveableComponent? moveable = null, OpenNefia.Core.GameObjects.SpatialComponent? spatial = null) -> OpenNefia.Core.GameObjects.TurnResult?
OpenNefia.Core.GameObjects.MoveableSystem.SwapPlaces(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.GameObjects.EntityUid with, OpenNefia.Core.GameObjects.SpatialComponent? spatial = null, OpenNefia.Core.GameObjects.SpatialComponent? withSpatial = null) -> bool
OpenNefia.Core.GameObjects.MoveEventArgs
OpenNefia.Core.GameObjects.MoveEventArgs.MoveEventArgs(OpenNefia.Core.Maps.MapCoordinates oldPosition, OpenNefia.Core.Maps.MapCoordinates newPosition) -> void
OpenNefia.Core.GameObjects.PlayerComponent
OpenNefia.Core.GameObjects.PlayerComponent.PlayerComponent() -> void
OpenNefia.Core.GameObjects.RegisterComponentAttribute
OpenNefia.Core.GameObjects.RegisterComponentAttribute.RegisterComponentAttribute() -> void
OpenNefia.Core.GameObjects.RemovedComponentEventArgs
OpenNefia.Core.GameObjects.RemovedComponentEventArgs.RemovedComponentEventArgs(OpenNefia.Core.GameObjects.IComponent! component, OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.GameObjects.SlotId
OpenNefia.Core.GameObjects.SlotId.Equals(OpenNefia.Core.GameObjects.SlotId other) -> bool
OpenNefia.Core.GameObjects.SlotId.SlotId() -> void
OpenNefia.Core.GameObjects.SlotId.SlotId(int value) -> void
OpenNefia.Core.GameObjects.SlotRegistration
OpenNefia.Core.GameObjects.SlotRegistration.CompTypes.get -> System.Collections.Generic.IReadOnlySet<System.Type!>!
OpenNefia.Core.GameObjects.SlotRegistration.Id.get -> OpenNefia.Core.GameObjects.SlotId
OpenNefia.Core.GameObjects.SlotRegistration.SlotRegistration() -> void
OpenNefia.Core.GameObjects.SlotRegistration.SlotRegistration(OpenNefia.Core.GameObjects.SlotId id, System.Collections.Generic.HashSet<System.Type!>! compTypes) -> void
OpenNefia.Core.GameObjects.SlotsComponent
OpenNefia.Core.GameObjects.SlotsComponent.HasAnySlotsWithComp(System.Type! compType) -> bool
OpenNefia.Core.GameObjects.SlotsComponent.MaxSlotId.get -> OpenNefia.Core.GameObjects.SlotId
OpenNefia.Core.GameObjects.SlotsComponent.Registrations.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.GameObjects.SlotId, OpenNefia.Core.GameObjects.SlotRegistration!>!
OpenNefia.Core.GameObjects.SlotsComponent.SlotsComponent() -> void
OpenNefia.Core.GameObjects.SlotSystem
OpenNefia.Core.GameObjects.SlotSystem.AddSlot(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry! comps, bool overwrite = false) -> OpenNefia.Core.GameObjects.SlotId
OpenNefia.Core.GameObjects.SlotSystem.FindSlotWithComponent<T>(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.SlotsComponent? slots = null) -> OpenNefia.Core.GameObjects.SlotId?
OpenNefia.Core.GameObjects.SlotSystem.HasSlot(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.SlotId slotId, OpenNefia.Core.GameObjects.SlotsComponent? slots = null) -> bool
OpenNefia.Core.GameObjects.SlotSystem.RemoveSlot(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.SlotId slotId, OpenNefia.Core.GameObjects.SlotsComponent? slots = null) -> void
OpenNefia.Core.GameObjects.SlotSystem.SlotSystem() -> void
OpenNefia.Core.GameObjects.SlottableComponent
OpenNefia.Core.GameObjects.SlottableComponent.MergedPower.get -> int
OpenNefia.Core.GameObjects.SlottableComponent.MergedPower.set -> void
OpenNefia.Core.GameObjects.SlottableComponent.SlottableComponent() -> void
OpenNefia.Core.GameObjects.SpatialComponent
OpenNefia.Core.GameObjects.SpatialComponent.AttachParent(OpenNefia.Core.GameObjects.EntityUid parent) -> void
OpenNefia.Core.GameObjects.SpatialComponent.AttachParent(OpenNefia.Core.GameObjects.SpatialComponent! newParent) -> void
OpenNefia.Core.GameObjects.SpatialComponent.AttachToMap() -> void
OpenNefia.Core.GameObjects.SpatialComponent.ChildCount.get -> int
OpenNefia.Core.GameObjects.SpatialComponent.ChildEntities.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.EntityUid>!
OpenNefia.Core.GameObjects.SpatialComponent.Children.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.SpatialComponent.ContainsEntity(OpenNefia.Core.GameObjects.SpatialComponent! entityTransform) -> bool
OpenNefia.Core.GameObjects.SpatialComponent.Coordinates.get -> OpenNefia.Core.Maps.EntityCoordinates
OpenNefia.Core.GameObjects.SpatialComponent.Coordinates.set -> void
OpenNefia.Core.GameObjects.SpatialComponent.DetachParentToNull() -> void
OpenNefia.Core.GameObjects.SpatialComponent.Direction.get -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.GameObjects.SpatialComponent.Direction.set -> void
OpenNefia.Core.GameObjects.SpatialComponent.GetLocalMatrix() -> OpenNefia.Core.Maths.Matrix3
OpenNefia.Core.GameObjects.SpatialComponent.GetLocalMatrixInv() -> OpenNefia.Core.Maths.Matrix3
OpenNefia.Core.GameObjects.SpatialComponent.GetMapTransform() -> OpenNefia.Core.GameObjects.SpatialComponent!
OpenNefia.Core.GameObjects.SpatialComponent.InvWorldMatrix.get -> OpenNefia.Core.Maths.Matrix3
OpenNefia.Core.GameObjects.SpatialComponent.IsOpaque.get -> bool
OpenNefia.Core.GameObjects.SpatialComponent.IsOpaque.set -> void
OpenNefia.Core.GameObjects.SpatialComponent.IsSolid.get -> bool
OpenNefia.Core.GameObjects.SpatialComponent.IsSolid.set -> void
OpenNefia.Core.GameObjects.SpatialComponent.LocalPosition.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.GameObjects.SpatialComponent.LocalPosition.set -> void
OpenNefia.Core.GameObjects.SpatialComponent.MapID.get -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.GameObjects.SpatialComponent.MapPosition.get -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.GameObjects.SpatialComponent.Parent.get -> OpenNefia.Core.GameObjects.SpatialComponent?
OpenNefia.Core.GameObjects.SpatialComponent.Parents.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>!
OpenNefia.Core.GameObjects.SpatialComponent.ParentUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.SpatialComponent.ParentUid.set -> void
OpenNefia.Core.GameObjects.SpatialComponent.SetCoordinates(OpenNefia.Core.Maps.EntityCoordinates value, bool noEvents = false) -> void
OpenNefia.Core.GameObjects.SpatialComponent.SetLocalPosition(OpenNefia.Core.Maths.Vector2i value, bool noEvents = false) -> void
OpenNefia.Core.GameObjects.SpatialComponent.SetWorldPosition(OpenNefia.Core.Maths.Vector2i value, bool noEvents = false) -> void
OpenNefia.Core.GameObjects.SpatialComponent.SpatialComponent() -> void
OpenNefia.Core.GameObjects.SpatialComponent.WorldMatrix.get -> OpenNefia.Core.Maths.Matrix3
OpenNefia.Core.GameObjects.SpatialComponent.WorldPosition.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.GameObjects.SpatialComponent.WorldPosition.set -> void
OpenNefia.Core.GameObjects.SpatialComponentExt
OpenNefia.Core.GameObjects.SpatialSystem
OpenNefia.Core.GameObjects.SpatialSystem.SpatialSystem() -> void
OpenNefia.Core.GameObjects.StackComponent
OpenNefia.Core.GameObjects.StackComponent.Count.get -> int
OpenNefia.Core.GameObjects.StackComponent.StackComponent() -> void
OpenNefia.Core.GameObjects.StackComponent.Unlimited.get -> bool
OpenNefia.Core.GameObjects.StackComponent.Unlimited.set -> void
OpenNefia.Core.GameObjects.StackCountChangedEvent
OpenNefia.Core.GameObjects.StackCountChangedEvent.NewCount.get -> int
OpenNefia.Core.GameObjects.StackCountChangedEvent.OldCount.get -> int
OpenNefia.Core.GameObjects.StackCountChangedEvent.StackCountChangedEvent(int oldCount, int newCount) -> void
OpenNefia.Core.GameObjects.StackSystem
OpenNefia.Core.GameObjects.StackSystem.CanStack(OpenNefia.Core.GameObjects.EntityUid ent1, OpenNefia.Core.GameObjects.EntityUid ent2, ref OpenNefia.Core.GameObjects.StackComponent? stackEnt1, ref OpenNefia.Core.GameObjects.StackComponent? stackEnt2) -> bool
OpenNefia.Core.GameObjects.StackSystem.Clone(OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Maps.EntityCoordinates spawnPosition) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.GameObjects.StackSystem.Clone(OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Maps.MapCoordinates spawnPosition) -> OpenNefia.Core.GameObjects.EntityUid?
OpenNefia.Core.GameObjects.StackSystem.GetCount(OpenNefia.Core.GameObjects.EntityUid? uid, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> int
OpenNefia.Core.GameObjects.StackSystem.SetCount(OpenNefia.Core.GameObjects.EntityUid uid, int amount, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> void
OpenNefia.Core.GameObjects.StackSystem.StackSystem() -> void
OpenNefia.Core.GameObjects.StackSystem.TrySplit(OpenNefia.Core.GameObjects.EntityUid uid, int amount, OpenNefia.Core.Maps.EntityCoordinates spawnPosition, out OpenNefia.Core.GameObjects.EntityUid split, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> bool
OpenNefia.Core.GameObjects.StackSystem.TrySplit(OpenNefia.Core.GameObjects.EntityUid uid, int amount, OpenNefia.Core.Maps.MapCoordinates spawnPosition, out OpenNefia.Core.GameObjects.EntityUid split, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> bool
OpenNefia.Core.GameObjects.StackSystem.TrySplit(OpenNefia.Core.GameObjects.EntityUid uid, int amount, out OpenNefia.Core.GameObjects.EntityUid split, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> bool
OpenNefia.Core.GameObjects.StackSystem.TryStack(OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.GameObjects.EntityUid with, bool showMessage = false, OpenNefia.Core.GameObjects.StackComponent? stackTarget = null, OpenNefia.Core.GameObjects.StackComponent? stackWith = null) -> bool
OpenNefia.Core.GameObjects.StackSystem.TryStackAtPos(OpenNefia.Core.Maps.MapCoordinates coords, bool showMessage = false) -> bool
OpenNefia.Core.GameObjects.StackSystem.TryStackAtSamePos(OpenNefia.Core.GameObjects.EntityUid target, bool showMessage = false, OpenNefia.Core.GameObjects.SpatialComponent? spatialTarget = null, OpenNefia.Core.GameObjects.StackComponent? stackTarget = null) -> bool
OpenNefia.Core.GameObjects.StackSystem.Use(OpenNefia.Core.GameObjects.EntityUid uid, int amount, OpenNefia.Core.GameObjects.StackComponent? stack = null) -> bool
OpenNefia.Core.GameObjects.StatusConditionSystem
OpenNefia.Core.GameObjects.StatusConditionSystem.StatusConditionSystem() -> void
OpenNefia.Core.GameObjects.SystemChangedArgs
OpenNefia.Core.GameObjects.SystemChangedArgs.System.get -> OpenNefia.Core.GameObjects.IEntitySystem!
OpenNefia.Core.GameObjects.SystemChangedArgs.SystemChangedArgs(OpenNefia.Core.GameObjects.IEntitySystem! system) -> void
OpenNefia.Core.GameObjects.TurnResult
OpenNefia.Core.GameObjects.TurnResult.Aborted = 2 -> OpenNefia.Core.GameObjects.TurnResult
OpenNefia.Core.GameObjects.TurnResult.Failed = 1 -> OpenNefia.Core.GameObjects.TurnResult
OpenNefia.Core.GameObjects.TurnResult.NoResult = 0 -> OpenNefia.Core.GameObjects.TurnResult
OpenNefia.Core.GameObjects.TurnResult.Succeeded = 3 -> OpenNefia.Core.GameObjects.TurnResult
OpenNefia.Core.GameObjects.TurnResultEntityEventArgs
OpenNefia.Core.GameObjects.TurnResultEntityEventArgs.Handle(OpenNefia.Core.GameObjects.TurnResult turnResult) -> void
OpenNefia.Core.GameObjects.TurnResultEntityEventArgs.TurnResult.get -> OpenNefia.Core.GameObjects.TurnResult
OpenNefia.Core.GameObjects.TurnResultEntityEventArgs.TurnResult.set -> void
OpenNefia.Core.GameObjects.TurnResultEntityEventArgs.TurnResultEntityEventArgs() -> void
OpenNefia.Core.GameObjects.UnknownComponentException
OpenNefia.Core.GameObjects.UnknownComponentException.UnknownComponentException() -> void
OpenNefia.Core.GameObjects.UnknownComponentException.UnknownComponentException(string! message) -> void
OpenNefia.Core.GameObjects.UnknownComponentException.UnknownComponentException(string! message, System.Exception! inner) -> void
OpenNefia.Core.GameObjects.UnknownComponentException.UnknownComponentException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.GameObjects.VerbSystem
OpenNefia.Core.GameObjects.VerbSystem.CanUseAnyVerbOn(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, System.Collections.Generic.ISet<string!>! verbTypes) -> bool
OpenNefia.Core.GameObjects.VerbSystem.CanUseVerbOn(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Logic.VerbRequest! verbReq) -> bool
OpenNefia.Core.GameObjects.VerbSystem.CanUseVerbOn(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, string! verbType) -> bool
OpenNefia.Core.GameObjects.VerbSystem.GetLocalVerbs(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target) -> System.Collections.Generic.SortedSet<OpenNefia.Core.Logic.Verb!>!
OpenNefia.Core.GameObjects.VerbSystem.GetVerbOrNull(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Logic.VerbRequest! verbReq) -> OpenNefia.Core.Logic.Verb?
OpenNefia.Core.GameObjects.VerbSystem.GetVerbOrNull(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, string! verbType) -> OpenNefia.Core.Logic.Verb?
OpenNefia.Core.GameObjects.VerbSystem.TryGetVerb(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, OpenNefia.Core.Logic.VerbRequest! verbReq, out OpenNefia.Core.Logic.Verb? verb) -> bool
OpenNefia.Core.GameObjects.VerbSystem.TryGetVerb(OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, string! verbType, out OpenNefia.Core.Logic.Verb? verb) -> bool
OpenNefia.Core.GameObjects.VerbSystem.VerbSystem() -> void
OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.Arrow = 0 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.Crosshair = 3 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.Hand = 11 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.IBeam = 1 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.No = 10 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.SizeAll = 9 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.SizeNESW = 6 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.SizeNS = 8 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.SizeNWSE = 5 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.SizeWE = 7 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.Wait = 2 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.CursorShape.WaitArrow = 4 -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.Graphics.FullscreenMode
OpenNefia.Core.Graphics.FullscreenMode.FullscreenMode() -> void
OpenNefia.Core.Graphics.FullscreenMode.FullscreenMode(int Width, int Height) -> void
OpenNefia.Core.Graphics.FullscreenMode.Height.get -> int
OpenNefia.Core.Graphics.FullscreenMode.Height.set -> void
OpenNefia.Core.Graphics.FullscreenMode.Width.get -> int
OpenNefia.Core.Graphics.FullscreenMode.Width.set -> void
OpenNefia.Core.Graphics.FullscreenType
OpenNefia.Core.Graphics.FullscreenType.Desktop = 1 -> OpenNefia.Core.Graphics.FullscreenType
OpenNefia.Core.Graphics.FullscreenType.Exclusive = 0 -> OpenNefia.Core.Graphics.FullscreenType
OpenNefia.Core.Graphics.HeadlessGraphics
OpenNefia.Core.Graphics.HeadlessGraphics.BeginDraw() -> void
OpenNefia.Core.Graphics.HeadlessGraphics.CaptureCanvasPNG() -> byte[]!
OpenNefia.Core.Graphics.HeadlessGraphics.EndDraw() -> void
OpenNefia.Core.Graphics.HeadlessGraphics.GetDisplayCount() -> int
OpenNefia.Core.Graphics.HeadlessGraphics.GetDisplayName(int displayIndex) -> string!
OpenNefia.Core.Graphics.HeadlessGraphics.GetFullscreenModes(int displayIndex) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Graphics.FullscreenMode>!
OpenNefia.Core.Graphics.HeadlessGraphics.GetWindowSettings() -> OpenNefia.Core.Graphics.WindowSettings!
OpenNefia.Core.Graphics.HeadlessGraphics.HeadlessGraphics() -> void
OpenNefia.Core.Graphics.HeadlessGraphics.Initialize() -> void
OpenNefia.Core.Graphics.HeadlessGraphics.OnKeyPressed -> System.Action<OpenNefia.Core.Input.KeyEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnKeyReleased -> System.Action<OpenNefia.Core.Input.KeyEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnMouseMoved -> System.Action<OpenNefia.Core.Input.MouseMoveEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnMousePressed -> System.Action<OpenNefia.Core.Input.MouseButtonEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnMouseReleased -> System.Action<OpenNefia.Core.Input.MouseButtonEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnMouseWheel -> System.Action<OpenNefia.Core.Input.MouseWheelEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnQuit -> System.Func<OpenNefia.Core.Graphics.QuitEventArgs!, bool>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnTextEditing -> System.Action<OpenNefia.Core.Input.TextEditingEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnTextInput -> System.Action<OpenNefia.Core.Input.TextEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnWindowFocused -> System.Action<OpenNefia.Core.Graphics.WindowFocusedEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnWindowResized -> System.Action<OpenNefia.Core.Graphics.WindowResizedEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.OnWindowScaleChanged -> System.Action<OpenNefia.Core.Input.WindowScaleChangedEventArgs!>?
OpenNefia.Core.Graphics.HeadlessGraphics.SetCursor(OpenNefia.Core.Graphics.CursorShape cursorShape) -> void
OpenNefia.Core.Graphics.HeadlessGraphics.SetWindowSettings(OpenNefia.Core.Graphics.FullscreenMode mode, OpenNefia.Core.Graphics.WindowSettings? windowSettings = null) -> void
OpenNefia.Core.Graphics.HeadlessGraphics.ShowSplashScreen() -> void
OpenNefia.Core.Graphics.HeadlessGraphics.Shutdown() -> void
OpenNefia.Core.Graphics.HeadlessGraphics.WindowPixelSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Graphics.HeadlessGraphics.WindowScale.get -> float
OpenNefia.Core.Graphics.HeadlessGraphics.WindowSize.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Graphics.IGraphics
OpenNefia.Core.Graphics.IGraphics.BeginDraw() -> void
OpenNefia.Core.Graphics.IGraphics.CaptureCanvasPNG() -> byte[]!
OpenNefia.Core.Graphics.IGraphics.EndDraw() -> void
OpenNefia.Core.Graphics.IGraphics.GetDisplayCount() -> int
OpenNefia.Core.Graphics.IGraphics.GetDisplayName(int displayIndex) -> string!
OpenNefia.Core.Graphics.IGraphics.GetFullscreenModes(int displayIndex) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Graphics.FullscreenMode>!
OpenNefia.Core.Graphics.IGraphics.GetWindowSettings() -> OpenNefia.Core.Graphics.WindowSettings!
OpenNefia.Core.Graphics.IGraphics.Initialize() -> void
OpenNefia.Core.Graphics.IGraphics.OnKeyPressed -> System.Action<OpenNefia.Core.Input.KeyEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnKeyReleased -> System.Action<OpenNefia.Core.Input.KeyEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnMouseMoved -> System.Action<OpenNefia.Core.Input.MouseMoveEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnMousePressed -> System.Action<OpenNefia.Core.Input.MouseButtonEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnMouseReleased -> System.Action<OpenNefia.Core.Input.MouseButtonEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnMouseWheel -> System.Action<OpenNefia.Core.Input.MouseWheelEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnQuit -> System.Func<OpenNefia.Core.Graphics.QuitEventArgs!, bool>?
OpenNefia.Core.Graphics.IGraphics.OnTextEditing -> System.Action<OpenNefia.Core.Input.TextEditingEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnTextInput -> System.Action<OpenNefia.Core.Input.TextEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnWindowFocused -> System.Action<OpenNefia.Core.Graphics.WindowFocusedEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnWindowResized -> System.Action<OpenNefia.Core.Graphics.WindowResizedEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.OnWindowScaleChanged -> System.Action<OpenNefia.Core.Input.WindowScaleChangedEventArgs!>?
OpenNefia.Core.Graphics.IGraphics.SetCursor(OpenNefia.Core.Graphics.CursorShape cursorShape) -> void
OpenNefia.Core.Graphics.IGraphics.SetWindowSettings(OpenNefia.Core.Graphics.FullscreenMode mode, OpenNefia.Core.Graphics.WindowSettings? windowSettings = null) -> void
OpenNefia.Core.Graphics.IGraphics.ShowSplashScreen() -> void
OpenNefia.Core.Graphics.IGraphics.Shutdown() -> void
OpenNefia.Core.Graphics.IGraphics.WindowPixelSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Graphics.IGraphics.WindowScale.get -> float
OpenNefia.Core.Graphics.IGraphics.WindowSize.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Graphics.KeyModifiers
OpenNefia.Core.Graphics.KeyModifiers.Alt = 4 -> OpenNefia.Core.Graphics.KeyModifiers
OpenNefia.Core.Graphics.KeyModifiers.CapsLock = 16 -> OpenNefia.Core.Graphics.KeyModifiers
OpenNefia.Core.Graphics.KeyModifiers.Control = 2 -> OpenNefia.Core.Graphics.KeyModifiers
OpenNefia.Core.Graphics.KeyModifiers.NumLock = 32 -> OpenNefia.Core.Graphics.KeyModifiers
OpenNefia.Core.Graphics.KeyModifiers.Shift = 1 -> OpenNefia.Core.Graphics.KeyModifiers
OpenNefia.Core.Graphics.KeyModifiers.Super = 8 -> OpenNefia.Core.Graphics.KeyModifiers
OpenNefia.Core.Graphics.LoveGraphics
OpenNefia.Core.Graphics.LoveGraphics.BeginDraw() -> void
OpenNefia.Core.Graphics.LoveGraphics.CaptureCanvasPNG() -> byte[]!
OpenNefia.Core.Graphics.LoveGraphics.EndDraw() -> void
OpenNefia.Core.Graphics.LoveGraphics.GetDisplayCount() -> int
OpenNefia.Core.Graphics.LoveGraphics.GetDisplayName(int displaynumber) -> string!
OpenNefia.Core.Graphics.LoveGraphics.GetFullscreenModes(int displaynumber) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Graphics.FullscreenMode>!
OpenNefia.Core.Graphics.LoveGraphics.GetWindowSettings() -> OpenNefia.Core.Graphics.WindowSettings!
OpenNefia.Core.Graphics.LoveGraphics.HandleWindowResized(OpenNefia.Core.Graphics.WindowResizedEventArgs! args) -> void
OpenNefia.Core.Graphics.LoveGraphics.Initialize() -> void
OpenNefia.Core.Graphics.LoveGraphics.LoveGraphics() -> void
OpenNefia.Core.Graphics.LoveGraphics.OnKeyPressed -> System.Action<OpenNefia.Core.Input.KeyEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnKeyReleased -> System.Action<OpenNefia.Core.Input.KeyEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnMouseMoved -> System.Action<OpenNefia.Core.Input.MouseMoveEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnMousePressed -> System.Action<OpenNefia.Core.Input.MouseButtonEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnMouseReleased -> System.Action<OpenNefia.Core.Input.MouseButtonEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnMouseWheel -> System.Action<OpenNefia.Core.Input.MouseWheelEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnQuit -> System.Func<OpenNefia.Core.Graphics.QuitEventArgs!, bool>?
OpenNefia.Core.Graphics.LoveGraphics.OnTextEditing -> System.Action<OpenNefia.Core.Input.TextEditingEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnTextInput -> System.Action<OpenNefia.Core.Input.TextEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnWindowFocused -> System.Action<OpenNefia.Core.Graphics.WindowFocusedEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnWindowResized -> System.Action<OpenNefia.Core.Graphics.WindowResizedEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.OnWindowScaleChanged -> System.Action<OpenNefia.Core.Input.WindowScaleChangedEventArgs!>?
OpenNefia.Core.Graphics.LoveGraphics.SetCursor(OpenNefia.Core.Graphics.CursorShape cursorShape) -> void
OpenNefia.Core.Graphics.LoveGraphics.SetWindowSettings(OpenNefia.Core.Graphics.FullscreenMode mode, OpenNefia.Core.Graphics.WindowSettings? windowSettings = null) -> void
OpenNefia.Core.Graphics.LoveGraphics.ShowSplashScreen() -> void
OpenNefia.Core.Graphics.LoveGraphics.Shutdown() -> void
OpenNefia.Core.Graphics.LoveGraphics.WindowPixelSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Graphics.LoveGraphics.WindowScale.get -> float
OpenNefia.Core.Graphics.LoveGraphics.WindowSize.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Graphics.QuitEventArgs
OpenNefia.Core.Graphics.QuitEventArgs.QuitEventArgs() -> void
OpenNefia.Core.Graphics.WindowFocusedEventArgs
OpenNefia.Core.Graphics.WindowFocusedEventArgs.Focused.get -> bool
OpenNefia.Core.Graphics.WindowFocusedEventArgs.WindowFocusedEventArgs(bool focused) -> void
OpenNefia.Core.Graphics.WindowMode
OpenNefia.Core.Graphics.WindowMode.DesktopFullscreen = 1 -> OpenNefia.Core.Graphics.WindowMode
OpenNefia.Core.Graphics.WindowMode.Fullscreen = 2 -> OpenNefia.Core.Graphics.WindowMode
OpenNefia.Core.Graphics.WindowMode.Windowed = 0 -> OpenNefia.Core.Graphics.WindowMode
OpenNefia.Core.Graphics.WindowResizedEventArgs
OpenNefia.Core.Graphics.WindowResizedEventArgs.NewSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Graphics.WindowResizedEventArgs.WindowResizedEventArgs(OpenNefia.Core.Maths.Vector2i newSize) -> void
OpenNefia.Core.Graphics.WindowSettings
OpenNefia.Core.Graphics.WindowSettings.Borderless.get -> bool
OpenNefia.Core.Graphics.WindowSettings.Borderless.set -> void
OpenNefia.Core.Graphics.WindowSettings.Centered.get -> bool
OpenNefia.Core.Graphics.WindowSettings.Centered.set -> void
OpenNefia.Core.Graphics.WindowSettings.Depth.get -> int
OpenNefia.Core.Graphics.WindowSettings.Depth.set -> void
OpenNefia.Core.Graphics.WindowSettings.Display.get -> int
OpenNefia.Core.Graphics.WindowSettings.Display.set -> void
OpenNefia.Core.Graphics.WindowSettings.Fullscreen.get -> bool
OpenNefia.Core.Graphics.WindowSettings.Fullscreen.set -> void
OpenNefia.Core.Graphics.WindowSettings.FullscreenType.get -> OpenNefia.Core.Graphics.FullscreenType
OpenNefia.Core.Graphics.WindowSettings.FullscreenType.set -> void
OpenNefia.Core.Graphics.WindowSettings.HighDPI.get -> bool
OpenNefia.Core.Graphics.WindowSettings.HighDPI.set -> void
OpenNefia.Core.Graphics.WindowSettings.MinHeight.get -> int
OpenNefia.Core.Graphics.WindowSettings.MinHeight.set -> void
OpenNefia.Core.Graphics.WindowSettings.MinWidth.get -> int
OpenNefia.Core.Graphics.WindowSettings.MinWidth.set -> void
OpenNefia.Core.Graphics.WindowSettings.MSAA.get -> int
OpenNefia.Core.Graphics.WindowSettings.MSAA.set -> void
OpenNefia.Core.Graphics.WindowSettings.RefreshRate.get -> double
OpenNefia.Core.Graphics.WindowSettings.RefreshRate.set -> void
OpenNefia.Core.Graphics.WindowSettings.Resizable.get -> bool
OpenNefia.Core.Graphics.WindowSettings.Resizable.set -> void
OpenNefia.Core.Graphics.WindowSettings.Stencil.get -> bool
OpenNefia.Core.Graphics.WindowSettings.Stencil.set -> void
OpenNefia.Core.Graphics.WindowSettings.UsePosition.get -> bool
OpenNefia.Core.Graphics.WindowSettings.UsePosition.set -> void
OpenNefia.Core.Graphics.WindowSettings.VSync.get -> bool
OpenNefia.Core.Graphics.WindowSettings.VSync.set -> void
OpenNefia.Core.Graphics.WindowSettings.WindowSettings() -> void
OpenNefia.Core.Graphics.WindowSettings.X.get -> int?
OpenNefia.Core.Graphics.WindowSettings.X.set -> void
OpenNefia.Core.Graphics.WindowSettings.Y.get -> int?
OpenNefia.Core.Graphics.WindowSettings.Y.set -> void
OpenNefia.Core.HotReload.HotReloadDelegate
OpenNefia.Core.HotReload.HotReloadEventArgs
OpenNefia.Core.HotReload.HotReloadEventArgs.HotReloadEventArgs(System.Type![]? UpdatedTypes) -> void
OpenNefia.Core.HotReload.HotReloadEventArgs.UpdatedTypes.get -> System.Type![]?
OpenNefia.Core.HotReload.HotReloadEventArgs.UpdatedTypes.init -> void
OpenNefia.Core.HotReload.HotReloadWatcher
OpenNefia.Core.HotReload.HotReloadWatcher.EnqueueClearCache(System.Type![]? updatedTypes) -> void
OpenNefia.Core.HotReload.HotReloadWatcher.EnqueueUpdateApplication(System.Type![]? updatedTypes) -> void
OpenNefia.Core.HotReload.HotReloadWatcher.FrameUpdate(OpenNefia.Core.Timing.FrameEventArgs frame) -> void
OpenNefia.Core.HotReload.HotReloadWatcher.HotReloadWatcher() -> void
OpenNefia.Core.HotReload.HotReloadWatcher.Initialize() -> void
OpenNefia.Core.HotReload.HotReloadWatcher.OnClearCache -> OpenNefia.Core.HotReload.HotReloadDelegate?
OpenNefia.Core.HotReload.HotReloadWatcher.OnUpdateApplication -> OpenNefia.Core.HotReload.HotReloadDelegate?
OpenNefia.Core.HotReload.IHotReloadWatcher
OpenNefia.Core.HotReload.IHotReloadWatcher.OnClearCache -> OpenNefia.Core.HotReload.HotReloadDelegate?
OpenNefia.Core.HotReload.IHotReloadWatcher.OnUpdateApplication -> OpenNefia.Core.HotReload.HotReloadDelegate?
OpenNefia.Core.ILocalizable
OpenNefia.Core.ILocalizable.IsLocalized.get -> bool
OpenNefia.Core.ILocalizable.Localize(OpenNefia.Core.LocaleKey key) -> void
OpenNefia.Core.Input.Binding.CommandBind
OpenNefia.Core.Input.Binding.CommandBind.After.get -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Input.Binding.CommandBind.Before.get -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Input.Binding.CommandBind.BoundKeyFunction.get -> OpenNefia.Core.Input.BoundKeyFunction
OpenNefia.Core.Input.Binding.CommandBind.CommandBind(OpenNefia.Core.Input.BoundKeyFunction boundKeyFunction, OpenNefia.Core.Input.Binding.InputCmdHandler! handler, System.Collections.Generic.IEnumerable<System.Type!>? before = null, System.Collections.Generic.IEnumerable<System.Type!>? after = null) -> void
OpenNefia.Core.Input.Binding.CommandBind.Handler.get -> OpenNefia.Core.Input.Binding.InputCmdHandler!
OpenNefia.Core.Input.Binding.CommandBindRegistry
OpenNefia.Core.Input.Binding.CommandBindRegistry.CommandBindRegistry() -> void
OpenNefia.Core.Input.Binding.CommandBindRegistry.GetHandlers(OpenNefia.Core.Input.BoundKeyFunction function) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Input.Binding.InputCmdHandler!>!
OpenNefia.Core.Input.Binding.CommandBindRegistry.Register(OpenNefia.Core.Input.Binding.CommandBinds! commandBinds, System.Type! owner) -> void
OpenNefia.Core.Input.Binding.CommandBindRegistry.Register<TOwner>(OpenNefia.Core.Input.Binding.CommandBinds! commandBinds) -> void
OpenNefia.Core.Input.Binding.CommandBindRegistry.Unregister(System.Type! owner) -> void
OpenNefia.Core.Input.Binding.CommandBindRegistry.Unregister<TOwner>() -> void
OpenNefia.Core.Input.Binding.CommandBinds
OpenNefia.Core.Input.Binding.CommandBinds.Bindings.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Input.Binding.CommandBind!>!
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.Bind(OpenNefia.Core.Input.Binding.CommandBind! commandBind) -> OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder!
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.Bind(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.Binding.InputCmdHandler! command) -> OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder!
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.Bind(OpenNefia.Core.Input.BoundKeyFunction function, System.Collections.Generic.IEnumerable<OpenNefia.Core.Input.Binding.InputCmdHandler!>! commands) -> OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder!
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.BindAfter(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.Binding.InputCmdHandler! command, params System.Type![]! after) -> OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder!
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.BindBefore(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.Binding.InputCmdHandler! command, params System.Type![]! before) -> OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder!
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.BindingsBuilder() -> void
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.Build() -> OpenNefia.Core.Input.Binding.CommandBinds!
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.Register<TOwner>() -> OpenNefia.Core.Input.Binding.CommandBinds!
OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.Register<TOwner>(OpenNefia.Core.Input.Binding.ICommandBindRegistry! registry) -> OpenNefia.Core.Input.Binding.CommandBinds!
OpenNefia.Core.Input.Binding.ICommandBindRegistry
OpenNefia.Core.Input.Binding.ICommandBindRegistry.GetHandlers(OpenNefia.Core.Input.BoundKeyFunction function) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Input.Binding.InputCmdHandler!>!
OpenNefia.Core.Input.Binding.ICommandBindRegistry.Register(OpenNefia.Core.Input.Binding.CommandBinds! commandBinds, System.Type! owner) -> void
OpenNefia.Core.Input.Binding.ICommandBindRegistry.Register<TOwner>(OpenNefia.Core.Input.Binding.CommandBinds! commandBinds) -> void
OpenNefia.Core.Input.Binding.ICommandBindRegistry.Unregister(System.Type! owner) -> void
OpenNefia.Core.Input.Binding.ICommandBindRegistry.Unregister<TOwner>() -> void
OpenNefia.Core.Input.Binding.InputCmdHandler
OpenNefia.Core.Input.Binding.InputCmdHandler.InputCmdHandler() -> void
OpenNefia.Core.Input.Binding.PointerInputCmdDelegate
OpenNefia.Core.Input.Binding.PointerInputCmdDelegate2
OpenNefia.Core.Input.Binding.PointerInputCmdHandler
OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs
OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs.PointerInputCmdArgs() -> void
OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs.PointerInputCmdArgs(OpenNefia.Core.Game.IGameSessionManager? session, OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.Maps.ScreenCoordinates screenCoordinates, OpenNefia.Core.GameObjects.EntityUid? entityUid, OpenNefia.Core.Input.BoundKeyState state, OpenNefia.Core.Input.FullInputCmdMessage! originalMessage) -> void
OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdHandler(OpenNefia.Core.Input.Binding.PointerInputCmdDelegate! callback, bool ignoreUp = true) -> void
OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdHandler(OpenNefia.Core.Input.Binding.PointerInputCmdDelegate2! callback, bool ignoreUp = true) -> void
OpenNefia.Core.Input.Binding.PointerStateInputCmdHandler
OpenNefia.Core.Input.Binding.PointerStateInputCmdHandler.PointerStateInputCmdHandler(OpenNefia.Core.Input.Binding.PointerInputCmdDelegate! enabled, OpenNefia.Core.Input.Binding.PointerInputCmdDelegate! disabled) -> void
OpenNefia.Core.Input.Binding.StateInputCmdDelegate
OpenNefia.Core.Input.BoundKeyEventArgs
OpenNefia.Core.Input.BoundKeyEventArgs.BoundKeyEventArgs(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.BoundKeyState state, OpenNefia.Core.Maps.ScreenCoordinates pointerLocation, bool canFocus) -> void
OpenNefia.Core.Input.BoundKeyEventArgs.CanFocus.get -> bool
OpenNefia.Core.Input.BoundKeyEventArgs.Function.get -> OpenNefia.Core.Input.BoundKeyFunction
OpenNefia.Core.Input.BoundKeyEventArgs.Handle() -> void
OpenNefia.Core.Input.BoundKeyEventArgs.Handled.get -> bool
OpenNefia.Core.Input.BoundKeyEventArgs.PointerLocation.get -> OpenNefia.Core.Maps.ScreenCoordinates
OpenNefia.Core.Input.BoundKeyEventArgs.State.get -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.BoundKeyFunction
OpenNefia.Core.Input.BoundKeyFunction.BoundKeyFunction() -> void
OpenNefia.Core.Input.BoundKeyFunction.BoundKeyFunction(string! name) -> void
OpenNefia.Core.Input.BoundKeyFunction.CompareTo(object? obj) -> int
OpenNefia.Core.Input.BoundKeyFunction.CompareTo(OpenNefia.Core.Input.BoundKeyFunction other) -> int
OpenNefia.Core.Input.BoundKeyFunction.Deserialize(string! value) -> void
OpenNefia.Core.Input.BoundKeyFunction.Equals(OpenNefia.Core.Input.BoundKeyFunction other) -> bool
OpenNefia.Core.Input.BoundKeyFunction.Serialize() -> string!
OpenNefia.Core.Input.BoundKeyFunctionExt
OpenNefia.Core.Input.BoundKeyMap
OpenNefia.Core.Input.BoundKeyMap.BoundKeyMap(OpenNefia.Core.Reflection.IReflectionManager! reflectionManager) -> void
OpenNefia.Core.Input.BoundKeyMap.FunctionExists(string! name) -> bool
OpenNefia.Core.Input.BoundKeyMap.KeyFunctionID(OpenNefia.Core.Input.BoundKeyFunction function) -> OpenNefia.Core.Input.KeyFunctionId
OpenNefia.Core.Input.BoundKeyMap.KeyFunctionName(OpenNefia.Core.Input.KeyFunctionId function) -> OpenNefia.Core.Input.BoundKeyFunction
OpenNefia.Core.Input.BoundKeyMap.PopulateKeyFunctionsMap() -> void
OpenNefia.Core.Input.BoundKeyMap.TryGetKeyFunction(OpenNefia.Core.Input.KeyFunctionId funcId, out OpenNefia.Core.Input.BoundKeyFunction func) -> bool
OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.BoundKeyState.Down = 1 -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.BoundKeyState.Up = 0 -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.Client.LoveInputManager
OpenNefia.Core.Input.Client.LoveInputManager.LoveInputManager() -> void
OpenNefia.Core.Input.CommandState
OpenNefia.Core.Input.CommandState.Disabled = 2 -> OpenNefia.Core.Input.CommandState
OpenNefia.Core.Input.CommandState.Enabled = 1 -> OpenNefia.Core.Input.CommandState
OpenNefia.Core.Input.CommandState.Unknown = 0 -> OpenNefia.Core.Input.CommandState
OpenNefia.Core.Input.ContextChangedEventArgs
OpenNefia.Core.Input.ContextChangedEventArgs.ContextChangedEventArgs(OpenNefia.Core.Input.IInputCmdContext? oldContext, OpenNefia.Core.Input.IInputCmdContext? newContext) -> void
OpenNefia.Core.Input.ContextChangedEventArgs.NewContext.get -> OpenNefia.Core.Input.IInputCmdContext?
OpenNefia.Core.Input.ContextChangedEventArgs.OldContext.get -> OpenNefia.Core.Input.IInputCmdContext?
OpenNefia.Core.Input.EngineKeyFunctions
OpenNefia.Core.Input.EventInputCmdMessage
OpenNefia.Core.Input.EventInputCmdMessage.EventInputCmdMessage(OpenNefia.Core.Input.KeyFunctionId inputFunctionId) -> void
OpenNefia.Core.Input.FullInputCmdMessage
OpenNefia.Core.Input.FullInputCmdMessage.Coordinates.get -> OpenNefia.Core.Maps.EntityCoordinates
OpenNefia.Core.Input.FullInputCmdMessage.FullInputCmdMessage(int inputSequence, OpenNefia.Core.Input.KeyFunctionId inputFunctionId, OpenNefia.Core.Input.BoundKeyState state, OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.Maps.ScreenCoordinates screenCoordinates) -> void
OpenNefia.Core.Input.FullInputCmdMessage.FullInputCmdMessage(OpenNefia.Core.Input.KeyFunctionId inputFunctionId, OpenNefia.Core.Input.BoundKeyState state, OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.Maps.ScreenCoordinates screenCoordinates, OpenNefia.Core.GameObjects.EntityUid? uid) -> void
OpenNefia.Core.Input.FullInputCmdMessage.ScreenCoordinates.get -> OpenNefia.Core.Maps.ScreenCoordinates
OpenNefia.Core.Input.FullInputCmdMessage.State.get -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.FullInputCmdMessage.Uid.get -> OpenNefia.Core.GameObjects.EntityUid?
OpenNefia.Core.Input.Gamepad
OpenNefia.Core.Input.Gamepad.Axis
OpenNefia.Core.Input.Gamepad.Axis.LeftX = 1 -> OpenNefia.Core.Input.Gamepad.Axis
OpenNefia.Core.Input.Gamepad.Axis.LeftY = 2 -> OpenNefia.Core.Input.Gamepad.Axis
OpenNefia.Core.Input.Gamepad.Axis.RightX = 3 -> OpenNefia.Core.Input.Gamepad.Axis
OpenNefia.Core.Input.Gamepad.Axis.RightY = 4 -> OpenNefia.Core.Input.Gamepad.Axis
OpenNefia.Core.Input.Gamepad.Axis.TriggerLeft = 5 -> OpenNefia.Core.Input.Gamepad.Axis
OpenNefia.Core.Input.Gamepad.Axis.TriggerRight = 6 -> OpenNefia.Core.Input.Gamepad.Axis
OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.A = 1 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.B = 2 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.Back = 5 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.DPadDown = 13 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.DPadLeft = 14 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.DPadRight = 15 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.DPadUp = 12 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.Guide = 6 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.LeftShoulder = 10 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.LeftStick = 8 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.RightShoulder = 11 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.RightStick = 9 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.Start = 7 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.X = 3 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.Gamepad.Button.Y = 4 -> OpenNefia.Core.Input.Gamepad.Button
OpenNefia.Core.Input.GuiRawKeyEvent
OpenNefia.Core.Input.GuiRawKeyEvent.GuiRawKeyEvent() -> void
OpenNefia.Core.Input.GuiRawKeyEvent.GuiRawKeyEvent(OpenNefia.Core.Input.Keyboard.Key key, Love.Scancode scanCode, OpenNefia.Core.Input.RawKeyAction action, OpenNefia.Core.Maths.Vector2i mouseRelative) -> void
OpenNefia.Core.Input.IInputCmdContext
OpenNefia.Core.Input.IInputCmdContext.AddFunction(OpenNefia.Core.Input.BoundKeyFunction function) -> void
OpenNefia.Core.Input.IInputCmdContext.FunctionExists(OpenNefia.Core.Input.BoundKeyFunction function) -> bool
OpenNefia.Core.Input.IInputCmdContext.FunctionExistsHierarchy(OpenNefia.Core.Input.BoundKeyFunction function) -> bool
OpenNefia.Core.Input.IInputCmdContext.Name.get -> string!
OpenNefia.Core.Input.IInputCmdContext.RemoveFunction(OpenNefia.Core.Input.BoundKeyFunction function) -> void
OpenNefia.Core.Input.IInputContextContainer
OpenNefia.Core.Input.IInputContextContainer.ActiveContext.get -> OpenNefia.Core.Input.IInputCmdContext!
OpenNefia.Core.Input.IInputContextContainer.ContextChanged -> System.EventHandler<OpenNefia.Core.Input.ContextChangedEventArgs!>!
OpenNefia.Core.Input.IInputContextContainer.DeferringEnabled.get -> bool
OpenNefia.Core.Input.IInputContextContainer.DeferringEnabled.set -> void
OpenNefia.Core.Input.IInputContextContainer.Exists(string! uniqueName) -> bool
OpenNefia.Core.Input.IInputContextContainer.GetContext(string! uniqueName) -> OpenNefia.Core.Input.IInputCmdContext!
OpenNefia.Core.Input.IInputContextContainer.New(string! uniqueName, OpenNefia.Core.Input.IInputCmdContext! parent) -> OpenNefia.Core.Input.IInputCmdContext!
OpenNefia.Core.Input.IInputContextContainer.New(string! uniqueName, string! parentName) -> OpenNefia.Core.Input.IInputCmdContext!
OpenNefia.Core.Input.IInputContextContainer.Remove(string! uniqueName) -> void
OpenNefia.Core.Input.IInputContextContainer.SetActiveContext(string! uniqueName) -> void
OpenNefia.Core.Input.IInputContextContainer.TryGetContext(string! uniqueName, out OpenNefia.Core.Input.IInputCmdContext? context) -> bool
OpenNefia.Core.Input.IInputManager
OpenNefia.Core.Input.IInputManager.AllBindings.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Input.IKeyBinding!>!
OpenNefia.Core.Input.IInputManager.BindRegistry.get -> OpenNefia.Core.Input.Binding.ICommandBindRegistry!
OpenNefia.Core.Input.IInputManager.Contexts.get -> OpenNefia.Core.Input.IInputContextContainer!
OpenNefia.Core.Input.IInputManager.DownKeyFunctions.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Input.BoundKeyFunction>!
OpenNefia.Core.Input.IInputManager.Enabled.get -> bool
OpenNefia.Core.Input.IInputManager.Enabled.set -> void
OpenNefia.Core.Input.IInputManager.FirstChanceOnKeyEvent -> OpenNefia.Core.Input.KeyEventAction!
OpenNefia.Core.Input.IInputManager.GetInputCommand(OpenNefia.Core.Input.BoundKeyFunction function) -> OpenNefia.Core.Input.Binding.InputCmdHandler?
OpenNefia.Core.Input.IInputManager.GetKeyBinding(OpenNefia.Core.Input.BoundKeyFunction function) -> OpenNefia.Core.Input.IKeyBinding!
OpenNefia.Core.Input.IInputManager.GetKeyBindings(OpenNefia.Core.Input.BoundKeyFunction function) -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.Input.IKeyBinding!>!
OpenNefia.Core.Input.IInputManager.GetKeyFunctionButtonString(OpenNefia.Core.Input.BoundKeyFunction function) -> string!
OpenNefia.Core.Input.IInputManager.GetKeyName(OpenNefia.Core.Input.Keyboard.Key key) -> string!
OpenNefia.Core.Input.IInputManager.HaltCounter.get -> int
OpenNefia.Core.Input.IInputManager.HaltInput() -> void
OpenNefia.Core.Input.IInputManager.Initialize() -> void
OpenNefia.Core.Input.IInputManager.InputModeChanged() -> void
OpenNefia.Core.Input.IInputManager.IsKeyDown(OpenNefia.Core.Input.Keyboard.Key key) -> bool
OpenNefia.Core.Input.IInputManager.IsKeyFunctionModified(OpenNefia.Core.Input.BoundKeyFunction function) -> bool
OpenNefia.Core.Input.IInputManager.KeyBindStateChanged -> System.Action<OpenNefia.Core.Input.ViewportBoundKeyEventArgs!>?
OpenNefia.Core.Input.IInputManager.KeyDown(OpenNefia.Core.Input.KeyEventArgs! e) -> void
OpenNefia.Core.Input.IInputManager.KeyUp(OpenNefia.Core.Input.KeyEventArgs! e) -> void
OpenNefia.Core.Input.IInputManager.MouseScreenPosition.get -> OpenNefia.Core.Maps.ScreenCoordinates
OpenNefia.Core.Input.IInputManager.NetworkBindMap.get -> OpenNefia.Core.Input.BoundKeyMap!
OpenNefia.Core.Input.IInputManager.OnInputModeChanged -> System.Action!
OpenNefia.Core.Input.IInputManager.OnKeyBindingAdded -> System.Action<OpenNefia.Core.Input.IKeyBinding!>!
OpenNefia.Core.Input.IInputManager.OnKeyBindingRemoved -> System.Action<OpenNefia.Core.Input.IKeyBinding!>!
OpenNefia.Core.Input.IInputManager.RegisterBinding(in OpenNefia.Core.Input.KeyBindingRegistration! reg, bool markModified = true) -> OpenNefia.Core.Input.IKeyBinding!
OpenNefia.Core.Input.IInputManager.RemoveBinding(OpenNefia.Core.Input.IKeyBinding! binding, bool markModified = true) -> void
OpenNefia.Core.Input.IInputManager.ResetAllBindings() -> void
OpenNefia.Core.Input.IInputManager.ResetBindingsFor(OpenNefia.Core.Input.BoundKeyFunction function) -> void
OpenNefia.Core.Input.IInputManager.SaveToUserData() -> void
OpenNefia.Core.Input.IInputManager.SetInputCommand(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.Binding.InputCmdHandler? cmdHandler) -> void
OpenNefia.Core.Input.IInputManager.TryGetKeyBinding(OpenNefia.Core.Input.BoundKeyFunction function, out OpenNefia.Core.Input.IKeyBinding? binding) -> bool
OpenNefia.Core.Input.IInputManager.UIKeyBindStateChanged -> System.Func<OpenNefia.Core.Input.BoundKeyEventArgs!, bool>?
OpenNefia.Core.Input.IInputManager.UpdateKeyRepeats(OpenNefia.Core.Timing.FrameEventArgs frame) -> void
OpenNefia.Core.Input.IInputManager.ViewportKeyEvent(OpenNefia.Core.UI.Element.UiElement? control, OpenNefia.Core.Input.BoundKeyEventArgs! eventArgs) -> void
OpenNefia.Core.Input.IKeyBinding
OpenNefia.Core.Input.IKeyBinding.AllowSubCombs.get -> bool
OpenNefia.Core.Input.IKeyBinding.BaseKey.get -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.IKeyBinding.BindingType.get -> OpenNefia.Core.Input.KeyBindingType
OpenNefia.Core.Input.IKeyBinding.CanFocus.get -> bool
OpenNefia.Core.Input.IKeyBinding.CanRepeat.get -> bool
OpenNefia.Core.Input.IKeyBinding.Function.get -> OpenNefia.Core.Input.BoundKeyFunction
OpenNefia.Core.Input.IKeyBinding.FunctionCommand.get -> string!
OpenNefia.Core.Input.IKeyBinding.GetKeyString() -> string!
OpenNefia.Core.Input.IKeyBinding.Mod1.get -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.IKeyBinding.Mod2.get -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.IKeyBinding.Mod3.get -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.IKeyBinding.Priority.get -> int
OpenNefia.Core.Input.IKeyBinding.State.get -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.InputCmdMessage
OpenNefia.Core.Input.InputCmdMessage.CompareTo(OpenNefia.Core.Input.InputCmdMessage? other) -> int
OpenNefia.Core.Input.InputCmdMessage.InputCmdMessage(OpenNefia.Core.Input.KeyFunctionId inputFunctionId) -> void
OpenNefia.Core.Input.InputCmdMessage.InputFunctionId.get -> OpenNefia.Core.Input.KeyFunctionId
OpenNefia.Core.Input.InputCmdMessage.InputSequence.get -> uint
OpenNefia.Core.Input.InputCmdMessage.InputSequence.set -> void
OpenNefia.Core.Input.InputEventArgs
OpenNefia.Core.Input.InputEventArgs.Handle() -> void
OpenNefia.Core.Input.InputEventArgs.Handled.get -> bool
OpenNefia.Core.Input.InputEventArgs.InputEventArgs() -> void
OpenNefia.Core.Input.InputManager
OpenNefia.Core.Input.InputManager.AllBindings.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Input.IKeyBinding!>!
OpenNefia.Core.Input.InputManager.BindRegistry.get -> OpenNefia.Core.Input.Binding.ICommandBindRegistry!
OpenNefia.Core.Input.InputManager.Contexts.get -> OpenNefia.Core.Input.IInputContextContainer!
OpenNefia.Core.Input.InputManager.DownKeyFunctions.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Input.BoundKeyFunction>!
OpenNefia.Core.Input.InputManager.Enabled.get -> bool
OpenNefia.Core.Input.InputManager.Enabled.set -> void
OpenNefia.Core.Input.InputManager.FirstChanceOnKeyEvent -> OpenNefia.Core.Input.KeyEventAction?
OpenNefia.Core.Input.InputManager.GetInputCommand(OpenNefia.Core.Input.BoundKeyFunction function) -> OpenNefia.Core.Input.Binding.InputCmdHandler?
OpenNefia.Core.Input.InputManager.GetKeyBinding(OpenNefia.Core.Input.BoundKeyFunction function) -> OpenNefia.Core.Input.IKeyBinding!
OpenNefia.Core.Input.InputManager.GetKeyBindings(OpenNefia.Core.Input.BoundKeyFunction function) -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.Input.IKeyBinding!>!
OpenNefia.Core.Input.InputManager.GetKeyFunctionButtonString(OpenNefia.Core.Input.BoundKeyFunction function) -> string!
OpenNefia.Core.Input.InputManager.GetKeyName(OpenNefia.Core.Input.Keyboard.Key key) -> string!
OpenNefia.Core.Input.InputManager.HaltCounter.get -> int
OpenNefia.Core.Input.InputManager.HaltInput() -> void
OpenNefia.Core.Input.InputManager.Initialize() -> void
OpenNefia.Core.Input.InputManager.InputManager() -> void
OpenNefia.Core.Input.InputManager.InputModeChanged() -> void
OpenNefia.Core.Input.InputManager.IsKeyDown(OpenNefia.Core.Input.Keyboard.Key key) -> bool
OpenNefia.Core.Input.InputManager.IsKeyFunctionModified(OpenNefia.Core.Input.BoundKeyFunction function) -> bool
OpenNefia.Core.Input.InputManager.KeyBindStateChanged -> System.Action<OpenNefia.Core.Input.ViewportBoundKeyEventArgs!>?
OpenNefia.Core.Input.InputManager.KeyDown(OpenNefia.Core.Input.KeyEventArgs! args) -> void
OpenNefia.Core.Input.InputManager.KeyUp(OpenNefia.Core.Input.KeyEventArgs! args) -> void
OpenNefia.Core.Input.InputManager.NetworkBindMap.get -> OpenNefia.Core.Input.BoundKeyMap!
OpenNefia.Core.Input.InputManager.OnInputModeChanged -> System.Action?
OpenNefia.Core.Input.InputManager.OnKeyBindingAdded -> System.Action<OpenNefia.Core.Input.IKeyBinding!>?
OpenNefia.Core.Input.InputManager.OnKeyBindingRemoved -> System.Action<OpenNefia.Core.Input.IKeyBinding!>?
OpenNefia.Core.Input.InputManager.RegisterBinding(in OpenNefia.Core.Input.KeyBindingRegistration! reg, bool markModified = true) -> OpenNefia.Core.Input.IKeyBinding!
OpenNefia.Core.Input.InputManager.RegisterBinding(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.KeyBindingType bindingType, OpenNefia.Core.Input.Keyboard.Key baseKey, OpenNefia.Core.Input.Keyboard.Key? mod1, OpenNefia.Core.Input.Keyboard.Key? mod2, OpenNefia.Core.Input.Keyboard.Key? mod3) -> OpenNefia.Core.Input.IKeyBinding!
OpenNefia.Core.Input.InputManager.RegisterBinding(string! function, OpenNefia.Core.Input.KeyBindingType bindingType, OpenNefia.Core.Input.Keyboard.Key baseKey, OpenNefia.Core.Input.Keyboard.Key? mod1, OpenNefia.Core.Input.Keyboard.Key? mod2, OpenNefia.Core.Input.Keyboard.Key? mod3) -> OpenNefia.Core.Input.IKeyBinding!
OpenNefia.Core.Input.InputManager.RemoveBinding(OpenNefia.Core.Input.IKeyBinding! binding, bool markModified = true) -> void
OpenNefia.Core.Input.InputManager.ResetAllBindings() -> void
OpenNefia.Core.Input.InputManager.ResetBindingsFor(OpenNefia.Core.Input.BoundKeyFunction function) -> void
OpenNefia.Core.Input.InputManager.SaveToUserData() -> void
OpenNefia.Core.Input.InputManager.SetInputCommand(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.Binding.InputCmdHandler? cmdHandler) -> void
OpenNefia.Core.Input.InputManager.TryGetKeyBinding(OpenNefia.Core.Input.BoundKeyFunction function, out OpenNefia.Core.Input.IKeyBinding? binding) -> bool
OpenNefia.Core.Input.InputManager.UIKeyBindStateChanged -> System.Func<OpenNefia.Core.Input.BoundKeyEventArgs!, bool>?
OpenNefia.Core.Input.InputManager.UpdateKeyRepeats(OpenNefia.Core.Timing.FrameEventArgs frame) -> void
OpenNefia.Core.Input.InputManager.ViewportKeyEvent(OpenNefia.Core.UI.Element.UiElement? viewport, OpenNefia.Core.Input.BoundKeyEventArgs! eventArgs) -> void
OpenNefia.Core.Input.IPlayerCommandStates
OpenNefia.Core.Input.IPlayerCommandStates.GetState(OpenNefia.Core.Input.BoundKeyFunction function) -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.IPlayerCommandStates.SetState(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.BoundKeyState state) -> void
OpenNefia.Core.Input.IPlayerCommandStates.this[OpenNefia.Core.Input.BoundKeyFunction function].get -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.IPlayerCommandStates.this[OpenNefia.Core.Input.BoundKeyFunction function].set -> void
OpenNefia.Core.Input.IRawInputControl
OpenNefia.Core.Input.IRawInputControl.RawKeyEvent(in OpenNefia.Core.Input.GuiRawKeyEvent guiRawEvent) -> bool
OpenNefia.Core.Input.KeyBindingRegistration
OpenNefia.Core.Input.KeyBindingRegistration.AllowSubCombs -> bool
OpenNefia.Core.Input.KeyBindingRegistration.BaseKey -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.KeyBindingRegistration.CanFocus -> bool
OpenNefia.Core.Input.KeyBindingRegistration.CanRepeat -> bool
OpenNefia.Core.Input.KeyBindingRegistration.Function -> OpenNefia.Core.Input.BoundKeyFunction
OpenNefia.Core.Input.KeyBindingRegistration.KeyBindingRegistration() -> void
OpenNefia.Core.Input.KeyBindingRegistration.Mod1 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.KeyBindingRegistration.Mod2 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.KeyBindingRegistration.Mod3 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.KeyBindingRegistration.Priority -> int
OpenNefia.Core.Input.KeyBindingRegistration.RepeatMode -> OpenNefia.Core.Input.KeyRepeatMode?
OpenNefia.Core.Input.KeyBindingRegistration.Type -> OpenNefia.Core.Input.KeyBindingType
OpenNefia.Core.Input.KeyBindingType
OpenNefia.Core.Input.KeyBindingType.Command = 3 -> OpenNefia.Core.Input.KeyBindingType
OpenNefia.Core.Input.KeyBindingType.State = 1 -> OpenNefia.Core.Input.KeyBindingType
OpenNefia.Core.Input.KeyBindingType.Toggle = 2 -> OpenNefia.Core.Input.KeyBindingType
OpenNefia.Core.Input.KeyBindingType.Unknown = 0 -> OpenNefia.Core.Input.KeyBindingType
OpenNefia.Core.Input.Keyboard
OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.A = 44 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Again = 134 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Alt = 159 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Alterase = 143 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Ampersand = 11 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AppBack = 178 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AppBookmarks = 182 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AppForward = 179 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AppHome = 177 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Application = 115 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AppRefresh = 181 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AppSearch = 176 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AppStop = 180 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Asterisk = 15 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.At = 37 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AudioMute = 170 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AudioNext = 166 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AudioPlay = 169 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AudioPrev = 167 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.AudioStop = 168 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.B = 45 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Backquote = 43 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Backslash = 39 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Backspace = 3 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.BrightnessDown = 183 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.BrightnessUp = 184 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.C = 46 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Calculator = 174 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Cancel = 145 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.CapsLock = 70 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Caret = 41 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Clear = 146 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.ClearAgain = 152 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Colon = 31 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Comma = 17 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Computer = 175 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Control = 157 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Copy = 137 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.CurrencySubunit = 156 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.CurrencyUnit = 155 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Cut = 136 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.D = 47 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.DecimalSeparator = 154 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Delete = 89 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.DisplaySwitch = 185 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Dollar = 10 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Down = 94 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.E = 48 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Eject = 189 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.End = 90 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Enter = 1 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Equals = 34 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Escape = 2 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Exclaim = 6 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Execute = 129 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F = 49 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F1 = 71 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F10 = 80 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F11 = 81 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F12 = 82 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F13 = 117 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F14 = 118 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F15 = 119 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F16 = 120 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F17 = 121 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F18 = 122 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F19 = 123 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F2 = 72 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F20 = 124 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F21 = 125 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F22 = 126 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F23 = 127 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F24 = 128 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F3 = 73 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F4 = 74 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F5 = 75 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F6 = 76 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F7 = 77 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F8 = 78 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.F9 = 79 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Find = 139 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.G = 50 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadA = 200 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisLeftXMinus = 215 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisLeftXPlus = 216 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisLeftYMinus = 217 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisLeftYPlus = 218 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisRightXMinus = 219 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisRightXPlus = 220 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisRightYMinus = 221 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisRightYPlus = 222 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisTriggerLeftMinus = 223 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisTriggerLeftPlus = 224 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisTriggerRightMinus = 225 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadAxisTriggerRightPlus = 226 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadB = 201 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadBack = 204 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadDPadDown = 212 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadDPadLeft = 213 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadDPadRight = 214 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadDPadUp = 211 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadGuide = 205 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadLeftShoulder = 209 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadLeftStick = 207 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadRightShoulder = 210 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadRightStick = 208 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadStart = 206 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadX = 202 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GamepadY = 203 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Greater = 35 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.GUI = 160 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.H = 51 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Hash = 8 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Help = 130 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Home = 87 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.I = 52 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Insert = 86 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.J = 53 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.K = 54 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.KBDILLUMDown = 187 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.KBDILLUMToggle = 186 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.KBDILLUMUp = 188 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.L = 55 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.LAlt = 159 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.LCtrl = 157 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Left = 93 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.LeftBracket = 38 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.LeftParen = 13 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Less = 33 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.LGUI = 160 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.LShift = 158 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.M = 56 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Mail = 173 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MediaSelect = 171 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Menu = 131 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Minus = 18 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Mode = 165 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseButton4 = 194 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseButton5 = 195 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseButton6 = 196 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseButton7 = 197 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseButton8 = 198 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseButton9 = 199 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseLeft = 191 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseMiddle = 193 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.MouseRight = 192 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Mute = 140 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.N = 57 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number0 = 21 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number1 = 22 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number2 = 23 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number3 = 24 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number4 = 25 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number5 = 26 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number6 = 27 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number7 = 28 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number8 = 29 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Number9 = 30 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumLockClear = 96 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad0 = 111 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad1 = 102 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad2 = 103 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad3 = 104 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad4 = 105 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad5 = 106 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad6 = 107 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad7 = 108 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad8 = 109 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Numpad9 = 110 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumpadComma = 113 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumpadDivide = 97 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumpadEnter = 101 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumpadEquals = 114 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumpadMinus = 99 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumpadMultiply = 98 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumpadPeriod = 112 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.NumpadPlus = 100 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.O = 58 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Oper = 151 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Out = 150 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.P = 59 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.PageDown = 91 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.PageUp = 88 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Paste = 138 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Pause = 85 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Percent = 9 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Period = 19 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Plus = 16 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Power = 116 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.PrintScreen = 83 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Prior = 147 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Q = 60 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Question = 36 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Quote = 12 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Quotedbl = 7 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.R = 61 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.RAlt = 163 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.RCtrl = 161 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Return = 1 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Return2 = 148 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.RGUI = 164 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Right = 92 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.RightBracket = 40 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.RightParen = 14 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.RShift = 162 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.S = 62 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.ScrollLock = 84 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Select = 132 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.SemiColon = 32 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Separator = 149 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Shift = 158 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Slash = 20 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Sleep = 190 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Space = 5 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Stop = 133 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Sysreq = 144 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.T = 63 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Tab = 4 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.ThousandsSeparator = 153 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.U = 64 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Underscore = 42 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Undo = 135 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Unknown = 0 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Up = 95 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.V = 65 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.VolumeDown = 142 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.VolumeUp = 141 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.W = 66 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.WWW = 172 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.X = 67 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Y = 68 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.Keyboard.Key.Z = 69 -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.KeyEventAction
OpenNefia.Core.Input.KeyEventArgs
OpenNefia.Core.Input.KeyEventArgs.IsRepeat.get -> bool
OpenNefia.Core.Input.KeyEventArgs.Key.get -> OpenNefia.Core.Input.Keyboard.Key
OpenNefia.Core.Input.KeyEventArgs.KeyEventArgs(OpenNefia.Core.Input.Keyboard.Key key, bool repeat, bool alt, bool control, bool shift, bool system, Love.Scancode scanCode) -> void
OpenNefia.Core.Input.KeyEventArgs.ScanCode.get -> Love.Scancode
OpenNefia.Core.Input.KeyEventType
OpenNefia.Core.Input.KeyEventType.Down = 0 -> OpenNefia.Core.Input.KeyEventType
OpenNefia.Core.Input.KeyEventType.Repeat = 1 -> OpenNefia.Core.Input.KeyEventType
OpenNefia.Core.Input.KeyEventType.Up = 2 -> OpenNefia.Core.Input.KeyEventType
OpenNefia.Core.Input.KeyFunctionId
OpenNefia.Core.Input.KeyFunctionId.Equals(OpenNefia.Core.Input.KeyFunctionId other) -> bool
OpenNefia.Core.Input.KeyFunctionId.KeyFunctionId() -> void
OpenNefia.Core.Input.KeyFunctionId.KeyFunctionId(int id) -> void
OpenNefia.Core.Input.KeyFunctionsAttribute
OpenNefia.Core.Input.KeyFunctionsAttribute.KeyFunctionsAttribute() -> void
OpenNefia.Core.Input.KeyRepeatMode
OpenNefia.Core.Input.KeyRepeatMode.Movement = 1 -> OpenNefia.Core.Input.KeyRepeatMode
OpenNefia.Core.Input.KeyRepeatMode.None = 0 -> OpenNefia.Core.Input.KeyRepeatMode
OpenNefia.Core.Input.KeyRepeatMode.UserInterface = 2 -> OpenNefia.Core.Input.KeyRepeatMode
OpenNefia.Core.Input.ModifierInputEventArgs
OpenNefia.Core.Input.ModifierInputEventArgs.Alt.get -> bool
OpenNefia.Core.Input.ModifierInputEventArgs.Control.get -> bool
OpenNefia.Core.Input.ModifierInputEventArgs.ModifierInputEventArgs(bool alt, bool control, bool shift, bool system) -> void
OpenNefia.Core.Input.ModifierInputEventArgs.Shift.get -> bool
OpenNefia.Core.Input.ModifierInputEventArgs.System.get -> bool
OpenNefia.Core.Input.Mouse
OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Button4 = 3 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Button5 = 4 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Button6 = 5 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Button7 = 6 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Button8 = 7 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Button9 = 8 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.LastButton = 9 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Left = 0 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Middle = 2 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.Mouse.Button.Right = 1 -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.MouseButtonEventArgs
OpenNefia.Core.Input.MouseButtonEventArgs.Button.get -> OpenNefia.Core.Input.Mouse.Button
OpenNefia.Core.Input.MouseButtonEventArgs.MouseButtonEventArgs(OpenNefia.Core.Maps.ScreenCoordinates position, OpenNefia.Core.Input.Mouse.Button button, bool isTouch) -> void
OpenNefia.Core.Input.MouseEnterLeaveEventArgs
OpenNefia.Core.Input.MouseEnterLeaveEventArgs.Entered.get -> bool
OpenNefia.Core.Input.MouseEnterLeaveEventArgs.MouseEnterLeaveEventArgs(bool entered) -> void
OpenNefia.Core.Input.MouseEventArgs
OpenNefia.Core.Input.MouseEventArgs.IsTouch.get -> bool
OpenNefia.Core.Input.MouseEventArgs.MouseEventArgs(OpenNefia.Core.Maps.ScreenCoordinates position, bool isTouch) -> void
OpenNefia.Core.Input.MouseEventArgs.Position.get -> OpenNefia.Core.Maps.ScreenCoordinates
OpenNefia.Core.Input.MouseMoveEventArgs
OpenNefia.Core.Input.MouseMoveEventArgs.MouseMoveEventArgs(OpenNefia.Core.Maps.ScreenCoordinates position, OpenNefia.Core.Maths.Vector2 relative, bool isTouch) -> void
OpenNefia.Core.Input.MouseMoveEventArgs.Relative.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Input.MouseWheelEventArgs
OpenNefia.Core.Input.MouseWheelEventArgs.Delta.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Input.MouseWheelEventArgs.MouseWheelEventArgs(OpenNefia.Core.Maps.ScreenCoordinates position, OpenNefia.Core.Maths.Vector2 delta) -> void
OpenNefia.Core.Input.PlayerCommandStates
OpenNefia.Core.Input.PlayerCommandStates.GetState(OpenNefia.Core.Input.BoundKeyFunction function) -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.PlayerCommandStates.PlayerCommandStates() -> void
OpenNefia.Core.Input.PlayerCommandStates.SetState(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.BoundKeyState state) -> void
OpenNefia.Core.Input.PlayerCommandStates.this[OpenNefia.Core.Input.BoundKeyFunction function].get -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.PlayerCommandStates.this[OpenNefia.Core.Input.BoundKeyFunction function].set -> void
OpenNefia.Core.Input.PointerInputCmdMessage
OpenNefia.Core.Input.PointerInputCmdMessage.Coordinates.get -> OpenNefia.Core.Maps.EntityCoordinates
OpenNefia.Core.Input.PointerInputCmdMessage.PointerInputCmdMessage(OpenNefia.Core.Input.KeyFunctionId inputFunctionId, OpenNefia.Core.Maps.EntityCoordinates coordinates) -> void
OpenNefia.Core.Input.PointerInputCmdMessage.PointerInputCmdMessage(OpenNefia.Core.Input.KeyFunctionId inputFunctionId, OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.GameObjects.EntityUid uid) -> void
OpenNefia.Core.Input.PointerInputCmdMessage.Uid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Input.RawKeyAction
OpenNefia.Core.Input.RawKeyAction.Down = 0 -> OpenNefia.Core.Input.RawKeyAction
OpenNefia.Core.Input.RawKeyAction.Repeat = 1 -> OpenNefia.Core.Input.RawKeyAction
OpenNefia.Core.Input.RawKeyAction.Up = 2 -> OpenNefia.Core.Input.RawKeyAction
OpenNefia.Core.Input.StateInputCmdMessage
OpenNefia.Core.Input.StateInputCmdMessage.State.get -> OpenNefia.Core.Input.BoundKeyState
OpenNefia.Core.Input.StateInputCmdMessage.StateInputCmdMessage(OpenNefia.Core.Input.KeyFunctionId inputFunctionId, OpenNefia.Core.Input.BoundKeyState state) -> void
OpenNefia.Core.Input.TextEditingEventArgs
OpenNefia.Core.Input.TextEditingEventArgs.End.get -> int
OpenNefia.Core.Input.TextEditingEventArgs.Start.get -> int
OpenNefia.Core.Input.TextEditingEventArgs.Text.get -> string!
OpenNefia.Core.Input.TextEditingEventArgs.TextEditingEventArgs(string! text, int start, int end) -> void
OpenNefia.Core.Input.TextEventArgs
OpenNefia.Core.Input.TextEventArgs.AsRune.get -> System.Text.Rune
OpenNefia.Core.Input.TextEventArgs.CodePoint.get -> uint
OpenNefia.Core.Input.TextEventArgs.TextEventArgs(string! text) -> void
OpenNefia.Core.Input.TextEventArgs.TextEventArgs(uint codePoint) -> void
OpenNefia.Core.Input.ViewportBoundKeyEventArgs
OpenNefia.Core.Input.ViewportBoundKeyEventArgs.KeyEventArgs.get -> OpenNefia.Core.Input.BoundKeyEventArgs!
OpenNefia.Core.Input.ViewportBoundKeyEventArgs.Viewport.get -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.Input.ViewportBoundKeyEventArgs.ViewportBoundKeyEventArgs(OpenNefia.Core.Input.BoundKeyEventArgs! keyEventArgs, OpenNefia.Core.UI.Element.UiElement? viewport) -> void
OpenNefia.Core.Input.WindowScaleChangedEventArgs
OpenNefia.Core.Input.WindowScaleChangedEventArgs.UIScale.get -> float
OpenNefia.Core.Input.WindowScaleChangedEventArgs.WindowScaleChangedEventArgs(float uiScale) -> void
OpenNefia.Core.IoC.DependencyAttribute
OpenNefia.Core.IoC.DependencyAttribute.DependencyAttribute() -> void
OpenNefia.Core.IoC.DependencyFactoryDelegate<T>
OpenNefia.Core.IoC.DynamicTypeFactoryExt
OpenNefia.Core.IoC.Exceptions.ImplementationConstructorException
OpenNefia.Core.IoC.Exceptions.ImplementationConstructorException.ImplementationConstructorException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.IoC.Exceptions.ImplementationConstructorException.ImplementationConstructorException(System.Type! type, System.Exception? inner) -> void
OpenNefia.Core.IoC.Exceptions.InvalidImplementationException
OpenNefia.Core.IoC.Exceptions.InvalidImplementationException.InvalidImplementationException(System.Type! type, System.Type! parent, string! message) -> void
OpenNefia.Core.IoC.Exceptions.UnregisteredDependencyException
OpenNefia.Core.IoC.Exceptions.UnregisteredDependencyException.UnregisteredDependencyException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.IoC.Exceptions.UnregisteredDependencyException.UnregisteredDependencyException(System.Type! owner, System.Type! target, string! fieldName) -> void
OpenNefia.Core.IoC.Exceptions.UnregisteredTypeException
OpenNefia.Core.IoC.Exceptions.UnregisteredTypeException.UnregisteredTypeException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.IoC.Exceptions.UnregisteredTypeException.UnregisteredTypeException(System.Type! type) -> void
OpenNefia.Core.IoC.IDependencyCollection
OpenNefia.Core.IoC.IDependencyCollection.BuildGraph() -> void
OpenNefia.Core.IoC.IDependencyCollection.Clear() -> void
OpenNefia.Core.IoC.IDependencyCollection.InjectDependencies(object! obj, bool oneOff = false) -> void
OpenNefia.Core.IoC.IDependencyCollection.Register(System.Type! implementation, OpenNefia.Core.IoC.DependencyFactoryDelegate<object!>? factory = null, bool overwrite = false) -> void
OpenNefia.Core.IoC.IDependencyCollection.Register(System.Type! interfaceType, System.Type! implementation, OpenNefia.Core.IoC.DependencyFactoryDelegate<object!>? factory = null, bool overwrite = false) -> void
OpenNefia.Core.IoC.IDependencyCollection.Register<TInterface, TImplementation>(bool overwrite = false) -> void
OpenNefia.Core.IoC.IDependencyCollection.Register<TInterface, TImplementation>(OpenNefia.Core.IoC.DependencyFactoryDelegate<TImplementation!>! factory, bool overwrite = false) -> void
OpenNefia.Core.IoC.IDependencyCollection.RegisterInstance(System.Type! type, object! implementation, bool overwrite = false, bool deferInject = false) -> void
OpenNefia.Core.IoC.IDependencyCollection.RegisterInstance<TInterface>(object! implementation, bool overwrite = false, bool deferInject = false) -> void
OpenNefia.Core.IoC.IDependencyCollection.Resolve<T>() -> T
OpenNefia.Core.IoC.IDependencyCollection.Resolve<T>(ref T? instance) -> void
OpenNefia.Core.IoC.IDependencyCollection.ResolveType(System.Type! type) -> object!
OpenNefia.Core.IoC.IDependencyCollection.Services.get -> System.Collections.Generic.IReadOnlyDictionary<System.Type!, object!>!
OpenNefia.Core.IoC.IDependencyCollection.TryResolveType(System.Type! objectType, out object! instance) -> bool
OpenNefia.Core.IoC.IDependencyCollection.TryResolveType<T>(out T? instance) -> bool
OpenNefia.Core.IoC.IDynamicTypeFactory
OpenNefia.Core.IoC.IDynamicTypeFactory.CreateInstance(System.Type! type) -> object!
OpenNefia.Core.IoC.IDynamicTypeFactory.CreateInstance(System.Type! type, object![]! args) -> object!
OpenNefia.Core.IoC.IDynamicTypeFactory.CreateInstance<T>() -> T
OpenNefia.Core.IoC.IoCManager
OpenNefia.Core.IoC.IPostInjectInit
OpenNefia.Core.IoC.IPostInjectInit.PostInject() -> void
OpenNefia.Core.Locale.EntityLocData
OpenNefia.Core.Locale.EntityLocData.Attributes.get -> System.Collections.Immutable.ImmutableDictionary<string!, string!>!
OpenNefia.Core.Locale.EntityLocData.Attributes.init -> void
OpenNefia.Core.Locale.EntityLocData.EntityLocData(System.Collections.Immutable.ImmutableDictionary<string!, string!>! Attributes) -> void
OpenNefia.Core.Locale.IComponentLocalizable
OpenNefia.Core.Locale.IComponentLocalizable.LocalizeFromLua(NLua.LuaTable! table) -> void
OpenNefia.Core.Locale.ILocalizationFetcher
OpenNefia.Core.Locale.ILocalizationFetcher.GetPrototypeString<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> protoId, OpenNefia.Core.LocaleKey key, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.ILocalizationFetcher.GetPrototypeStringRaw(System.Type! prototypeType, string! prototypeID, OpenNefia.Core.LocaleKey keySuffix, OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.ILocalizationFetcher.GetString(OpenNefia.Core.LocaleKey key, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.ILocalizationFetcher.HasString(OpenNefia.Core.LocaleKey key) -> bool
OpenNefia.Core.Locale.ILocalizationFetcher.TryGetPrototypeString<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> protoId, OpenNefia.Core.LocaleKey key, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.ILocalizationFetcher.TryGetPrototypeStringRaw(System.Type! prototypeType, string! prototypeID, OpenNefia.Core.LocaleKey keySuffix, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.ILocalizationFetcher.TryGetString(OpenNefia.Core.LocaleKey key, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.ILocalizationFetcher.TryGetTable(OpenNefia.Core.LocaleKey key, out NLua.LuaTable? table) -> bool
OpenNefia.Core.Locale.ILocalizationManager
OpenNefia.Core.Locale.ILocalizationManager.DoLocalize(object! o, OpenNefia.Core.LocaleKey key) -> void
OpenNefia.Core.Locale.ILocalizationManager.GetEntityData(string! prototypeId) -> OpenNefia.Core.Locale.EntityLocData!
OpenNefia.Core.Locale.ILocalizationManager.Initialize() -> void
OpenNefia.Core.Locale.ILocalizationManager.IsFullwidth() -> bool
OpenNefia.Core.Locale.ILocalizationManager.Language.get -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!>
OpenNefia.Core.Locale.ILocalizationManager.LoadContentFile(OpenNefia.Core.Utility.ResourcePath! luaFile) -> void
OpenNefia.Core.Locale.ILocalizationManager.LoadString(string! luaScript) -> void
OpenNefia.Core.Locale.ILocalizationManager.OnLanguageSwitched -> OpenNefia.Core.Locale.LanguageSwitchedDelegate?
OpenNefia.Core.Locale.ILocalizationManager.Resync() -> void
OpenNefia.Core.Locale.ILocalizationManager.SwitchLanguage(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!> language) -> void
OpenNefia.Core.Locale.ILocalizationManager.TryGetLocalizationData(OpenNefia.Core.GameObjects.EntityUid uid, out NLua.LuaTable? table) -> bool
OpenNefia.Core.Locale.LanguagePrototype
OpenNefia.Core.Locale.LanguagePrototype.ID.get -> string!
OpenNefia.Core.Locale.LanguagePrototype.LanguagePrototype() -> void
OpenNefia.Core.Locale.LanguagePrototypeOf
OpenNefia.Core.Locale.LanguageSwitchedDelegate
OpenNefia.Core.Locale.Loc
OpenNefia.Core.Locale.LocaleArg
OpenNefia.Core.Locale.LocaleArg.LocaleArg() -> void
OpenNefia.Core.Locale.LocaleArg.LocaleArg(string! name, object? value) -> void
OpenNefia.Core.Locale.LocaleArg.Name.get -> string!
OpenNefia.Core.Locale.LocaleArg.Name.set -> void
OpenNefia.Core.Locale.LocaleArg.Value.get -> object?
OpenNefia.Core.Locale.LocaleArg.Value.set -> void
OpenNefia.Core.Locale.LocaleFunctionAttribute
OpenNefia.Core.Locale.LocaleFunctionAttribute.LocaleFunctionAttribute(string! name) -> void
OpenNefia.Core.Locale.LocaleFunctionAttribute.Name.get -> string!
OpenNefia.Core.Locale.LocaleHelpers
OpenNefia.Core.Locale.LocaleScope
OpenNefia.Core.Locale.LocaleScope.GetPrototypeString<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> protoId, OpenNefia.Core.LocaleKey key, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.LocaleScope.GetPrototypeStringRaw(System.Type! prototypeType, string! prototypeID, OpenNefia.Core.LocaleKey keySuffix, OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.LocaleScope.GetString(OpenNefia.Core.LocaleKey key, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.LocaleScope.HasString(OpenNefia.Core.LocaleKey key) -> bool
OpenNefia.Core.Locale.LocaleScope.IsLocalized.get -> bool
OpenNefia.Core.Locale.LocaleScope.KeyPrefix.get -> OpenNefia.Core.LocaleKey
OpenNefia.Core.Locale.LocaleScope.LocaleScope(OpenNefia.Core.Locale.ILocalizationManager! localizationManager) -> void
OpenNefia.Core.Locale.LocaleScope.LocaleScope(OpenNefia.Core.Locale.ILocalizationManager! localizationManager, OpenNefia.Core.LocaleKey keyPrefix) -> void
OpenNefia.Core.Locale.LocaleScope.Localize(OpenNefia.Core.LocaleKey key) -> void
OpenNefia.Core.Locale.LocaleScope.TryGetPrototypeString<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> protoId, OpenNefia.Core.LocaleKey key, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.LocaleScope.TryGetPrototypeStringRaw(System.Type! prototypeType, string! prototypeID, OpenNefia.Core.LocaleKey keySuffix, out string? str, OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.LocaleScope.TryGetString(OpenNefia.Core.LocaleKey key, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.LocaleScope.TryGetTable(OpenNefia.Core.LocaleKey key, out NLua.LuaTable? table) -> bool
OpenNefia.Core.Locale.LocalizationManager
OpenNefia.Core.Locale.LocalizationManager.Clear() -> void
OpenNefia.Core.Locale.LocalizationManager.Dispose() -> void
OpenNefia.Core.Locale.LocalizationManager.DoLocalize(object! o, OpenNefia.Core.LocaleKey key) -> void
OpenNefia.Core.Locale.LocalizationManager.GetEntityData(string! prototypeId) -> OpenNefia.Core.Locale.EntityLocData!
OpenNefia.Core.Locale.LocalizationManager.GetPrototypeString<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> protoId, OpenNefia.Core.LocaleKey key, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.LocalizationManager.GetPrototypeStringRaw(System.Type! prototypeType, string! prototypeID, OpenNefia.Core.LocaleKey keySuffix, OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.LocalizationManager.GetString(OpenNefia.Core.LocaleKey key, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.LocalizationManager.GetStringOrEmpty(OpenNefia.Core.LocaleKey key, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
OpenNefia.Core.Locale.LocalizationManager.HasString(OpenNefia.Core.LocaleKey key) -> bool
OpenNefia.Core.Locale.LocalizationManager.Initialize() -> void
OpenNefia.Core.Locale.LocalizationManager.IsFullwidth() -> bool
OpenNefia.Core.Locale.LocalizationManager.Language.get -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!>
OpenNefia.Core.Locale.LocalizationManager.LoadAll(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!> language, OpenNefia.Core.Utility.ResourcePath! rootInContent) -> void
OpenNefia.Core.Locale.LocalizationManager.LoadContentFile(OpenNefia.Core.Utility.ResourcePath! luaFile) -> void
OpenNefia.Core.Locale.LocalizationManager.LoadString(string! luaScript) -> void
OpenNefia.Core.Locale.LocalizationManager.LocalizationManager() -> void
OpenNefia.Core.Locale.LocalizationManager.OnLanguageSwitched -> OpenNefia.Core.Locale.LanguageSwitchedDelegate?
OpenNefia.Core.Locale.LocalizationManager.Resync() -> void
OpenNefia.Core.Locale.LocalizationManager.SetLanguage(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!> language) -> void
OpenNefia.Core.Locale.LocalizationManager.SwitchLanguage(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!> language) -> void
OpenNefia.Core.Locale.LocalizationManager.TryGetLocalizationData(OpenNefia.Core.GameObjects.EntityUid uid, out NLua.LuaTable? table) -> bool
OpenNefia.Core.Locale.LocalizationManager.TryGetPrototypeString<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> protoId, OpenNefia.Core.LocaleKey key, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.LocalizationManager.TryGetPrototypeStringRaw(System.Type! prototypeType, string! prototypeID, OpenNefia.Core.LocaleKey keySuffix, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.LocalizationManager.TryGetString(OpenNefia.Core.LocaleKey key, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
OpenNefia.Core.Locale.LocalizationManager.TryGetTable(OpenNefia.Core.LocaleKey key, out NLua.LuaTable? table) -> bool
OpenNefia.Core.Locale.LocalizeAttribute
OpenNefia.Core.Locale.LocalizeAttribute.LocalizeAttribute(string? rootLocaleKey = null, bool required = false) -> void
OpenNefia.Core.Locale.LocalizeAttribute.RootLocaleKey.get -> string?
OpenNefia.Core.Locale.LuaHelpers
OpenNefia.Core.Locale.RegisterLocaleFunctionsAttribute
OpenNefia.Core.Locale.RegisterLocaleFunctionsAttribute.Language.get -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!>?
OpenNefia.Core.Locale.RegisterLocaleFunctionsAttribute.RegisterLocaleFunctionsAttribute(string? language = null) -> void
OpenNefia.Core.LocaleKey
OpenNefia.Core.LocaleKey.GetParent() -> OpenNefia.Core.LocaleKey
OpenNefia.Core.LocaleKey.Key -> string!
OpenNefia.Core.LocaleKey.LocaleKey() -> void
OpenNefia.Core.LocaleKey.LocaleKey(string! key) -> void
OpenNefia.Core.LocaleKey.With(string! other) -> OpenNefia.Core.LocaleKey
OpenNefia.Core.Log.ConsoleLogHandler
OpenNefia.Core.Log.ConsoleLogHandler.ConsoleLogHandler() -> void
OpenNefia.Core.Log.ConsoleLogHandler.Dispose() -> void
OpenNefia.Core.Log.ConsoleLogHandler.Log(string! sawmillName, Serilog.Events.LogEvent! message) -> void
OpenNefia.Core.Log.ILogHandler
OpenNefia.Core.Log.ILogHandler.Log(string! sawmillName, Serilog.Events.LogEvent! message) -> void
OpenNefia.Core.Log.ILogManager
OpenNefia.Core.Log.ILogManager.GetSawmill(string! name) -> OpenNefia.Core.Log.ISawmill!
OpenNefia.Core.Log.ILogManager.RootSawmill.get -> OpenNefia.Core.Log.ISawmill!
OpenNefia.Core.Log.ISawmill
OpenNefia.Core.Log.ISawmill.AddHandler(OpenNefia.Core.Log.ILogHandler! handler) -> void
OpenNefia.Core.Log.ISawmill.Debug(string! message) -> void
OpenNefia.Core.Log.ISawmill.Debug(string! message, params object?[]! args) -> void
OpenNefia.Core.Log.ISawmill.Error(string! message) -> void
OpenNefia.Core.Log.ISawmill.Error(string! message, params object?[]! args) -> void
OpenNefia.Core.Log.ISawmill.Fatal(string! message) -> void
OpenNefia.Core.Log.ISawmill.Fatal(string! message, params object?[]! args) -> void
OpenNefia.Core.Log.ISawmill.Info(string! message) -> void
OpenNefia.Core.Log.ISawmill.Info(string! message, params object?[]! args) -> void
OpenNefia.Core.Log.ISawmill.Level.get -> OpenNefia.Core.Log.LogLevel?
OpenNefia.Core.Log.ISawmill.Level.set -> void
OpenNefia.Core.Log.ISawmill.Log(OpenNefia.Core.Log.LogLevel level, string! message) -> void
OpenNefia.Core.Log.ISawmill.Log(OpenNefia.Core.Log.LogLevel level, string! message, params object?[]! args) -> void
OpenNefia.Core.Log.ISawmill.Log(OpenNefia.Core.Log.LogLevel level, System.Exception? exception, string! message, params object?[]! args) -> void
OpenNefia.Core.Log.ISawmill.Name.get -> string!
OpenNefia.Core.Log.ISawmill.RemoveHandler(OpenNefia.Core.Log.ILogHandler! handler) -> void
OpenNefia.Core.Log.ISawmill.Warning(string! message) -> void
OpenNefia.Core.Log.ISawmill.Warning(string! message, params object?[]! args) -> void
OpenNefia.Core.Log.LogExt
OpenNefia.Core.Log.Logger
OpenNefia.Core.Log.LogLevel
OpenNefia.Core.Log.LogLevel.Debug = 1 -> OpenNefia.Core.Log.LogLevel
OpenNefia.Core.Log.LogLevel.Error = 4 -> OpenNefia.Core.Log.LogLevel
OpenNefia.Core.Log.LogLevel.Fatal = 5 -> OpenNefia.Core.Log.LogLevel
OpenNefia.Core.Log.LogLevel.Info = 2 -> OpenNefia.Core.Log.LogLevel
OpenNefia.Core.Log.LogLevel.Verbose = 0 -> OpenNefia.Core.Log.LogLevel
OpenNefia.Core.Log.LogLevel.Warning = 3 -> OpenNefia.Core.Log.LogLevel
OpenNefia.Core.Log.LogManager
OpenNefia.Core.Log.LogManager.Dispose() -> void
OpenNefia.Core.Log.LogManager.GetSawmill(string! name) -> OpenNefia.Core.Log.ISawmill!
OpenNefia.Core.Log.LogManager.LogManager() -> void
OpenNefia.Core.Log.LogManager.RootSawmill.get -> OpenNefia.Core.Log.ISawmill!
OpenNefia.Core.Log.LogMessage
OpenNefia.Core.Log.ProxyLogManager
OpenNefia.Core.Log.ProxyLogManager.ProxyLogManager(OpenNefia.Core.Log.ILogManager! impl) -> void
OpenNefia.Core.Logic.Verb
OpenNefia.Core.Logic.Verb.CompareTo(object? obj) -> int
OpenNefia.Core.Logic.Verb.DisplayName -> string!
OpenNefia.Core.Logic.Verb.Priority -> int
OpenNefia.Core.Logic.Verb.Verb(string! verbType, string! name, OpenNefia.Core.Logic.VerbAction! act) -> void
OpenNefia.Core.Logic.VerbAction
OpenNefia.Core.Logic.VerbRequest
OpenNefia.Core.Logic.VerbRequest.VerbRequest(string! verbType) -> void
OpenNefia.Core.Maps.ActiveMapChangedDelegate
OpenNefia.Core.Maps.ActiveMapChangedEvent
OpenNefia.Core.Maps.ActiveMapChangedEvent.ActiveMapChangedEvent(OpenNefia.Core.Maps.IMap! newMap, OpenNefia.Core.Maps.IMap? oldMap = null, OpenNefia.Core.Maps.MapLoadType loadType = OpenNefia.Core.Maps.MapLoadType.Full) -> void
OpenNefia.Core.Maps.ActiveMapChangedEvent.LoadType.get -> OpenNefia.Core.Maps.MapLoadType
OpenNefia.Core.Maps.ActiveMapChangedEvent.NewMap.get -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.ActiveMapChangedEvent.OldMap.get -> OpenNefia.Core.Maps.IMap?
OpenNefia.Core.Maps.BlueprintEntityStartupDelegate
OpenNefia.Core.Maps.EntityCoordinates
OpenNefia.Core.Maps.EntityCoordinates.Deconstruct(out OpenNefia.Core.GameObjects.EntityUid entId, out OpenNefia.Core.Maths.Vector2 localPos) -> void
OpenNefia.Core.Maps.EntityCoordinates.EntityCoordinates() -> void
OpenNefia.Core.Maps.EntityCoordinates.EntityCoordinates(OpenNefia.Core.GameObjects.EntityUid entityId, int x, int y) -> void
OpenNefia.Core.Maps.EntityCoordinates.EntityCoordinates(OpenNefia.Core.GameObjects.EntityUid entityId, OpenNefia.Core.Maths.Vector2i position) -> void
OpenNefia.Core.Maps.EntityCoordinates.Equals(OpenNefia.Core.Maps.EntityCoordinates other) -> bool
OpenNefia.Core.Maps.EntityCoordinates.GetMapId(OpenNefia.Core.GameObjects.IEntityManager! entityManager) -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.EntityCoordinates.InRange(OpenNefia.Core.GameObjects.IEntityManager! entityManager, OpenNefia.Core.Maps.EntityCoordinates otherCoordinates, float range) -> bool
OpenNefia.Core.Maps.EntityCoordinates.IsValid(OpenNefia.Core.GameObjects.IEntityManager! entityManager) -> bool
OpenNefia.Core.Maps.EntityCoordinates.Offset(OpenNefia.Core.Maths.Vector2i position) -> OpenNefia.Core.Maps.EntityCoordinates
OpenNefia.Core.Maps.EntityCoordinates.ToMap(OpenNefia.Core.GameObjects.IEntityManager! entityManager) -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Maps.EntityCoordinates.ToMap(OpenNefia.Core.Maps.IMapManager! mapManager, OpenNefia.Core.GameObjects.IEntityManager! entityManager) -> (OpenNefia.Core.Maps.IMap?, OpenNefia.Core.Maps.MapCoordinates)
OpenNefia.Core.Maps.EntityCoordinates.ToMapPos(OpenNefia.Core.GameObjects.IEntityManager! entityManager) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maps.EntityCoordinates.ToVector2i(OpenNefia.Core.GameObjects.IEntityManager! entityManager) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maps.EntityCoordinates.TryDistanceFractional(OpenNefia.Core.GameObjects.IEntityManager! entityManager, OpenNefia.Core.Maps.EntityCoordinates otherCoordinates, out float distance) -> bool
OpenNefia.Core.Maps.EntityCoordinates.TryDistanceTiled(OpenNefia.Core.GameObjects.IEntityManager! entityManager, OpenNefia.Core.Maps.EntityCoordinates otherCoordinates, out int distance) -> bool
OpenNefia.Core.Maps.EntityCoordinates.X.get -> int
OpenNefia.Core.Maps.EntityCoordinates.Y.get -> int
OpenNefia.Core.Maps.IMap
OpenNefia.Core.Maps.IMap.AllTileMemory.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Maps.TileRef>!
OpenNefia.Core.Maps.IMap.AllTiles.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Maps.TileRef>!
OpenNefia.Core.Maps.IMap.AtPos(int x, int y) -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Maps.IMap.AtPos(OpenNefia.Core.Maths.Vector2i pos) -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Maps.IMap.AtPosEntity(int x, int y) -> OpenNefia.Core.Maps.EntityCoordinates
OpenNefia.Core.Maps.IMap.AtPosEntity(OpenNefia.Core.Maths.Vector2i pos) -> OpenNefia.Core.Maps.EntityCoordinates
OpenNefia.Core.Maps.IMap.Bounds.get -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.Maps.IMap.CanAccess(OpenNefia.Core.Maps.MapCoordinates newPos) -> bool
OpenNefia.Core.Maps.IMap.CanAccess(OpenNefia.Core.Maths.Vector2i position) -> bool
OpenNefia.Core.Maps.IMap.CanSeeThrough(OpenNefia.Core.Maps.MapCoordinates position) -> bool
OpenNefia.Core.Maps.IMap.CanSeeThrough(OpenNefia.Core.Maths.Vector2i position) -> bool
OpenNefia.Core.Maps.IMap.Clear(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!> tile) -> void
OpenNefia.Core.Maps.IMap.ClearMemory(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!> tile) -> void
OpenNefia.Core.Maps.IMap.DirtyTilesThisTurn.get -> System.Collections.Generic.HashSet<OpenNefia.Core.Maths.Vector2i>!
OpenNefia.Core.Maps.IMap.GetTile(OpenNefia.Core.Maps.MapCoordinates coords) -> OpenNefia.Core.Maps.TileRef?
OpenNefia.Core.Maps.IMap.GetTile(OpenNefia.Core.Maths.Vector2i pos) -> OpenNefia.Core.Maps.TileRef?
OpenNefia.Core.Maps.IMap.GetTileMemory(OpenNefia.Core.Maps.MapCoordinates coords) -> OpenNefia.Core.Maps.TileRef?
OpenNefia.Core.Maps.IMap.GetTileMemory(OpenNefia.Core.Maths.Vector2i pos) -> OpenNefia.Core.Maps.TileRef?
OpenNefia.Core.Maps.IMap.HasLineOfSight(OpenNefia.Core.Maths.Vector2i worldPosition, OpenNefia.Core.Maths.Vector2i pos) -> bool
OpenNefia.Core.Maps.IMap.Height.get -> int
OpenNefia.Core.Maps.IMap.Id.get -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.IMap.InSight.get -> uint[,]!
OpenNefia.Core.Maps.IMap.IsInBounds(OpenNefia.Core.Maps.MapCoordinates newCoords) -> bool
OpenNefia.Core.Maps.IMap.IsInBounds(OpenNefia.Core.Maths.Vector2i position) -> bool
OpenNefia.Core.Maps.IMap.IsInWindowFov(OpenNefia.Core.Maths.Vector2i pos) -> bool
OpenNefia.Core.Maps.IMap.IsMemorized(OpenNefia.Core.Maths.Vector2i pos) -> bool
OpenNefia.Core.Maps.IMap.LastSightId.get -> uint
OpenNefia.Core.Maps.IMap.LastSightId.set -> void
OpenNefia.Core.Maps.IMap.MapEntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Maps.IMap.MapObjectMemory.get -> OpenNefia.Core.Rendering.MapObjectMemoryStore!
OpenNefia.Core.Maps.IMap.MemorizeAllTiles() -> void
OpenNefia.Core.Maps.IMap.MemorizeTile(OpenNefia.Core.Maths.Vector2i position) -> void
OpenNefia.Core.Maps.IMap.NeedsRedraw.get -> bool
OpenNefia.Core.Maps.IMap.RedrawAllThisTurn.get -> bool
OpenNefia.Core.Maps.IMap.RedrawAllThisTurn.set -> void
OpenNefia.Core.Maps.IMap.RefreshTile(OpenNefia.Core.Maths.Vector2i pos) -> void
OpenNefia.Core.Maps.IMap.RefreshTileEntities(OpenNefia.Core.Maths.Vector2i pos, System.Collections.Generic.IEnumerable<OpenNefia.Core.GameObjects.SpatialComponent!>! entities) -> void
OpenNefia.Core.Maps.IMap.SetTile(OpenNefia.Core.Maths.Vector2i pos, OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!> tile) -> void
OpenNefia.Core.Maps.IMap.SetTileMemory(OpenNefia.Core.Maths.Vector2i pos, OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!> tile) -> void
OpenNefia.Core.Maps.IMap.Size.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maps.IMap.TileMemory.get -> OpenNefia.Core.Maps.Tile[,]!
OpenNefia.Core.Maps.IMap.Tiles.get -> OpenNefia.Core.Maps.Tile[,]!
OpenNefia.Core.Maps.IMap.Width.get -> int
OpenNefia.Core.Maps.IMapLoader
OpenNefia.Core.Maps.IMapLoader.DeleteMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.Maps.IMapLoader.LoadBlueprint(OpenNefia.Core.Utility.ResourcePath! filepath) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.IMapLoader.LoadBlueprint(System.IO.TextReader! yamlStream) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.IMapLoader.LoadMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.IMapLoader.MapExistsInSave(OpenNefia.Core.Maps.MapId id, OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> bool
OpenNefia.Core.Maps.IMapLoader.OnBlueprintEntityStartup -> OpenNefia.Core.Maps.BlueprintEntityStartupDelegate!
OpenNefia.Core.Maps.IMapLoader.OnMapDeleted -> OpenNefia.Core.Maps.MapDeletedDelegate?
OpenNefia.Core.Maps.IMapLoader.SaveBlueprint(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.Utility.ResourcePath! filepath) -> void
OpenNefia.Core.Maps.IMapLoader.SaveBlueprint(OpenNefia.Core.Maps.MapId mapId, System.IO.TextWriter! yamlStream) -> void
OpenNefia.Core.Maps.IMapLoader.SaveMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.Maps.IMapLoader.TryLoadMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.SaveGames.ISaveGameHandle! save, out OpenNefia.Core.Maps.IMap? map) -> bool
OpenNefia.Core.Maps.IMapManager
OpenNefia.Core.Maps.IMapManager.ActiveMap.get -> OpenNefia.Core.Maps.IMap?
OpenNefia.Core.Maps.IMapManager.CreateMap(int width, int height, OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? mapEntityProto = null) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.IMapManager.CreateMap(int width, int height, OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? mapEntityProto = null) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.IMapManager.GenerateMapId() -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.IMapManager.GetMap(OpenNefia.Core.Maps.MapId mapId) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.IMapManager.GetMapOfEntity(OpenNefia.Core.GameObjects.EntityUid entity) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.IMapManager.IsMapInitialized(OpenNefia.Core.Maps.MapId mapId) -> bool
OpenNefia.Core.Maps.IMapManager.LoadedMaps.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Maps.MapId, OpenNefia.Core.Maps.IMap!>!
OpenNefia.Core.Maps.IMapManager.MapIsLoaded(OpenNefia.Core.Maps.MapId mapId) -> bool
OpenNefia.Core.Maps.IMapManager.OnActiveMapChanged -> OpenNefia.Core.Maps.ActiveMapChangedDelegate?
OpenNefia.Core.Maps.IMapManager.RefreshVisibility(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Maps.IMapManager.SetActiveMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.Maps.MapLoadType loadType = OpenNefia.Core.Maps.MapLoadType.Full) -> void
OpenNefia.Core.Maps.IMapManager.SetMapEntity(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.GameObjects.EntityUid newMapEntityId) -> void
OpenNefia.Core.Maps.IMapManager.TryGetMap(OpenNefia.Core.Maps.MapId mapId, out OpenNefia.Core.Maps.IMap? map) -> bool
OpenNefia.Core.Maps.IMapManager.TryGetMapOfEntity(OpenNefia.Core.GameObjects.EntityUid entity, out OpenNefia.Core.Maps.IMap? map) -> bool
OpenNefia.Core.Maps.IMapManager.UnloadMap(OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Maps.ITileDefinitionManager
OpenNefia.Core.Maps.ITileDefinitionManager.Count.get -> int
OpenNefia.Core.Maps.ITileDefinitionManager.Initialize() -> void
OpenNefia.Core.Maps.ITileDefinitionManager.Register(OpenNefia.Core.Maps.TilePrototype! tileDef) -> void
OpenNefia.Core.Maps.ITileDefinitionManager.this[int id].get -> OpenNefia.Core.Maps.TilePrototype!
OpenNefia.Core.Maps.ITileDefinitionManager.this[OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!> protoId].get -> ushort
OpenNefia.Core.Maps.ITileDefinitionManagerExt
OpenNefia.Core.Maps.MapComponent
OpenNefia.Core.Maps.MapComponent.MapComponent() -> void
OpenNefia.Core.Maps.MapComponent.MapId.get -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.MapComponent.Metadata.get -> OpenNefia.Core.Maps.MapMetadata!
OpenNefia.Core.Maps.MapComponentAddEvent
OpenNefia.Core.Maps.MapComponentAddEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Maps.MapComponentAddEvent.MapComponentAddEvent(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Maps.MapComponentAddEvent.MapId.get -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.MapComponentInitializeEvent
OpenNefia.Core.Maps.MapComponentInitializeEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Maps.MapComponentInitializeEvent.MapComponentInitializeEvent(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Maps.MapComponentInitializeEvent.MapId.get -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.MapComponentStartupEvent
OpenNefia.Core.Maps.MapComponentStartupEvent.EntityUid.get -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Maps.MapComponentStartupEvent.MapComponentStartupEvent(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Maps.MapComponentStartupEvent.MapId.get -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Maps.MapCoordinates.Deconstruct(out float x, out float y, out OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Maps.MapCoordinates.Deconstruct(out OpenNefia.Core.Maths.Vector2i position, out OpenNefia.Core.Maps.MapId mapId) -> void
OpenNefia.Core.Maps.MapCoordinates.Equals(OpenNefia.Core.Maps.MapCoordinates other) -> bool
OpenNefia.Core.Maps.MapCoordinates.InRange(OpenNefia.Core.Maps.MapCoordinates otherCoords, float range) -> bool
OpenNefia.Core.Maps.MapCoordinates.IsAdjacentTo(OpenNefia.Core.Maps.MapCoordinates otherCoordinates) -> bool
OpenNefia.Core.Maps.MapCoordinates.MapCoordinates() -> void
OpenNefia.Core.Maps.MapCoordinates.MapCoordinates(OpenNefia.Core.Maps.MapId mapId, int x, int y) -> void
OpenNefia.Core.Maps.MapCoordinates.MapCoordinates(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.Maths.Vector2i position) -> void
OpenNefia.Core.Maps.MapCoordinates.Offset(int x, int y) -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Maps.MapCoordinates.Offset(OpenNefia.Core.Maths.Vector2i offset) -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Maps.MapCoordinates.TryDistanceFractional(OpenNefia.Core.Maps.MapCoordinates otherCoordinates, out float distance) -> bool
OpenNefia.Core.Maps.MapCoordinates.TryDistanceTiled(OpenNefia.Core.Maps.MapCoordinates otherCoordinates, out int distance) -> bool
OpenNefia.Core.Maps.MapCoordinates.TryToEntity(OpenNefia.Core.Maps.IMapManager! mapManager, out OpenNefia.Core.Maps.EntityCoordinates entityCoords) -> bool
OpenNefia.Core.Maps.MapCoordinates.X.get -> int
OpenNefia.Core.Maps.MapCoordinates.Y.get -> int
OpenNefia.Core.Maps.MapCreatedEvent
OpenNefia.Core.Maps.MapCreatedEvent.Map.get -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapCreatedEvent.MapCreatedEvent(OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maps.MapCreationMode mode) -> void
OpenNefia.Core.Maps.MapCreatedEvent.Mode.get -> OpenNefia.Core.Maps.MapCreationMode
OpenNefia.Core.Maps.MapCreationMode
OpenNefia.Core.Maps.MapCreationMode.LoadedFromBlueprint = 1 -> OpenNefia.Core.Maps.MapCreationMode
OpenNefia.Core.Maps.MapCreationMode.Normal = 0 -> OpenNefia.Core.Maps.MapCreationMode
OpenNefia.Core.Maps.MapDeletedDelegate
OpenNefia.Core.Maps.MapEntityLookupComponent
OpenNefia.Core.Maps.MapEntityLookupComponent.EntitySpatial -> System.Collections.Generic.SortedSet<OpenNefia.Core.GameObjects.EntityUid>![,]!
OpenNefia.Core.Maps.MapEntityLookupComponent.MapEntityLookupComponent() -> void
OpenNefia.Core.Maps.MapExtensions
OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.MapId.Equals(OpenNefia.Core.Maps.MapId other) -> bool
OpenNefia.Core.Maps.MapId.MapId() -> void
OpenNefia.Core.Maps.MapId.MapId(int value) -> void
OpenNefia.Core.Maps.MapLoadConstants
OpenNefia.Core.Maps.MapLoadedFromSaveEvent
OpenNefia.Core.Maps.MapLoadedFromSaveEvent.Map.get -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapLoadedFromSaveEvent.MapLoadedFromSaveEvent(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Maps.MapLoader
OpenNefia.Core.Maps.MapLoader.DeleteMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.Maps.MapLoader.LoadBlueprint(OpenNefia.Core.Utility.ResourcePath! yamlPath) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapLoader.LoadBlueprint(System.IO.TextReader! reader) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapLoader.LoadMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapLoader.MapExistsInSave(OpenNefia.Core.Maps.MapId id, OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> bool
OpenNefia.Core.Maps.MapLoader.MapLoader() -> void
OpenNefia.Core.Maps.MapLoader.OnBlueprintEntityStartup -> OpenNefia.Core.Maps.BlueprintEntityStartupDelegate?
OpenNefia.Core.Maps.MapLoader.OnMapDeleted -> OpenNefia.Core.Maps.MapDeletedDelegate?
OpenNefia.Core.Maps.MapLoader.SaveBlueprint(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.Utility.ResourcePath! resPath) -> void
OpenNefia.Core.Maps.MapLoader.SaveBlueprint(OpenNefia.Core.Maps.MapId mapId, System.IO.TextWriter! writer) -> void
OpenNefia.Core.Maps.MapLoader.SaveMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.Maps.MapLoader.TryLoadMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.SaveGames.ISaveGameHandle! save, out OpenNefia.Core.Maps.IMap? map) -> bool
OpenNefia.Core.Maps.MapLoadType
OpenNefia.Core.Maps.MapLoadType.Full = 3 -> OpenNefia.Core.Maps.MapLoadType
OpenNefia.Core.Maps.MapLoadType.GameLoaded = 1 -> OpenNefia.Core.Maps.MapLoadType
OpenNefia.Core.Maps.MapLoadType.InitializeOnly = 0 -> OpenNefia.Core.Maps.MapLoadType
OpenNefia.Core.Maps.MapLoadType.Traveled = 2 -> OpenNefia.Core.Maps.MapLoadType
OpenNefia.Core.Maps.MapManager
OpenNefia.Core.Maps.MapManager.ActiveMap.get -> OpenNefia.Core.Maps.IMap?
OpenNefia.Core.Maps.MapManager.CreateMap(int width, int height, OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? mapEntityProto = null) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapManager.CreateMap(int width, int height, OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? mapEntityProto = null) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapManager.FlushMaps() -> void
OpenNefia.Core.Maps.MapManager.GenerateMapId() -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Maps.MapManager.GetMap(OpenNefia.Core.Maps.MapId mapId) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapManager.GetMapOfEntity(OpenNefia.Core.GameObjects.EntityUid entity) -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.MapManager.IsMapInitialized(OpenNefia.Core.Maps.MapId mapId) -> bool
OpenNefia.Core.Maps.MapManager.LoadedMaps.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Maps.MapId, OpenNefia.Core.Maps.IMap!>!
OpenNefia.Core.Maps.MapManager.MapIsLoaded(OpenNefia.Core.Maps.MapId mapId) -> bool
OpenNefia.Core.Maps.MapManager.MapManager() -> void
OpenNefia.Core.Maps.MapManager.NextMapId.get -> int
OpenNefia.Core.Maps.MapManager.NextMapId.set -> void
OpenNefia.Core.Maps.MapManager.OnActiveMapChanged -> OpenNefia.Core.Maps.ActiveMapChangedDelegate?
OpenNefia.Core.Maps.MapManager.RefreshVisibility(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Maps.MapManager.RegisterMap(OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.GameObjects.EntityUid mapEntityUid) -> void
OpenNefia.Core.Maps.MapManager.SetActiveMap(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.Maps.MapLoadType loadType = OpenNefia.Core.Maps.MapLoadType.Full) -> void
OpenNefia.Core.Maps.MapManager.SetMapEntity(OpenNefia.Core.Maps.MapId mapId, OpenNefia.Core.GameObjects.EntityUid newMapEntity) -> void
OpenNefia.Core.Maps.MapManager.TryGetMap(OpenNefia.Core.Maps.MapId mapId, out OpenNefia.Core.Maps.IMap? map) -> bool
OpenNefia.Core.Maps.MapManager.TryGetMapOfEntity(OpenNefia.Core.GameObjects.EntityUid entity, out OpenNefia.Core.Maps.IMap? map) -> bool
OpenNefia.Core.Maps.MapManager.UnloadMap(OpenNefia.Core.Maps.MapId mapID) -> void
OpenNefia.Core.Maps.MapMetadata
OpenNefia.Core.Maps.MapMetadata.MapMetadata(string! name = "", string! author = "") -> void
OpenNefia.Core.Maps.MapPrototype
OpenNefia.Core.Maps.MapPrototype.BlueprintPath.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Maps.MapPrototype.ID.get -> string!
OpenNefia.Core.Maps.MapPrototype.MapPrototype() -> void
OpenNefia.Core.Maps.RefreshMapVisibilityEvent
OpenNefia.Core.Maps.RefreshMapVisibilityEvent.Map.get -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Maps.RefreshMapVisibilityEvent.RefreshMapVisibilityEvent() -> void
OpenNefia.Core.Maps.RefreshMapVisibilityEvent.RefreshMapVisibilityEvent(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Maps.ScreenCoordinates
OpenNefia.Core.Maps.ScreenCoordinates.Equals(OpenNefia.Core.Maps.ScreenCoordinates other) -> bool
OpenNefia.Core.Maps.ScreenCoordinates.ScreenCoordinates() -> void
OpenNefia.Core.Maps.ScreenCoordinates.ScreenCoordinates(float x, float y) -> void
OpenNefia.Core.Maps.ScreenCoordinates.ScreenCoordinates(OpenNefia.Core.Maths.Vector2 position) -> void
OpenNefia.Core.Maps.ScreenCoordinates.X.get -> float
OpenNefia.Core.Maps.ScreenCoordinates.Y.get -> float
OpenNefia.Core.Maps.Tile
OpenNefia.Core.Maps.Tile.GetStrongID() -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>
OpenNefia.Core.Maps.Tile.ResolvePrototype() -> OpenNefia.Core.Maps.TilePrototype!
OpenNefia.Core.Maps.Tile.Tile() -> void
OpenNefia.Core.Maps.Tile.Tile(int type) -> void
OpenNefia.Core.Maps.TileDefinitionManager
OpenNefia.Core.Maps.TileDefinitionManager.Count.get -> int
OpenNefia.Core.Maps.TileDefinitionManager.GetEnumerator() -> System.Collections.Generic.IEnumerator<OpenNefia.Core.Maps.TilePrototype!>!
OpenNefia.Core.Maps.TileDefinitionManager.RegisterAll() -> void
OpenNefia.Core.Maps.TileDefinitionManager.this[int index].get -> OpenNefia.Core.Maps.TilePrototype!
OpenNefia.Core.Maps.TileDefinitionManager.this[OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!> protoId].get -> ushort
OpenNefia.Core.Maps.TileDefinitionManager.TileDefinitionManager() -> void
OpenNefia.Core.Maps.TileFlag
OpenNefia.Core.Maps.TileFlag.IsOpaque = 2 -> OpenNefia.Core.Maps.TileFlag
OpenNefia.Core.Maps.TileFlag.IsSolid = 1 -> OpenNefia.Core.Maps.TileFlag
OpenNefia.Core.Maps.TileFlag.None = 0 -> OpenNefia.Core.Maps.TileFlag
OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.Coast = 9 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.Crop = 2 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.Dryground = 1 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.HardWall = 6 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.MountainWater = 5 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.None = 0 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.Sand = 7 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.SandHard = 8 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.SandWater = 10 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.Snow = 4 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TileKind.Water = 3 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TilePrototype
OpenNefia.Core.Maps.TilePrototype.AssignTileIndex(int id) -> void
OpenNefia.Core.Maps.TilePrototype.GetAtlasRegions() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Rendering.AtlasRegion!>!
OpenNefia.Core.Maps.TilePrototype.HasOverhang -> bool
OpenNefia.Core.Maps.TilePrototype.HspIds.get -> OpenNefia.Core.Prototypes.HspIds<OpenNefia.Core.Maths.Vector2i>?
OpenNefia.Core.Maps.TilePrototype.ID.get -> string!
OpenNefia.Core.Maps.TilePrototype.Image -> OpenNefia.Core.Rendering.TileSpecifier!
OpenNefia.Core.Maps.TilePrototype.IsOpaque -> bool
OpenNefia.Core.Maps.TilePrototype.IsSolid -> bool
OpenNefia.Core.Maps.TilePrototype.Kind -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TilePrototype.Kind2 -> OpenNefia.Core.Maps.TileKind
OpenNefia.Core.Maps.TilePrototype.TileIndex.get -> int
OpenNefia.Core.Maps.TilePrototype.TilePrototype() -> void
OpenNefia.Core.Maps.TilePrototype.WallImage -> OpenNefia.Core.Rendering.TileSpecifier?
OpenNefia.Core.Maps.TileRef
OpenNefia.Core.Maps.TileRef.Equals(OpenNefia.Core.Maps.TileRef other) -> bool
OpenNefia.Core.Maps.TileRef.MapPosition.get -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Maps.TileRef.TileRef() -> void
OpenNefia.Core.Maps.TileRef.X.get -> int
OpenNefia.Core.Maps.TileRef.Y.get -> int
OpenNefia.Core.Maps.YamlGridSerializer
OpenNefia.Core.Maths.Angle
OpenNefia.Core.Maths.Angle.Angle() -> void
OpenNefia.Core.Maths.Angle.Angle(double theta) -> void
OpenNefia.Core.Maths.Angle.Angle(OpenNefia.Core.Maths.Vector2 dir) -> void
OpenNefia.Core.Maths.Angle.Degrees.get -> double
OpenNefia.Core.Maths.Angle.Equals(OpenNefia.Core.Maths.Angle other) -> bool
OpenNefia.Core.Maths.Angle.EqualsApprox(OpenNefia.Core.Maths.Angle other) -> bool
OpenNefia.Core.Maths.Angle.EqualsApprox(OpenNefia.Core.Maths.Angle other, double tolerance) -> bool
OpenNefia.Core.Maths.Angle.FlipPositive() -> OpenNefia.Core.Maths.Angle
OpenNefia.Core.Maths.Angle.GetCardinalDir() -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Angle.GetDir() -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Angle.Opposite() -> OpenNefia.Core.Maths.Angle
OpenNefia.Core.Maths.Angle.Reduced() -> OpenNefia.Core.Maths.Angle
OpenNefia.Core.Maths.Angle.RotateVec(in OpenNefia.Core.Maths.Vector2 vec) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Angle.ToVec() -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Angle.ToWorldVec() -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2
OpenNefia.Core.Maths.Box2.Bottom -> float
OpenNefia.Core.Maths.Box2.BottomLeft -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2.BottomRight.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2.Box2() -> void
OpenNefia.Core.Maths.Box2.Box2(float left, float bottom, float right, float top) -> void
OpenNefia.Core.Maths.Box2.Box2(OpenNefia.Core.Maths.Vector2 bottomLeft, OpenNefia.Core.Maths.Vector2 topRight) -> void
OpenNefia.Core.Maths.Box2.Center.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2.ClosestPoint(in OpenNefia.Core.Maths.Vector2 position) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2.Contains(float x, float y) -> bool
OpenNefia.Core.Maths.Box2.Contains(in OpenNefia.Core.Maths.Box2 inner) -> bool
OpenNefia.Core.Maths.Box2.Contains(OpenNefia.Core.Maths.Vector2 point, bool closedRegion = true) -> bool
OpenNefia.Core.Maths.Box2.Encloses(in OpenNefia.Core.Maths.Box2 inner) -> bool
OpenNefia.Core.Maths.Box2.Enlarged(float size) -> OpenNefia.Core.Maths.Box2
OpenNefia.Core.Maths.Box2.Equals(OpenNefia.Core.Maths.Box2 other) -> bool
OpenNefia.Core.Maths.Box2.EqualsApprox(OpenNefia.Core.Maths.Box2 other) -> bool
OpenNefia.Core.Maths.Box2.EqualsApprox(OpenNefia.Core.Maths.Box2 other, double tolerance) -> bool
OpenNefia.Core.Maths.Box2.ExtendToContain(OpenNefia.Core.Maths.Vector2 vec) -> OpenNefia.Core.Maths.Box2
OpenNefia.Core.Maths.Box2.Extents.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2.Height.get -> float
OpenNefia.Core.Maths.Box2.Intersect(in OpenNefia.Core.Maths.Box2 other) -> OpenNefia.Core.Maths.Box2
OpenNefia.Core.Maths.Box2.IntersectPercentage(in OpenNefia.Core.Maths.Box2 other) -> float
OpenNefia.Core.Maths.Box2.Intersects(in OpenNefia.Core.Maths.Box2 other) -> bool
OpenNefia.Core.Maths.Box2.IsEmpty() -> bool
OpenNefia.Core.Maths.Box2.Left -> float
OpenNefia.Core.Maths.Box2.Right -> float
OpenNefia.Core.Maths.Box2.Scale(float scalar) -> OpenNefia.Core.Maths.Box2
OpenNefia.Core.Maths.Box2.Scale(OpenNefia.Core.Maths.Vector2 scale) -> OpenNefia.Core.Maths.Box2
OpenNefia.Core.Maths.Box2.Size.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2.Top -> float
OpenNefia.Core.Maths.Box2.TopLeft.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2.TopRight -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Box2.Translated(OpenNefia.Core.Maths.Vector2 point) -> OpenNefia.Core.Maths.Box2
OpenNefia.Core.Maths.Box2.Union(in OpenNefia.Core.Maths.Box2 other) -> OpenNefia.Core.Maths.Box2
OpenNefia.Core.Maths.Box2.Width.get -> float
OpenNefia.Core.Maths.Box2i
OpenNefia.Core.Maths.Box2i.Area.get -> int
OpenNefia.Core.Maths.Box2i.Bottom -> int
OpenNefia.Core.Maths.Box2i.BottomLeft -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.Box2i.BottomRight.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.Box2i.Box2i() -> void
OpenNefia.Core.Maths.Box2i.Box2i(int left, int bottom, int right, int top) -> void
OpenNefia.Core.Maths.Box2i.Box2i(OpenNefia.Core.Maths.Vector2i bottomLeft, OpenNefia.Core.Maths.Vector2i topRight) -> void
OpenNefia.Core.Maths.Box2i.Contains(int x, int y) -> bool
OpenNefia.Core.Maths.Box2i.Contains(OpenNefia.Core.Maths.Vector2i point, bool closedRegion = true) -> bool
OpenNefia.Core.Maths.Box2i.Equals(OpenNefia.Core.Maths.Box2i other) -> bool
OpenNefia.Core.Maths.Box2i.Height.get -> int
OpenNefia.Core.Maths.Box2i.IsEmpty() -> bool
OpenNefia.Core.Maths.Box2i.Left -> int
OpenNefia.Core.Maths.Box2i.Right -> int
OpenNefia.Core.Maths.Box2i.Scale(int scalar) -> OpenNefia.Core.Maths.Box2i
OpenNefia.Core.Maths.Box2i.Size.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.Box2i.Top -> int
OpenNefia.Core.Maths.Box2i.TopLeft.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.Box2i.TopRight -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.Box2i.Translated(OpenNefia.Core.Maths.Vector2i point) -> OpenNefia.Core.Maths.Box2i
OpenNefia.Core.Maths.Box2i.Union(in OpenNefia.Core.Maths.Box2i other) -> OpenNefia.Core.Maths.Box2i
OpenNefia.Core.Maths.Box2i.Width.get -> int
OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.A -> float
OpenNefia.Core.Maths.Color.AByte.get -> byte
OpenNefia.Core.Maths.Color.B -> float
OpenNefia.Core.Maths.Color.BByte.get -> byte
OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.DstAlpha = 8 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.DstColor = 4 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.One = 1 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.OneMinusDstAlpha = 9 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.OneMinusDstColor = 5 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.OneMinusSrcAlpha = 7 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.OneMinusSrcColor = 3 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.SrcAlpha = 6 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.SrcColor = 2 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.BlendFactor.Zero = 0 -> OpenNefia.Core.Maths.Color.BlendFactor
OpenNefia.Core.Maths.Color.Color() -> void
OpenNefia.Core.Maths.Color.Color(byte r, byte g, byte b, byte a = 255) -> void
OpenNefia.Core.Maths.Color.Color(float r, float g, float b, float a = 1) -> void
OpenNefia.Core.Maths.Color.Deconstruct(out float r, out float g, out float b) -> void
OpenNefia.Core.Maths.Color.Deconstruct(out float r, out float g, out float b, out float a) -> void
OpenNefia.Core.Maths.Color.Equals(OpenNefia.Core.Maths.Color other) -> bool
OpenNefia.Core.Maths.Color.G -> float
OpenNefia.Core.Maths.Color.GByte.get -> byte
OpenNefia.Core.Maths.Color.Lighten(float mult) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.Name() -> string?
OpenNefia.Core.Maths.Color.R -> float
OpenNefia.Core.Maths.Color.RByte.get -> byte
OpenNefia.Core.Maths.Color.ToArgb() -> int
OpenNefia.Core.Maths.Color.ToHex() -> string!
OpenNefia.Core.Maths.Color.ToHexNoAlpha() -> string!
OpenNefia.Core.Maths.Color.WithAlphaB(byte newA) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.WithAlphaF(float newA) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.WithBlueB(byte newB) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.WithBlueF(float newB) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.WithGreenB(byte newG) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.WithGreenF(float newG) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.WithRedB(byte newR) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Color.WithRedF(float newR) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.Center = 8 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.East = 2 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.Invalid = -1 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.North = 0 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.NorthEast = 1 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.NorthWest = 7 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.South = 4 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.SouthEast = 3 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.SouthWest = 5 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.Direction.West = 6 -> OpenNefia.Core.Maths.Direction
OpenNefia.Core.Maths.DirectionExtensions
OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.Center = 16 -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.East = 2 -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.None = 0 -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.North = 4 -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.NorthEast = OpenNefia.Core.Maths.DirectionFlag.East | OpenNefia.Core.Maths.DirectionFlag.North -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.NorthWest = OpenNefia.Core.Maths.DirectionFlag.North | OpenNefia.Core.Maths.DirectionFlag.West -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.South = 1 -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.SouthEast = OpenNefia.Core.Maths.DirectionFlag.South | OpenNefia.Core.Maths.DirectionFlag.East -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.SouthWest = OpenNefia.Core.Maths.DirectionFlag.South | OpenNefia.Core.Maths.DirectionFlag.West -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.DirectionFlag.West = 8 -> OpenNefia.Core.Maths.DirectionFlag
OpenNefia.Core.Maths.IApproxEquatable<T>
OpenNefia.Core.Maths.IApproxEquatable<T>.EqualsApprox(T other) -> bool
OpenNefia.Core.Maths.IApproxEquatable<T>.EqualsApprox(T other, double tolerance) -> bool
OpenNefia.Core.Maths.IntRange
OpenNefia.Core.Maths.IntRange.Clamp(int val) -> int
OpenNefia.Core.Maths.IntRange.Equals(OpenNefia.Core.Maths.IntRange other) -> bool
OpenNefia.Core.Maths.IntRange.Includes(int val) -> bool
OpenNefia.Core.Maths.IntRange.IntRange() -> void
OpenNefia.Core.Maths.IntRange.IntRange(int min, int max) -> void
OpenNefia.Core.Maths.IntRange.Max -> int
OpenNefia.Core.Maths.IntRange.Min -> int
OpenNefia.Core.Maths.IntRange.TrueMax.get -> int
OpenNefia.Core.Maths.IntRange.TrueMin.get -> int
OpenNefia.Core.Maths.MathHelper
OpenNefia.Core.Maths.Matrix3
OpenNefia.Core.Maths.Matrix3.Add(ref OpenNefia.Core.Maths.Matrix3 matrix) -> void
OpenNefia.Core.Maths.Matrix3.Add(ref OpenNefia.Core.Maths.Matrix3 matrix, out OpenNefia.Core.Maths.Matrix3 result) -> void
OpenNefia.Core.Maths.Matrix3.Determinant.get -> float
OpenNefia.Core.Maths.Matrix3.Equals(OpenNefia.Core.Maths.Matrix3 other) -> bool
OpenNefia.Core.Maths.Matrix3.Equals(ref OpenNefia.Core.Maths.Matrix3 matrix) -> bool
OpenNefia.Core.Maths.Matrix3.EqualsApprox(OpenNefia.Core.Maths.Matrix3 other) -> bool
OpenNefia.Core.Maths.Matrix3.EqualsApprox(OpenNefia.Core.Maths.Matrix3 other, double tolerance) -> bool
OpenNefia.Core.Maths.Matrix3.EqualsApprox(ref OpenNefia.Core.Maths.Matrix3 matrix, float tolerance) -> bool
OpenNefia.Core.Maths.Matrix3.Invert(ref OpenNefia.Core.Maths.Matrix3 minv) -> void
OpenNefia.Core.Maths.Matrix3.Matrix3() -> void
OpenNefia.Core.Maths.Matrix3.Matrix3(float r0c0, float r0c1, float r0c2, float r1c0, float r1c1, float r1c2, float r2c0, float r2c1, float r2c2) -> void
OpenNefia.Core.Maths.Matrix3.Matrix3(float[]! floatArray) -> void
OpenNefia.Core.Maths.Matrix3.Matrix3(OpenNefia.Core.Maths.Matrix4 matrix) -> void
OpenNefia.Core.Maths.Matrix3.Matrix3(ref OpenNefia.Core.Maths.Matrix3 matrix) -> void
OpenNefia.Core.Maths.Matrix3.Matrix3(ref OpenNefia.Core.Maths.Vector2 x, ref OpenNefia.Core.Maths.Vector2 y, ref OpenNefia.Core.Maths.Vector2 origin) -> void
OpenNefia.Core.Maths.Matrix3.Multiply(float scalar) -> void
OpenNefia.Core.Maths.Matrix3.Multiply(float scalar, out OpenNefia.Core.Maths.Matrix3 result) -> void
OpenNefia.Core.Maths.Matrix3.Multiply(in OpenNefia.Core.Maths.Matrix3 matrix) -> void
OpenNefia.Core.Maths.Matrix3.Multiply(ref OpenNefia.Core.Maths.Matrix3 matrix, out OpenNefia.Core.Maths.Matrix3 result) -> void
OpenNefia.Core.Maths.Matrix3.R0C0 -> float
OpenNefia.Core.Maths.Matrix3.R0C1 -> float
OpenNefia.Core.Maths.Matrix3.R0C2 -> float
OpenNefia.Core.Maths.Matrix3.R1C0 -> float
OpenNefia.Core.Maths.Matrix3.R1C1 -> float
OpenNefia.Core.Maths.Matrix3.R1C2 -> float
OpenNefia.Core.Maths.Matrix3.R2C0 -> float
OpenNefia.Core.Maths.Matrix3.R2C1 -> float
OpenNefia.Core.Maths.Matrix3.R2C2 -> float
OpenNefia.Core.Maths.Matrix3.Rotate(float angle) -> void
OpenNefia.Core.Maths.Matrix3.Rotate(float angle, out OpenNefia.Core.Maths.Matrix3 result) -> void
OpenNefia.Core.Maths.Matrix3.Rotate(OpenNefia.Core.Maths.Angle angle) -> void
OpenNefia.Core.Maths.Matrix3.Subtract(ref OpenNefia.Core.Maths.Matrix3 matrix) -> void
OpenNefia.Core.Maths.Matrix3.Subtract(ref OpenNefia.Core.Maths.Matrix3 matrix, out OpenNefia.Core.Maths.Matrix3 result) -> void
OpenNefia.Core.Maths.Matrix3.this[int index].get -> float
OpenNefia.Core.Maths.Matrix3.this[int index].set -> void
OpenNefia.Core.Maths.Matrix3.this[int row, int column].get -> float
OpenNefia.Core.Maths.Matrix3.this[int row, int column].set -> void
OpenNefia.Core.Maths.Matrix3.Transform(OpenNefia.Core.Maths.Vector2 vector) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Matrix3.Transform(ref OpenNefia.Core.Maths.Vector3 vector) -> void
OpenNefia.Core.Maths.Matrix3.Transform(ref OpenNefia.Core.Maths.Vector3 vector, out OpenNefia.Core.Maths.Vector3 result) -> void
OpenNefia.Core.Maths.Matrix3.Transpose() -> void
OpenNefia.Core.Maths.Matrix3.Transpose(out OpenNefia.Core.Maths.Matrix3 result) -> void
OpenNefia.Core.Maths.Matrix4
OpenNefia.Core.Maths.Matrix4.Column0.get -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Matrix4.Column1.get -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Matrix4.Column2.get -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Matrix4.Column3.get -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Matrix4.Determinant.get -> float
OpenNefia.Core.Maths.Matrix4.Equals(OpenNefia.Core.Maths.Matrix4 other) -> bool
OpenNefia.Core.Maths.Matrix4.Invert() -> void
OpenNefia.Core.Maths.Matrix4.Invert(ref OpenNefia.Core.Maths.Matrix4 result) -> void
OpenNefia.Core.Maths.Matrix4.M11.get -> float
OpenNefia.Core.Maths.Matrix4.M11.set -> void
OpenNefia.Core.Maths.Matrix4.M12.get -> float
OpenNefia.Core.Maths.Matrix4.M12.set -> void
OpenNefia.Core.Maths.Matrix4.M13.get -> float
OpenNefia.Core.Maths.Matrix4.M13.set -> void
OpenNefia.Core.Maths.Matrix4.M14.get -> float
OpenNefia.Core.Maths.Matrix4.M14.set -> void
OpenNefia.Core.Maths.Matrix4.M21.get -> float
OpenNefia.Core.Maths.Matrix4.M21.set -> void
OpenNefia.Core.Maths.Matrix4.M22.get -> float
OpenNefia.Core.Maths.Matrix4.M22.set -> void
OpenNefia.Core.Maths.Matrix4.M23.get -> float
OpenNefia.Core.Maths.Matrix4.M23.set -> void
OpenNefia.Core.Maths.Matrix4.M24.get -> float
OpenNefia.Core.Maths.Matrix4.M24.set -> void
OpenNefia.Core.Maths.Matrix4.M31.get -> float
OpenNefia.Core.Maths.Matrix4.M31.set -> void
OpenNefia.Core.Maths.Matrix4.M32.get -> float
OpenNefia.Core.Maths.Matrix4.M32.set -> void
OpenNefia.Core.Maths.Matrix4.M33.get -> float
OpenNefia.Core.Maths.Matrix4.M33.set -> void
OpenNefia.Core.Maths.Matrix4.M34.get -> float
OpenNefia.Core.Maths.Matrix4.M34.set -> void
OpenNefia.Core.Maths.Matrix4.M41.get -> float
OpenNefia.Core.Maths.Matrix4.M41.set -> void
OpenNefia.Core.Maths.Matrix4.M42.get -> float
OpenNefia.Core.Maths.Matrix4.M42.set -> void
OpenNefia.Core.Maths.Matrix4.M43.get -> float
OpenNefia.Core.Maths.Matrix4.M43.set -> void
OpenNefia.Core.Maths.Matrix4.M44.get -> float
OpenNefia.Core.Maths.Matrix4.M44.set -> void
OpenNefia.Core.Maths.Matrix4.Matrix4() -> void
OpenNefia.Core.Maths.Matrix4.Matrix4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) -> void
OpenNefia.Core.Maths.Matrix4.Matrix4(OpenNefia.Core.Maths.Vector4 row0, OpenNefia.Core.Maths.Vector4 row1, OpenNefia.Core.Maths.Vector4 row2, OpenNefia.Core.Maths.Vector4 row3) -> void
OpenNefia.Core.Maths.Matrix4.Row0 -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Matrix4.Row1 -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Matrix4.Row2 -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Matrix4.Row3 -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Matrix4.Transpose() -> void
OpenNefia.Core.Maths.Quaternion
OpenNefia.Core.Maths.Quaternion.Conjugate() -> void
OpenNefia.Core.Maths.Quaternion.Equals(OpenNefia.Core.Maths.Quaternion other) -> bool
OpenNefia.Core.Maths.Quaternion.Length.get -> float
OpenNefia.Core.Maths.Quaternion.LengthSquared.get -> float
OpenNefia.Core.Maths.Quaternion.Normalize() -> void
OpenNefia.Core.Maths.Quaternion.Quaternion() -> void
OpenNefia.Core.Maths.Quaternion.Quaternion(float x, float y, float z, float w) -> void
OpenNefia.Core.Maths.Quaternion.Quaternion(OpenNefia.Core.Maths.Vector3 v, float w) -> void
OpenNefia.Core.Maths.Quaternion.Quaternion(ref OpenNefia.Core.Maths.Matrix3 matrix) -> void
OpenNefia.Core.Maths.Quaternion.ToAxisAngle() -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Quaternion.ToAxisAngle(out OpenNefia.Core.Maths.Vector3 axis, out float angle) -> void
OpenNefia.Core.Maths.Quaternion.W.get -> float
OpenNefia.Core.Maths.Quaternion.W.set -> void
OpenNefia.Core.Maths.Quaternion.X.get -> float
OpenNefia.Core.Maths.Quaternion.x.get -> float
OpenNefia.Core.Maths.Quaternion.X.set -> void
OpenNefia.Core.Maths.Quaternion.x.set -> void
OpenNefia.Core.Maths.Quaternion.Xyz.get -> OpenNefia.Core.Maths.Vector3
OpenNefia.Core.Maths.Quaternion.Xyz.set -> void
OpenNefia.Core.Maths.Quaternion.Y.get -> float
OpenNefia.Core.Maths.Quaternion.y.get -> float
OpenNefia.Core.Maths.Quaternion.Y.set -> void
OpenNefia.Core.Maths.Quaternion.y.set -> void
OpenNefia.Core.Maths.Quaternion.Z.get -> float
OpenNefia.Core.Maths.Quaternion.z.get -> float
OpenNefia.Core.Maths.Quaternion.Z.set -> void
OpenNefia.Core.Maths.Quaternion.z.set -> void
OpenNefia.Core.Maths.Thickness
OpenNefia.Core.Maths.Thickness.Bottom -> float
OpenNefia.Core.Maths.Thickness.Deconstruct(out float left, out float top, out float right, out float bottom) -> void
OpenNefia.Core.Maths.Thickness.Deflate(in OpenNefia.Core.Maths.UIBox2 box) -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.Maths.Thickness.Deflate(in OpenNefia.Core.Maths.Vector2 size) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Thickness.Equals(in OpenNefia.Core.Maths.Thickness other) -> bool
OpenNefia.Core.Maths.Thickness.Equals(OpenNefia.Core.Maths.Thickness other) -> bool
OpenNefia.Core.Maths.Thickness.Inflate(in OpenNefia.Core.Maths.UIBox2 box) -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.Maths.Thickness.Inflate(in OpenNefia.Core.Maths.Vector2 size) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Thickness.Left -> float
OpenNefia.Core.Maths.Thickness.Right -> float
OpenNefia.Core.Maths.Thickness.SumHorizontal.get -> float
OpenNefia.Core.Maths.Thickness.SumVertical.get -> float
OpenNefia.Core.Maths.Thickness.Thickness() -> void
OpenNefia.Core.Maths.Thickness.Thickness(float horizontal, float vertical) -> void
OpenNefia.Core.Maths.Thickness.Thickness(float left, float top, float right, float bottom) -> void
OpenNefia.Core.Maths.Thickness.Thickness(float uniform) -> void
OpenNefia.Core.Maths.Thickness.Top -> float
OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.Maths.UIBox2.Bottom -> float
OpenNefia.Core.Maths.UIBox2.BottomLeft.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.UIBox2.BottomRight -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.UIBox2.Center.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.UIBox2.Contains(float x, float y) -> bool
OpenNefia.Core.Maths.UIBox2.Contains(OpenNefia.Core.Maths.Vector2 point, bool closedRegion = true) -> bool
OpenNefia.Core.Maths.UIBox2.Encloses(OpenNefia.Core.Maths.UIBox2 inner) -> bool
OpenNefia.Core.Maths.UIBox2.Equals(OpenNefia.Core.Maths.UIBox2 other) -> bool
OpenNefia.Core.Maths.UIBox2.Height.get -> float
OpenNefia.Core.Maths.UIBox2.Intersection(in OpenNefia.Core.Maths.UIBox2 other) -> OpenNefia.Core.Maths.UIBox2?
OpenNefia.Core.Maths.UIBox2.Intersects(OpenNefia.Core.Maths.UIBox2 other) -> bool
OpenNefia.Core.Maths.UIBox2.IsEmpty() -> bool
OpenNefia.Core.Maths.UIBox2.Left -> float
OpenNefia.Core.Maths.UIBox2.Right -> float
OpenNefia.Core.Maths.UIBox2.Scale(float scalar) -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.Maths.UIBox2.Size.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.UIBox2.Top -> float
OpenNefia.Core.Maths.UIBox2.TopLeft -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.UIBox2.TopRight.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.UIBox2.Translated(OpenNefia.Core.Maths.Vector2 point) -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.Maths.UIBox2.UIBox2() -> void
OpenNefia.Core.Maths.UIBox2.UIBox2(float left, float top, float right, float bottom) -> void
OpenNefia.Core.Maths.UIBox2.UIBox2(OpenNefia.Core.Maths.Vector2 leftTop, OpenNefia.Core.Maths.Vector2 rightBottom) -> void
OpenNefia.Core.Maths.UIBox2.Width.get -> float
OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.Maths.UIBox2i.Bottom -> int
OpenNefia.Core.Maths.UIBox2i.BottomLeft.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.UIBox2i.BottomRight -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.UIBox2i.Contains(int x, int y) -> bool
OpenNefia.Core.Maths.UIBox2i.Contains(OpenNefia.Core.Maths.Vector2i point, bool closedRegion = true) -> bool
OpenNefia.Core.Maths.UIBox2i.Equals(OpenNefia.Core.Maths.UIBox2i other) -> bool
OpenNefia.Core.Maths.UIBox2i.Height.get -> int
OpenNefia.Core.Maths.UIBox2i.Intersection(in OpenNefia.Core.Maths.UIBox2i other) -> OpenNefia.Core.Maths.UIBox2i?
OpenNefia.Core.Maths.UIBox2i.Intersects(in OpenNefia.Core.Maths.UIBox2i other) -> bool
OpenNefia.Core.Maths.UIBox2i.IsInBounds(int x, int y) -> bool
OpenNefia.Core.Maths.UIBox2i.IsInBounds(OpenNefia.Core.Maths.UIBox2i other) -> bool
OpenNefia.Core.Maths.UIBox2i.IsInBounds(OpenNefia.Core.Maths.Vector2i point) -> bool
OpenNefia.Core.Maths.UIBox2i.Left -> int
OpenNefia.Core.Maths.UIBox2i.Right -> int
OpenNefia.Core.Maths.UIBox2i.Scale(int amount) -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.Maths.UIBox2i.Size.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.UIBox2i.Top -> int
OpenNefia.Core.Maths.UIBox2i.TopLeft -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.UIBox2i.TopRight.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.UIBox2i.Translated(OpenNefia.Core.Maths.Vector2i point) -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.Maths.UIBox2i.UIBox2i() -> void
OpenNefia.Core.Maths.UIBox2i.UIBox2i(int left, int top, int right, int bottom) -> void
OpenNefia.Core.Maths.UIBox2i.UIBox2i(OpenNefia.Core.Maths.Vector2i topLeft, OpenNefia.Core.Maths.Vector2i bottomRight) -> void
OpenNefia.Core.Maths.UIBox2i.Width.get -> int
OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Vector2.Deconstruct(out float x, out float y) -> void
OpenNefia.Core.Maths.Vector2.Equals(OpenNefia.Core.Maths.Vector2 other) -> bool
OpenNefia.Core.Maths.Vector2.EqualsApprox(OpenNefia.Core.Maths.Vector2 other) -> bool
OpenNefia.Core.Maths.Vector2.EqualsApprox(OpenNefia.Core.Maths.Vector2 other, double tolerance) -> bool
OpenNefia.Core.Maths.Vector2.EqualsApproxPercent(OpenNefia.Core.Maths.Vector2 other, double tolerance = 0.0001) -> bool
OpenNefia.Core.Maths.Vector2.Length.get -> float
OpenNefia.Core.Maths.Vector2.LengthSquared.get -> float
OpenNefia.Core.Maths.Vector2.Normalized.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Vector2.Rotated90DegreesAnticlockwiseWorld.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Vector2.Rotated90DegreesClockwiseWorld.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Vector2.Rounded() -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Vector2.Vector2() -> void
OpenNefia.Core.Maths.Vector2.Vector2(float x, float y) -> void
OpenNefia.Core.Maths.Vector2.X -> float
OpenNefia.Core.Maths.Vector2.Y -> float
OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.Vector2i.BoundWithin(OpenNefia.Core.Maths.UIBox2i bounds) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Maths.Vector2i.Deconstruct(out int x, out int y) -> void
OpenNefia.Core.Maths.Vector2i.Equals(OpenNefia.Core.Maths.Vector2i other) -> bool
OpenNefia.Core.Maths.Vector2i.Length.get -> float
OpenNefia.Core.Maths.Vector2i.LengthSquared.get -> float
OpenNefia.Core.Maths.Vector2i.Vector2i() -> void
OpenNefia.Core.Maths.Vector2i.Vector2i(int x, int y) -> void
OpenNefia.Core.Maths.Vector2i.X -> int
OpenNefia.Core.Maths.Vector2i.Y -> int
OpenNefia.Core.Maths.Vector3
OpenNefia.Core.Maths.Vector3.Deconstruct(out float x, out float y, out float z) -> void
OpenNefia.Core.Maths.Vector3.Equals(OpenNefia.Core.Maths.Vector3 other) -> bool
OpenNefia.Core.Maths.Vector3.Length.get -> float
OpenNefia.Core.Maths.Vector3.LengthSquared.get -> float
OpenNefia.Core.Maths.Vector3.Normalize() -> void
OpenNefia.Core.Maths.Vector3.Vector3() -> void
OpenNefia.Core.Maths.Vector3.Vector3(float value) -> void
OpenNefia.Core.Maths.Vector3.Vector3(float x, float y, float z) -> void
OpenNefia.Core.Maths.Vector3.Vector3(OpenNefia.Core.Maths.Vector2 v) -> void
OpenNefia.Core.Maths.Vector3.Vector3(OpenNefia.Core.Maths.Vector3 v) -> void
OpenNefia.Core.Maths.Vector3.Vector3(OpenNefia.Core.Maths.Vector4 v) -> void
OpenNefia.Core.Maths.Vector3.X -> float
OpenNefia.Core.Maths.Vector3.Xy.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Vector3.Xy.set -> void
OpenNefia.Core.Maths.Vector3.Y -> float
OpenNefia.Core.Maths.Vector3.Z -> float
OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Maths.Vector4.Deconstruct(out float x, out float y, out float z, out float w) -> void
OpenNefia.Core.Maths.Vector4.Equals(OpenNefia.Core.Maths.Vector4 other) -> bool
OpenNefia.Core.Maths.Vector4.Length.get -> float
OpenNefia.Core.Maths.Vector4.LengthSquared.get -> float
OpenNefia.Core.Maths.Vector4.Normalize() -> void
OpenNefia.Core.Maths.Vector4.Vector4() -> void
OpenNefia.Core.Maths.Vector4.Vector4(float value) -> void
OpenNefia.Core.Maths.Vector4.Vector4(float x, float y, float z, float w) -> void
OpenNefia.Core.Maths.Vector4.Vector4(OpenNefia.Core.Maths.Vector2 v) -> void
OpenNefia.Core.Maths.Vector4.Vector4(OpenNefia.Core.Maths.Vector3 v) -> void
OpenNefia.Core.Maths.Vector4.Vector4(OpenNefia.Core.Maths.Vector3 v, float w) -> void
OpenNefia.Core.Maths.Vector4.Vector4(OpenNefia.Core.Maths.Vector4 v) -> void
OpenNefia.Core.Maths.Vector4.W -> float
OpenNefia.Core.Maths.Vector4.X -> float
OpenNefia.Core.Maths.Vector4.Xy.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Maths.Vector4.Xy.set -> void
OpenNefia.Core.Maths.Vector4.Xyz.get -> OpenNefia.Core.Maths.Vector3
OpenNefia.Core.Maths.Vector4.Xyz.set -> void
OpenNefia.Core.Maths.Vector4.Y -> float
OpenNefia.Core.Maths.Vector4.Z -> float
OpenNefia.Core.Profiles.IProfileManager
OpenNefia.Core.Profiles.IProfileManager.CurrentProfile.get -> OpenNefia.Core.ContentPack.IWritableDirProvider!
OpenNefia.Core.Profiles.IProfileManager.CurrentProfileRoot.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Profiles.IProfileManager.Initialize() -> void
OpenNefia.Core.Profiles.ProfileManager
OpenNefia.Core.Profiles.ProfileManager.CurrentProfile.get -> OpenNefia.Core.ContentPack.IWritableDirProvider!
OpenNefia.Core.Profiles.ProfileManager.CurrentProfileRoot.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Profiles.ProfileManager.Initialize() -> void
OpenNefia.Core.Profiles.ProfileManager.ProfileManager() -> void
OpenNefia.Core.Prototypes.ElonaVariants
OpenNefia.Core.Prototypes.EntityPrototype
OpenNefia.Core.Prototypes.EntityPrototype.Abstract.get -> bool
OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry
OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry.ComponentRegistry() -> void
OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry.ComponentRegistry(System.Collections.Generic.Dictionary<string!, OpenNefia.Core.GameObjects.IComponent!>! components) -> void
OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry.GetComponent<T>() -> T!
OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry.HasComponent<T>() -> bool
OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry.TryGetComponent<T>(out T? component) -> bool
OpenNefia.Core.Prototypes.EntityPrototype.Components.get -> OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry!
OpenNefia.Core.Prototypes.EntityPrototype.EntityPrototype() -> void
OpenNefia.Core.Prototypes.EntityPrototype.HspCellObjIds.get -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.HashSet<int>!>!
OpenNefia.Core.Prototypes.EntityPrototype.HspEntityType.get -> string?
OpenNefia.Core.Prototypes.EntityPrototype.HspIds.get -> OpenNefia.Core.Prototypes.HspIds<int>?
OpenNefia.Core.Prototypes.EntityPrototype.ID.get -> string!
OpenNefia.Core.Prototypes.EntityPrototype.MapSavable.get -> bool
OpenNefia.Core.Prototypes.EntityPrototype.MapSavable.set -> void
OpenNefia.Core.Prototypes.EntityPrototype.Parent.get -> string?
OpenNefia.Core.Prototypes.EntityPrototype.TryGetComponent<T>(string! name, out T? component) -> bool
OpenNefia.Core.Prototypes.HandledPrototypeEventArgs
OpenNefia.Core.Prototypes.HandledPrototypeEventArgs.Handled.get -> bool
OpenNefia.Core.Prototypes.HandledPrototypeEventArgs.Handled.set -> void
OpenNefia.Core.Prototypes.HandledPrototypeEventArgs.HandledPrototypeEventArgs() -> void
OpenNefia.Core.Prototypes.HspEntityTypes
OpenNefia.Core.Prototypes.HspIds<T>
OpenNefia.Core.Prototypes.HspIds<T>.GetCanonical() -> T
OpenNefia.Core.Prototypes.HspIds<T>.HspIds(string! hspOrigin) -> void
OpenNefia.Core.Prototypes.HspIds<T>.HspOrigin.get -> string!
OpenNefia.Core.Prototypes.IHspIds<T>
OpenNefia.Core.Prototypes.IHspIds<T>.HspIds.get -> OpenNefia.Core.Prototypes.HspIds<T>?
OpenNefia.Core.Prototypes.IInheritingPrototype
OpenNefia.Core.Prototypes.IInheritingPrototype.Abstract.get -> bool
OpenNefia.Core.Prototypes.IInheritingPrototype.Parent.get -> string?
OpenNefia.Core.Prototypes.IPrototype
OpenNefia.Core.Prototypes.IPrototype.ID.get -> string!
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.HasEventHandlerFor<TProto, TEvent>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> prototypeId) -> bool
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.HasEventHandlerFor<TProto, TEvent>(TProto! prototype) -> bool
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.RaiseEvent(OpenNefia.Core.Prototypes.IPrototype! prototype, object! args) -> void
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.RaiseEvent(OpenNefia.Core.Prototypes.IPrototype! prototype, ref object! args) -> void
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.RaiseEvent<TProto, TEvent>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> prototypeId, ref TEvent args) -> void
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.RaiseEvent<TProto, TEvent>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> prototypeId, TEvent args) -> void
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.RaiseEvent<TProto, TEvent>(TProto prototype, ref TEvent args) -> void
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.RaiseEvent<TProto, TEvent>(TProto prototype, TEvent args) -> void
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.SubscribeEvent<TProto, TEvent>(string! prototypeID, OpenNefia.Core.Prototypes.PrototypeEventHandler<TProto, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.SubscribeEvent<TProto, TEvent>(string! prototypeID, OpenNefia.Core.Prototypes.PrototypeEventRefHandler<TProto, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.Prototypes.IPrototypeDirectedEventBus.UnsubscribeAllEvents<TProto, TEvent>() -> void
OpenNefia.Core.Prototypes.IPrototypeEventBus
OpenNefia.Core.Prototypes.IPrototypeExtendedData
OpenNefia.Core.Prototypes.IPrototypeExtendedData<T>
OpenNefia.Core.Prototypes.IPrototypeManager
OpenNefia.Core.Prototypes.IPrototypeManager.BeforePrototypeLoad -> System.Action<OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!>!
OpenNefia.Core.Prototypes.IPrototypeManager.Clear() -> void
OpenNefia.Core.Prototypes.IPrototypeManager.EnumeratePrototypes(string! variant) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.IPrototypeManager.EnumeratePrototypes(System.Type! type) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.IPrototypeManager.EnumeratePrototypes<T>() -> System.Collections.Generic.IEnumerable<T!>!
OpenNefia.Core.Prototypes.IPrototypeManager.EventBus.get -> OpenNefia.Core.Prototypes.IPrototypeEventBus!
OpenNefia.Core.Prototypes.IPrototypeManager.GetExtendedData(System.Type! protoType, System.Type! extType, string! id) -> OpenNefia.Core.Prototypes.IPrototypeExtendedData!
OpenNefia.Core.Prototypes.IPrototypeManager.GetExtendedData<TProto, TExt>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> id) -> TExt!
OpenNefia.Core.Prototypes.IPrototypeManager.GetVariantType(string! variant) -> System.Type!
OpenNefia.Core.Prototypes.IPrototypeManager.HasExtendedData(System.Type! protoType, System.Type! extType, string! id) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.HasExtendedData<TProto, TExt>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> id) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.HasIndex(System.Type! type, string! id) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.HasIndex<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> id) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.HasVariant(string! variant) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.Index(System.Type! type, string! id) -> OpenNefia.Core.Prototypes.IPrototype!
OpenNefia.Core.Prototypes.IPrototypeManager.Index<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> id) -> T!
OpenNefia.Core.Prototypes.IPrototypeManager.Initialize() -> void
OpenNefia.Core.Prototypes.IPrototypeManager.LoadDirectory(OpenNefia.Core.Utility.ResourcePath! path, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.IPrototypeManager.LoadedData -> System.Action<YamlDotNet.RepresentationModel.YamlStream!, string!>?
OpenNefia.Core.Prototypes.IPrototypeManager.LoadFromStream(System.IO.TextReader! stream, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.IPrototypeManager.LoadString(string! str, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.IPrototypeManager.PrototypesReloaded -> System.Action<OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs!>!
OpenNefia.Core.Prototypes.IPrototypeManager.RegisterEvents() -> void
OpenNefia.Core.Prototypes.IPrototypeManager.RegisterType(System.Type! protoClass) -> void
OpenNefia.Core.Prototypes.IPrototypeManager.RegisterType<T>() -> void
OpenNefia.Core.Prototypes.IPrototypeManager.RemoveString(string! prototypes) -> void
OpenNefia.Core.Prototypes.IPrototypeManager.Resync() -> void
OpenNefia.Core.Prototypes.IPrototypeManager.TryGetExtendedData(System.Type! protoType, System.Type! extType, string! id, out OpenNefia.Core.Prototypes.IPrototypeExtendedData? data) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.TryGetExtendedData<TProto, TExt>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> id, out TExt? data) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.TryGetVariantFrom(OpenNefia.Core.Prototypes.IPrototype! prototype, out string? variant) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.TryGetVariantFrom(System.Type! type, out string? variant) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.TryGetVariantFrom<T>(out string? variant) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.TryGetVariantType(string! variant, out System.Type? prototype) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.TryIndex(System.Type! type, string! id, out OpenNefia.Core.Prototypes.IPrototype? prototype) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.TryIndex<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> id, out T? prototype) -> bool
OpenNefia.Core.Prototypes.IPrototypeManager.ValidateDirectory(OpenNefia.Core.Utility.ResourcePath! path) -> System.Collections.Generic.Dictionary<string!, System.Collections.Generic.HashSet<OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode!>!>!
OpenNefia.Core.Prototypes.ITheme
OpenNefia.Core.Prototypes.ITheme.ID.get -> string!
OpenNefia.Core.Prototypes.ITheme.Overrides.get -> System.Collections.Generic.List<OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!>!
OpenNefia.Core.Prototypes.ITheme.Overrides.set -> void
OpenNefia.Core.Prototypes.IThemeManager
OpenNefia.Core.Prototypes.IThemeManager.ActiveThemes.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.IThemeManager.Clear() -> void
OpenNefia.Core.Prototypes.IThemeManager.EnumerateThemes() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.IThemeManager.HasIndex(string! id) -> bool
OpenNefia.Core.Prototypes.IThemeManager.Index(string! id) -> OpenNefia.Core.Prototypes.ITheme!
OpenNefia.Core.Prototypes.IThemeManager.Initialize() -> void
OpenNefia.Core.Prototypes.IThemeManager.LoadDirectory(OpenNefia.Core.Utility.ResourcePath! path, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.IThemeManager.LoadFromStream(System.IO.TextReader! stream, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.IThemeManager.LoadString(string! str, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.IThemeManager.SetActiveTheme(string! id) -> void
OpenNefia.Core.Prototypes.IThemeManager.Shutdown() -> void
OpenNefia.Core.Prototypes.IThemeManager.TryIndex(string! id, out OpenNefia.Core.Prototypes.ITheme? theme) -> bool
OpenNefia.Core.Prototypes.PrototypeAttribute
OpenNefia.Core.Prototypes.PrototypeAttribute.PrototypeAttribute(string! type, int loadPriority = 1) -> void
OpenNefia.Core.Prototypes.PrototypeAttribute.Type.get -> string!
OpenNefia.Core.Prototypes.PrototypeEventArgs
OpenNefia.Core.Prototypes.PrototypeEventArgs.PrototypeEventArgs() -> void
OpenNefia.Core.Prototypes.PrototypeEventAttribute
OpenNefia.Core.Prototypes.PrototypeEventAttribute.PrototypeEventAttribute(System.Type! prototypeType) -> void
OpenNefia.Core.Prototypes.PrototypeEventAttribute.PrototypeType.get -> System.Type!
OpenNefia.Core.Prototypes.PrototypeEventBus
OpenNefia.Core.Prototypes.PrototypeEventBus.ClearEventTables() -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.Dispose() -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.HasEventHandlerFor<TProto, TEvent>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> prototypeID) -> bool
OpenNefia.Core.Prototypes.PrototypeEventBus.HasEventHandlerFor<TProto, TEvent>(TProto! prototype) -> bool
OpenNefia.Core.Prototypes.PrototypeEventBus.PrototypeEventBus(OpenNefia.Core.Prototypes.IPrototypeManager! protoMan) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.RaiseEvent(OpenNefia.Core.Prototypes.IPrototype! prototype, object! args) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.RaiseEvent(OpenNefia.Core.Prototypes.IPrototype! prototype, ref object! args) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.RaiseEvent<TProto, TEvent>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> prototypeId, ref TEvent args) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.RaiseEvent<TProto, TEvent>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> prototypeId, TEvent args) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.RaiseEvent<TProto, TEvent>(TProto prototype, ref TEvent args) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.RaiseEvent<TProto, TEvent>(TProto prototype, TEvent args) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.SubscribeEvent<TProto, TEvent>(string! prototypeID, OpenNefia.Core.Prototypes.PrototypeEventHandler<TProto, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.SubscribeEvent<TProto, TEvent>(string! prototypeID, OpenNefia.Core.Prototypes.PrototypeEventRefHandler<TProto, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.SubscribeEventRef<TProto, TEvent>(string! prototypeID, OpenNefia.Core.Prototypes.PrototypeEventRefHandler<TProto, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.SubscribeEventValue<TProto, TEvent>(string! prototypeID, OpenNefia.Core.Prototypes.PrototypeEventHandler<TProto, TEvent>! handler, long priority = 0) -> void
OpenNefia.Core.Prototypes.PrototypeEventBus.UnsubscribeAllEvents<TProto, TEvent>() -> void
OpenNefia.Core.Prototypes.PrototypeEventHandler<TProto, TEvent>
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.EntitySystemType.get -> System.Type!
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.EntitySystemType.set -> void
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.EventType.get -> System.Type!
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.EventType.set -> void
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.MethodName.get -> string!
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.MethodName.set -> void
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.Priority.get -> long
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.Priority.set -> void
OpenNefia.Core.Prototypes.PrototypeEventHandlerDef.PrototypeEventHandlerDef() -> void
OpenNefia.Core.Prototypes.PrototypeEventRefHandler<TProto, TEvent>
OpenNefia.Core.Prototypes.PrototypeExt
OpenNefia.Core.Prototypes.PrototypeId<T>
OpenNefia.Core.Prototypes.PrototypeId<T>.CompareTo(OpenNefia.Core.Prototypes.PrototypeId<T!> other) -> int
OpenNefia.Core.Prototypes.PrototypeId<T>.Equals(OpenNefia.Core.Prototypes.PrototypeId<T!> other) -> bool
OpenNefia.Core.Prototypes.PrototypeId<T>.IsValid() -> bool
OpenNefia.Core.Prototypes.PrototypeId<T>.PrototypeId() -> void
OpenNefia.Core.Prototypes.PrototypeId<T>.PrototypeId(string! id) -> void
OpenNefia.Core.Prototypes.PrototypeIdExt
OpenNefia.Core.Prototypes.PrototypeInheritanceTree
OpenNefia.Core.Prototypes.PrototypeInheritanceTree.AddId(string! id, string? parent, bool overwrite = false) -> void
OpenNefia.Core.Prototypes.PrototypeInheritanceTree.BaseNodes.get -> System.Collections.Generic.IReadOnlySet<string!>!
OpenNefia.Core.Prototypes.PrototypeInheritanceTree.Children(string! id) -> System.Collections.Generic.IReadOnlySet<string!>!
OpenNefia.Core.Prototypes.PrototypeInheritanceTree.GetBaseNode(string! id) -> string!
OpenNefia.Core.Prototypes.PrototypeInheritanceTree.GetParent(string! id) -> string?
OpenNefia.Core.Prototypes.PrototypeInheritanceTree.HasId(string! id) -> bool
OpenNefia.Core.Prototypes.PrototypeInheritanceTree.PrototypeInheritanceTree() -> void
OpenNefia.Core.Prototypes.PrototypeInheritanceTree.RemoveId(string! id) -> void
OpenNefia.Core.Prototypes.PrototypeLoadException
OpenNefia.Core.Prototypes.PrototypeLoadException.PrototypeLoadException() -> void
OpenNefia.Core.Prototypes.PrototypeLoadException.PrototypeLoadException(string! message, string? filename = null, YamlDotNet.RepresentationModel.YamlNode? node = null) -> void
OpenNefia.Core.Prototypes.PrototypeLoadException.PrototypeLoadException(string! message, System.Exception! inner, string? filename = null) -> void
OpenNefia.Core.Prototypes.PrototypeLoadException.PrototypeLoadException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.Prototypes.PrototypeManager
OpenNefia.Core.Prototypes.PrototypeManager.BeforePrototypeLoad -> System.Action<OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!>?
OpenNefia.Core.Prototypes.PrototypeManager.Cache.get -> OpenNefia.Core.Prototypes.PrototypeManagerCache!
OpenNefia.Core.Prototypes.PrototypeManager.Clear() -> void
OpenNefia.Core.Prototypes.PrototypeManager.EnumeratePrototypes(string! variant) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.PrototypeManager.EnumeratePrototypes(System.Type! type) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.PrototypeManager.EnumeratePrototypes<T>() -> System.Collections.Generic.IEnumerable<T!>!
OpenNefia.Core.Prototypes.PrototypeManager.EventBus.get -> OpenNefia.Core.Prototypes.IPrototypeEventBus!
OpenNefia.Core.Prototypes.PrototypeManager.GetExtendedData(System.Type! protoType, System.Type! extType, string! id) -> OpenNefia.Core.Prototypes.IPrototypeExtendedData!
OpenNefia.Core.Prototypes.PrototypeManager.GetExtendedData<TProto, TExt>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> id) -> TExt!
OpenNefia.Core.Prototypes.PrototypeManager.GetVariantType(string! variant) -> System.Type!
OpenNefia.Core.Prototypes.PrototypeManager.HasExtendedData(System.Type! protoType, System.Type! extType, string! id) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.HasExtendedData<TProto, TExt>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> id) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.HasIndex(System.Type! type, string! id) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.HasIndex<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> id) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.HasVariant(string! variant) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.Index(System.Type! type, string! id) -> OpenNefia.Core.Prototypes.IPrototype!
OpenNefia.Core.Prototypes.PrototypeManager.Index<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> id) -> T!
OpenNefia.Core.Prototypes.PrototypeManager.Initialize() -> void
OpenNefia.Core.Prototypes.PrototypeManager.LoadDirectory(OpenNefia.Core.Utility.ResourcePath! path, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.PrototypeManager.LoadedData -> System.Action<YamlDotNet.RepresentationModel.YamlStream!, string!>?
OpenNefia.Core.Prototypes.PrototypeManager.LoadFile(OpenNefia.Core.Utility.ResourcePath! file, bool overwrite = false) -> System.Collections.Generic.HashSet<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.PrototypeManager.LoadFromCachedResults(OpenNefia.Core.Prototypes.PrototypeManagerCache! cache) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.PrototypeManager.LoadFromStream(System.IO.TextReader! stream, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.PrototypeManager.LoadString(string! str, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.PrototypeManager.PrototypeManager() -> void
OpenNefia.Core.Prototypes.PrototypeManager.PrototypesReloaded -> System.Action<OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs!>?
OpenNefia.Core.Prototypes.PrototypeManager.PushInheritance(System.Type! type, string! id, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult? baseResult, System.Collections.Generic.HashSet<string!>! changed) -> void
OpenNefia.Core.Prototypes.PrototypeManager.PushInheritance(System.Type! type, string! id, string! child, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult? baseResult, System.Collections.Generic.HashSet<string!>! changed) -> void
OpenNefia.Core.Prototypes.PrototypeManager.RegisterEvents() -> void
OpenNefia.Core.Prototypes.PrototypeManager.RegisterType(System.Type! type) -> void
OpenNefia.Core.Prototypes.PrototypeManager.RegisterType<T>() -> void
OpenNefia.Core.Prototypes.PrototypeManager.RemoveString(string! prototypes) -> void
OpenNefia.Core.Prototypes.PrototypeManager.Resync() -> void
OpenNefia.Core.Prototypes.PrototypeManager.TryGetExtendedData(System.Type! protoType, System.Type! extType, string! id, out OpenNefia.Core.Prototypes.IPrototypeExtendedData? obj) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.TryGetExtendedData<TProto, TExt>(OpenNefia.Core.Prototypes.PrototypeId<TProto!> id, out TExt? data) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.TryGetVariantFrom(OpenNefia.Core.Prototypes.IPrototype! prototype, out string? variant) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.TryGetVariantFrom(System.Type! type, out string? variant) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.TryGetVariantFrom<T>(out string? variant) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.TryGetVariantType(string! variant, out System.Type? prototype) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.TryIndex(System.Type! type, string! id, out OpenNefia.Core.Prototypes.IPrototype? prototype) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.TryIndex<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> id, out T? prototype) -> bool
OpenNefia.Core.Prototypes.PrototypeManager.ValidateDirectory(OpenNefia.Core.Utility.ResourcePath! path) -> System.Collections.Generic.Dictionary<string!, System.Collections.Generic.HashSet<OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode!>!>!
OpenNefia.Core.Prototypes.PrototypeManagerCache
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeEventDefs.get -> System.Collections.Generic.Dictionary<System.Type!, System.Collections.Generic.Dictionary<string!, System.Collections.Generic.List<OpenNefia.Core.Prototypes.PrototypeEventHandlerDef!>!>!>!
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeEventDefs.init -> void
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeExtendedData.get -> System.Collections.Generic.Dictionary<System.Type!, System.Collections.Generic.Dictionary<string!, System.Collections.Generic.Dictionary<System.Type!, OpenNefia.Core.Prototypes.IPrototypeExtendedData!>!>!>!
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeExtendedData.init -> void
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeManagerCache(System.Collections.Generic.Dictionary<System.Type!, System.Collections.Generic.Dictionary<string!, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>!>! PrototypeResults, System.Collections.Generic.Dictionary<System.Type!, System.Collections.Generic.Dictionary<string!, OpenNefia.Core.Prototypes.PrototypeOrderingData!>!>! PrototypeOrdering, System.Collections.Generic.Dictionary<System.Type!, System.Collections.Generic.Dictionary<string!, System.Collections.Generic.Dictionary<System.Type!, OpenNefia.Core.Prototypes.IPrototypeExtendedData!>!>!>! PrototypeExtendedData, System.Collections.Generic.Dictionary<System.Type!, System.Collections.Generic.Dictionary<string!, System.Collections.Generic.List<OpenNefia.Core.Prototypes.PrototypeEventHandlerDef!>!>!>! PrototypeEventDefs) -> void
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeOrdering.get -> System.Collections.Generic.Dictionary<System.Type!, System.Collections.Generic.Dictionary<string!, OpenNefia.Core.Prototypes.PrototypeOrderingData!>!>!
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeOrdering.init -> void
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeResults.get -> System.Collections.Generic.Dictionary<System.Type!, System.Collections.Generic.Dictionary<string!, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>!>!
OpenNefia.Core.Prototypes.PrototypeManagerCache.PrototypeResults.init -> void
OpenNefia.Core.Prototypes.PrototypeOrderingData
OpenNefia.Core.Prototypes.PrototypeOrderingData.After.get -> string![]!
OpenNefia.Core.Prototypes.PrototypeOrderingData.After.init -> void
OpenNefia.Core.Prototypes.PrototypeOrderingData.Before.get -> string![]!
OpenNefia.Core.Prototypes.PrototypeOrderingData.Before.init -> void
OpenNefia.Core.Prototypes.PrototypeOrderingData.PrototypeOrderingData(string![]! Before, string![]! After) -> void
OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs
OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.ByType.get -> System.Collections.Generic.IReadOnlyDictionary<System.Type!, OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.PrototypeChangeSet!>!
OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.ByType.init -> void
OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.PrototypeChangeSet
OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.PrototypeChangeSet.Modified.get -> System.Collections.Generic.IReadOnlyDictionary<string!, OpenNefia.Core.Prototypes.IPrototype!>!
OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.PrototypeChangeSet.Modified.init -> void
OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.PrototypeChangeSet.PrototypeChangeSet(System.Collections.Generic.IReadOnlyDictionary<string!, OpenNefia.Core.Prototypes.IPrototype!>! Modified) -> void
OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.PrototypesReloadedEventArgs(System.Collections.Generic.IReadOnlyDictionary<System.Type!, OpenNefia.Core.Prototypes.PrototypesReloadedEventArgs.PrototypeChangeSet!>! ByType) -> void
OpenNefia.Core.Prototypes.Theme
OpenNefia.Core.Prototypes.Theme.ID.get -> string!
OpenNefia.Core.Prototypes.Theme.Overrides.get -> System.Collections.Generic.List<OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!>!
OpenNefia.Core.Prototypes.Theme.Overrides.set -> void
OpenNefia.Core.Prototypes.Theme.Theme() -> void
OpenNefia.Core.Prototypes.ThemeManager
OpenNefia.Core.Prototypes.ThemeManager.ActiveThemes.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.ThemeManager.Clear() -> void
OpenNefia.Core.Prototypes.ThemeManager.EnumerateThemes() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.ThemeManager.HasIndex(string! id) -> bool
OpenNefia.Core.Prototypes.ThemeManager.Index(string! id) -> OpenNefia.Core.Prototypes.ITheme!
OpenNefia.Core.Prototypes.ThemeManager.Initialize() -> void
OpenNefia.Core.Prototypes.ThemeManager.LoadDirectory(OpenNefia.Core.Utility.ResourcePath! path, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.ThemeManager.LoadFile(OpenNefia.Core.Utility.ResourcePath! file, bool overwrite = false) -> System.Collections.Generic.HashSet<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.ThemeManager.LoadFromStream(System.IO.TextReader! stream, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.ThemeManager.LoadString(string! str, bool overwrite = false) -> System.Collections.Generic.List<OpenNefia.Core.Prototypes.ITheme!>!
OpenNefia.Core.Prototypes.ThemeManager.SetActiveTheme(string! id) -> void
OpenNefia.Core.Prototypes.ThemeManager.Shutdown() -> void
OpenNefia.Core.Prototypes.ThemeManager.ThemeManager() -> void
OpenNefia.Core.Prototypes.ThemeManager.TryIndex(string! id, out OpenNefia.Core.Prototypes.ITheme? theme) -> bool
OpenNefia.Core.Prototypes.UnknownPrototypeException
OpenNefia.Core.Prototypes.UnknownPrototypeException.UnknownPrototypeException(string? prototype, System.Type? type) -> void
OpenNefia.Core.Prototypes.UnknownPrototypeException.UnknownPrototypeException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
OpenNefia.Core.Random.IRandom
OpenNefia.Core.Random.IRandom.ClearPushedSeeds() -> void
OpenNefia.Core.Random.IRandom.Next() -> int
OpenNefia.Core.Random.IRandom.Next(int maxValue) -> int
OpenNefia.Core.Random.IRandom.Next(int minValue, int maxValue) -> int
OpenNefia.Core.Random.IRandom.NextBytes(byte[]! buffer) -> void
OpenNefia.Core.Random.IRandom.NextDouble() -> double
OpenNefia.Core.Random.IRandom.NextFloat() -> float
OpenNefia.Core.Random.IRandom.NextFloat(float maxValue) -> float
OpenNefia.Core.Random.IRandom.NextFloat(float minValue, float maxValue) -> float
OpenNefia.Core.Random.IRandom.PopSeed() -> void
OpenNefia.Core.Random.IRandom.PushSeed(int seed) -> void
OpenNefia.Core.Random.IRandom.RandomizeSeed() -> void
OpenNefia.Core.Random.RandomExtensions
OpenNefia.Core.Random.SysRandom
OpenNefia.Core.Random.SysRandom.ClearPushedSeeds() -> void
OpenNefia.Core.Random.SysRandom.Next() -> int
OpenNefia.Core.Random.SysRandom.Next(int maxValue) -> int
OpenNefia.Core.Random.SysRandom.Next(int minValue, int maxValue) -> int
OpenNefia.Core.Random.SysRandom.NextBytes(byte[]! buffer) -> void
OpenNefia.Core.Random.SysRandom.NextDouble() -> double
OpenNefia.Core.Random.SysRandom.NextFloat() -> float
OpenNefia.Core.Random.SysRandom.PopSeed() -> void
OpenNefia.Core.Random.SysRandom.PushSeed(int seed) -> void
OpenNefia.Core.Random.SysRandom.RandomizeSeed() -> void
OpenNefia.Core.Random.SysRandom.SysRandom() -> void
OpenNefia.Core.Reflection.IReflectionManager
OpenNefia.Core.Reflection.IReflectionManager.Assemblies.get -> System.Collections.Generic.IReadOnlyList<System.Reflection.Assembly!>!
OpenNefia.Core.Reflection.IReflectionManager.FindAllTypes() -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.IReflectionManager.FindTypesWithAttribute(System.Type! attributeType) -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.IReflectionManager.FindTypesWithAttribute<T>() -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.IReflectionManager.GetAllChildren(System.Type! baseType, bool inclusive = false) -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.IReflectionManager.GetAllChildren<T>(bool inclusive = false) -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.IReflectionManager.GetType(string! name) -> System.Type?
OpenNefia.Core.Reflection.IReflectionManager.LoadAssemblies(params System.Reflection.Assembly![]! args) -> void
OpenNefia.Core.Reflection.IReflectionManager.LoadAssemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly!>! assemblies) -> void
OpenNefia.Core.Reflection.IReflectionManager.LooseGetType(string! name) -> System.Type!
OpenNefia.Core.Reflection.IReflectionManager.OnAssemblyAdded -> System.EventHandler<OpenNefia.Core.Reflection.ReflectionUpdateEventArgs!>?
OpenNefia.Core.Reflection.IReflectionManager.TryLooseGetType(string! name, out System.Type? type) -> bool
OpenNefia.Core.Reflection.IReflectionManager.TryParseEnumReference(string! reference, out System.Enum? enum) -> bool
OpenNefia.Core.Reflection.IReflectionManager.YamlTypeTagLookup(System.Type! baseType, string! typeName) -> System.Type?
OpenNefia.Core.Reflection.ReflectAttribute
OpenNefia.Core.Reflection.ReflectAttribute.Discoverable.get -> bool
OpenNefia.Core.Reflection.ReflectAttribute.ReflectAttribute(bool discoverable) -> void
OpenNefia.Core.Reflection.ReflectionManager
OpenNefia.Core.Reflection.ReflectionManager.Assemblies.get -> System.Collections.Generic.IReadOnlyList<System.Reflection.Assembly!>!
OpenNefia.Core.Reflection.ReflectionManager.FindAllTypes() -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.ReflectionManager.FindTypesWithAttribute(System.Type! attributeType) -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.ReflectionManager.FindTypesWithAttribute<T>() -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.ReflectionManager.GetAllChildren(System.Type! baseType, bool inclusive = false) -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.ReflectionManager.GetAllChildren<T>(bool inclusive = false) -> System.Collections.Generic.IEnumerable<System.Type!>!
OpenNefia.Core.Reflection.ReflectionManager.GetType(string! name) -> System.Type?
OpenNefia.Core.Reflection.ReflectionManager.LoadAssemblies(params System.Reflection.Assembly![]! args) -> void
OpenNefia.Core.Reflection.ReflectionManager.LoadAssemblies(System.Collections.Generic.IEnumerable<System.Reflection.Assembly!>! assemblies) -> void
OpenNefia.Core.Reflection.ReflectionManager.LooseGetType(string! name) -> System.Type!
OpenNefia.Core.Reflection.ReflectionManager.OnAssemblyAdded -> System.EventHandler<OpenNefia.Core.Reflection.ReflectionUpdateEventArgs!>?
OpenNefia.Core.Reflection.ReflectionManager.ReflectionManager() -> void
OpenNefia.Core.Reflection.ReflectionManager.TryLooseGetType(string! name, out System.Type? type) -> bool
OpenNefia.Core.Reflection.ReflectionManager.TryParseEnumReference(string! reference, out System.Enum? enum) -> bool
OpenNefia.Core.Reflection.ReflectionManager.YamlTypeTagLookup(System.Type! baseType, string! typeName) -> System.Type?
OpenNefia.Core.Reflection.ReflectionUpdateEventArgs
OpenNefia.Core.Reflection.ReflectionUpdateEventArgs.ReflectionUpdateEventArgs(OpenNefia.Core.Reflection.IReflectionManager! reflectionManager) -> void
OpenNefia.Core.Rendering.AnimFrame
OpenNefia.Core.Rendering.AnimFrame.AnimFrame() -> void
OpenNefia.Core.Rendering.AnimFrame.Duration -> float
OpenNefia.Core.Rendering.AnimFrame.TileId -> string!
OpenNefia.Core.Rendering.AssetDrawable
OpenNefia.Core.Rendering.AssetDrawable.AssetDrawable(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> proto, OpenNefia.Core.Maths.Color? color = null, bool centered = false, float rotation = 0, string? regionId = null, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetDrawable.AssetDrawable(OpenNefia.Core.Rendering.IAssetInstance! instance, OpenNefia.Core.Maths.Color? color = null, bool centered = false, float rotation = 0, string? regionId = null, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetDrawable.Centered.get -> bool
OpenNefia.Core.Rendering.AssetDrawable.Centered.set -> void
OpenNefia.Core.Rendering.AssetDrawable.Color.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Rendering.AssetDrawable.Color.set -> void
OpenNefia.Core.Rendering.AssetDrawable.Instance.get -> OpenNefia.Core.Rendering.IAssetInstance!
OpenNefia.Core.Rendering.AssetDrawable.Instance.set -> void
OpenNefia.Core.Rendering.AssetDrawable.OriginOffset.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Rendering.AssetDrawable.OriginOffset.set -> void
OpenNefia.Core.Rendering.AssetDrawable.RegionId.get -> string?
OpenNefia.Core.Rendering.AssetDrawable.RegionId.set -> void
OpenNefia.Core.Rendering.AssetDrawable.Rotation.get -> float
OpenNefia.Core.Rendering.AssetDrawable.Rotation.set -> void
OpenNefia.Core.Rendering.AssetInstance
OpenNefia.Core.Rendering.AssetInstance.Asset.get -> OpenNefia.Core.Rendering.AssetPrototype!
OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart
OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart.AssetBatchPart(string! id, int pixelX, int pixelY) -> void
OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart.PixelPosition.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart.PixelPosition.set -> void
OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart.PixelX.get -> int
OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart.PixelY.get -> int
OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart.RegionId.get -> string!
OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart.RegionId.set -> void
OpenNefia.Core.Rendering.AssetInstance.AssetInstance(OpenNefia.Core.Rendering.AssetPrototype! asset, Love.Image! image, OpenNefia.Core.Rendering.AssetRegions! regions) -> void
OpenNefia.Core.Rendering.AssetInstance.CountX.get -> uint
OpenNefia.Core.Rendering.AssetInstance.CountY.get -> uint
OpenNefia.Core.Rendering.AssetInstance.Dispose() -> void
OpenNefia.Core.Rendering.AssetInstance.Draw(float uiScale, float vx, float vy, float? vwidth = null, float? vheight = null, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.Draw(float uiScale, Love.Quad! quad, float vx, float vy, float? vwidth = null, float? vheight = null, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.Draw(float uiScale, OpenNefia.Core.Maths.UIBox2 box, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.DrawRegion(float uiScale, string! regionId, float vx, float vy, float? vwidth = null, float? vheight = null, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.DrawRegionUnscaled(Love.Quad! quad, float x, float y, float width = 0, float height = 0, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.DrawRegionUnscaled(Love.Quad! quad, OpenNefia.Core.Maths.UIBox2 box, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.DrawRegionUnscaled(OpenNefia.Core.Maths.UIBox2 quad, OpenNefia.Core.Maths.UIBox2 box, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.DrawRegionUnscaled(string! regionId, float x, float y, float width = 0, float height = 0, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.DrawUnscaled(float x, float y, float width = 0, float height = 0, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.DrawUnscaled(OpenNefia.Core.Maths.UIBox2 box, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.AssetInstance.MakeBatch(System.Collections.Generic.List<OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart!>! parts, int maxSprites = 2048) -> Love.SpriteBatch!
OpenNefia.Core.Rendering.AssetInstance.MakeSpriteBatch(int count, Love.SpriteBatchUsage usage) -> Love.SpriteBatch!
OpenNefia.Core.Rendering.AssetInstance.PixelHeight.get -> int
OpenNefia.Core.Rendering.AssetInstance.PixelSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.AssetInstance.PixelWidth.get -> int
OpenNefia.Core.Rendering.AssetInstance.Regions.get -> System.Collections.Generic.IReadOnlyDictionary<string!, OpenNefia.Core.Maths.UIBox2i>!
OpenNefia.Core.Rendering.AssetInstance.VirtualHeight(float uiScale) -> float
OpenNefia.Core.Rendering.AssetInstance.VirtualSize(float uiScale) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Rendering.AssetInstance.VirtualSize(float uiScale, string! regionID) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Rendering.AssetInstance.VirtualWidth(float uiScale) -> float
OpenNefia.Core.Rendering.AssetManager
OpenNefia.Core.Rendering.AssetManager.AssetManager() -> void
OpenNefia.Core.Rendering.AssetManager.GetAsset(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> id) -> OpenNefia.Core.Rendering.IAssetInstance!
OpenNefia.Core.Rendering.AssetManager.GetSizedAsset(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> id, OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Rendering.IAssetInstance!
OpenNefia.Core.Rendering.AssetManager.LoadAsset(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> id) -> void
OpenNefia.Core.Rendering.AssetManager.PreloadAssets() -> void
OpenNefia.Core.Rendering.AssetPrototype
OpenNefia.Core.Rendering.AssetPrototype.AssetPrototype() -> void
OpenNefia.Core.Rendering.AssetPrototype.CountX -> uint
OpenNefia.Core.Rendering.AssetPrototype.CountY -> uint
OpenNefia.Core.Rendering.AssetPrototype.ID.get -> string!
OpenNefia.Core.Rendering.AssetPrototype.Image -> OpenNefia.Core.Rendering.AssetSpecifier!
OpenNefia.Core.Rendering.AssetPrototype.Regions -> OpenNefia.Core.Rendering.AssetRegions!
OpenNefia.Core.Rendering.AssetPrototype.RegionSpecifier -> OpenNefia.Core.Rendering.IRegionSpecifier?
OpenNefia.Core.Rendering.AssetPrototype.RequiresSizeArgument.get -> bool
OpenNefia.Core.Rendering.AssetRegions
OpenNefia.Core.Rendering.AssetRegions.AssetRegions() -> void
OpenNefia.Core.Rendering.Assets
OpenNefia.Core.Rendering.AssetSpecifier
OpenNefia.Core.Rendering.AssetSpecifier.AssetSpecifier() -> void
OpenNefia.Core.Rendering.AssetSpecifier.Filepath -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Rendering.AssetSpecifier.Filter -> OpenNefia.Core.Rendering.ImageFilter?
OpenNefia.Core.Rendering.AssetSpecifier.KeyColor.get -> OpenNefia.Core.Maths.Color?
OpenNefia.Core.Rendering.AssetSpecifier.KeyColor.set -> void
OpenNefia.Core.Rendering.AssetSpecifier.Region -> OpenNefia.Core.Maths.UIBox2i?
OpenNefia.Core.Rendering.AtlasNames
OpenNefia.Core.Rendering.AtlasRegion
OpenNefia.Core.Rendering.AtlasRegion.atlasName.get -> string!
OpenNefia.Core.Rendering.AtlasRegion.atlasName.init -> void
OpenNefia.Core.Rendering.AtlasRegion.AtlasRegion(string! atlasName, string! id, OpenNefia.Core.Rendering.TileSpecifier! spec, bool hasOverhang = false) -> void
OpenNefia.Core.Rendering.AtlasRegion.hasOverhang.get -> bool
OpenNefia.Core.Rendering.AtlasRegion.hasOverhang.init -> void
OpenNefia.Core.Rendering.AtlasRegion.id.get -> string!
OpenNefia.Core.Rendering.AtlasRegion.id.init -> void
OpenNefia.Core.Rendering.AtlasRegion.spec.get -> OpenNefia.Core.Rendering.TileSpecifier!
OpenNefia.Core.Rendering.AtlasRegion.spec.init -> void
OpenNefia.Core.Rendering.AtlasTile
OpenNefia.Core.Rendering.AtlasTile.AtlasTile() -> void
OpenNefia.Core.Rendering.AtlasTile.AtlasTile(Love.Quad! quad, int yOffset = 0, bool hasOverhang = false) -> void
OpenNefia.Core.Rendering.AtlasTile.HasOverhang -> bool
OpenNefia.Core.Rendering.AtlasTile.Quad -> Love.Quad!
OpenNefia.Core.Rendering.AtlasTile.YOffset -> int
OpenNefia.Core.Rendering.BaseGlobalDrawable
OpenNefia.Core.Rendering.BaseGlobalDrawable.BaseGlobalDrawable() -> void
OpenNefia.Core.Rendering.BaseGlobalDrawable.IsFinished.get -> bool
OpenNefia.Core.Rendering.BaseGlobalDrawable.IsFinished.set -> void
OpenNefia.Core.Rendering.BaseMapDrawable
OpenNefia.Core.Rendering.BaseMapDrawable.BaseMapDrawable() -> void
OpenNefia.Core.Rendering.BaseMapDrawable.IsFinished.get -> bool
OpenNefia.Core.Rendering.BaseMapDrawable.IsFinished.set -> void
OpenNefia.Core.Rendering.BaseMapDrawable.Map.get -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Rendering.BaseMapDrawable.ScreenLocalPos.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.BaseMapDrawable.ScreenLocalPos.set -> void
OpenNefia.Core.Rendering.CaptionRegions
OpenNefia.Core.Rendering.CaptionRegions.CaptionRegions() -> void
OpenNefia.Core.Rendering.CaptionRegions.GetRegions(OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Rendering.AssetRegions!
OpenNefia.Core.Rendering.ChipPrototype
OpenNefia.Core.Rendering.ChipPrototype.ChipPrototype() -> void
OpenNefia.Core.Rendering.ChipPrototype.GetAtlasRegions() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Rendering.AtlasRegion!>!
OpenNefia.Core.Rendering.ChipPrototype.Group.get -> string!
OpenNefia.Core.Rendering.ChipPrototype.ID.get -> string!
OpenNefia.Core.Rendering.ChipPrototype.Image.get -> OpenNefia.Core.Rendering.TileSpecifier!
OpenNefia.Core.Rendering.ChipPrototype.Offset.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.ChipPrototype.StackYOffset.get -> int
OpenNefia.Core.Rendering.DrawablesSystem
OpenNefia.Core.Rendering.DrawablesSystem.ClearDrawables(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Rendering.EntityDrawablesComponent? drawables = null) -> void
OpenNefia.Core.Rendering.DrawablesSystem.DrawablesSystem() -> void
OpenNefia.Core.Rendering.DrawablesSystem.RegisterDrawable(OpenNefia.Core.GameObjects.EntityUid entity, string! key, OpenNefia.Core.Rendering.EntityDrawableEntry! drawable, OpenNefia.Core.Rendering.EntityDrawablesComponent? drawables = null) -> void
OpenNefia.Core.Rendering.DrawablesSystem.TryGetDrawable(OpenNefia.Core.GameObjects.EntityUid entity, string! key, out OpenNefia.Core.Rendering.EntityDrawableEntry? drawable, OpenNefia.Core.Rendering.EntityDrawablesComponent? drawables = null) -> bool
OpenNefia.Core.Rendering.DrawablesSystem.UnregisterDrawable(OpenNefia.Core.GameObjects.EntityUid entity, string! key, OpenNefia.Core.Rendering.EntityDrawablesComponent? drawables = null) -> void
OpenNefia.Core.Rendering.EntityDrawableEntry
OpenNefia.Core.Rendering.EntityDrawableEntry.Drawable.get -> OpenNefia.Core.Rendering.IEntityDrawable!
OpenNefia.Core.Rendering.EntityDrawableEntry.Drawable.set -> void
OpenNefia.Core.Rendering.EntityDrawableEntry.EntityDrawableEntry(OpenNefia.Core.Rendering.IEntityDrawable! drawable, bool hidesChip, int zOrder = 0) -> void
OpenNefia.Core.Rendering.EntityDrawableEntry.HidesChip.get -> bool
OpenNefia.Core.Rendering.EntityDrawableEntry.HidesChip.set -> void
OpenNefia.Core.Rendering.EntityDrawableEntry.ZOrder.get -> int
OpenNefia.Core.Rendering.EntityDrawableEntry.ZOrder.set -> void
OpenNefia.Core.Rendering.EntityDrawablesComponent
OpenNefia.Core.Rendering.EntityDrawablesComponent.EntityDrawables.get -> System.Collections.Generic.Dictionary<string!, OpenNefia.Core.Rendering.EntityDrawableEntry!>!
OpenNefia.Core.Rendering.EntityDrawablesComponent.EntityDrawablesComponent() -> void
OpenNefia.Core.Rendering.FontManager
OpenNefia.Core.Rendering.FontManager.Clear() -> void
OpenNefia.Core.Rendering.FontManager.FontManager() -> void
OpenNefia.Core.Rendering.FontManager.GetFont(OpenNefia.Core.Rendering.FontSpec! spec) -> Love.Font!
OpenNefia.Core.Rendering.FontManager.GetFont(OpenNefia.Core.Rendering.FontSpec! spec, float uiScale) -> Love.Font!
OpenNefia.Core.Rendering.FontManager.GetRasterizer(OpenNefia.Core.Rendering.FontSpec! spec) -> Love.Rasterizer!
OpenNefia.Core.Rendering.FontManager.GetRasterizer(OpenNefia.Core.Rendering.FontSpec! spec, float uiScale) -> Love.Rasterizer!
OpenNefia.Core.Rendering.FontManager.Initialize() -> void
OpenNefia.Core.Rendering.FontSpec
OpenNefia.Core.Rendering.FontSpec.BgColor.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Rendering.FontSpec.Color.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Rendering.FontSpec.FontSpec() -> void
OpenNefia.Core.Rendering.FontSpec.FontSpec(int size = 14, int smallSize = 12, OpenNefia.Core.Maths.Color? color = null, OpenNefia.Core.Maths.Color? bgColor = null, OpenNefia.Core.Rendering.FontStyle style = OpenNefia.Core.Rendering.FontStyle.None) -> void
OpenNefia.Core.Rendering.FontSpec.FontSpec(OpenNefia.Core.Rendering.FontSpec! other) -> void
OpenNefia.Core.Rendering.FontSpec.LoveFont.get -> Love.Font!
OpenNefia.Core.Rendering.FontSpec.LoveRasterizer.get -> Love.Rasterizer!
OpenNefia.Core.Rendering.FontSpec.Size.get -> int
OpenNefia.Core.Rendering.FontSpec.SmallSize.get -> int
OpenNefia.Core.Rendering.FontSpec.Style.get -> OpenNefia.Core.Rendering.FontStyle
OpenNefia.Core.Rendering.FontSpec.WithColor(OpenNefia.Core.Maths.Color color) -> OpenNefia.Core.Rendering.FontSpec!
OpenNefia.Core.Rendering.FontStyle
OpenNefia.Core.Rendering.FontStyle.Bold = 1 -> OpenNefia.Core.Rendering.FontStyle
OpenNefia.Core.Rendering.FontStyle.Italic = 2 -> OpenNefia.Core.Rendering.FontStyle
OpenNefia.Core.Rendering.FontStyle.None = 0 -> OpenNefia.Core.Rendering.FontStyle
OpenNefia.Core.Rendering.FontStyle.Strikethrough = 8 -> OpenNefia.Core.Rendering.FontStyle
OpenNefia.Core.Rendering.FontStyle.Underline = 4 -> OpenNefia.Core.Rendering.FontStyle
OpenNefia.Core.Rendering.FovRadius
OpenNefia.Core.Rendering.FrameCounter
OpenNefia.Core.Rendering.FrameCounter.Frame.get -> float
OpenNefia.Core.Rendering.FrameCounter.FrameCounter(float delaySecs, int maxFrames) -> void
OpenNefia.Core.Rendering.FrameCounter.FrameCounter(float delaySecs, uint maxFrames) -> void
OpenNefia.Core.Rendering.FrameCounter.FrameDelaySecs.get -> float
OpenNefia.Core.Rendering.FrameCounter.FrameInt.get -> int
OpenNefia.Core.Rendering.FrameCounter.IsFinished.get -> bool
OpenNefia.Core.Rendering.FrameCounter.MaxFrames.get -> int
OpenNefia.Core.Rendering.FrameCounter.Update(float dt) -> void
OpenNefia.Core.Rendering.GetMapObjectMemoryEventArgs
OpenNefia.Core.Rendering.GetMapObjectMemoryEventArgs.GetMapObjectMemoryEventArgs(OpenNefia.Core.Rendering.MapObjectMemory! memory) -> void
OpenNefia.Core.Rendering.GetMapObjectMemoryEventArgs.Memory -> OpenNefia.Core.Rendering.MapObjectMemory!
OpenNefia.Core.Rendering.GlobalDrawablesManager
OpenNefia.Core.Rendering.GlobalDrawablesManager.Clear() -> void
OpenNefia.Core.Rendering.GlobalDrawablesManager.Enqueue(OpenNefia.Core.Rendering.IGlobalDrawable! drawable, OpenNefia.Core.Maths.Vector2 screenPos, int zOrder = 0) -> void
OpenNefia.Core.Rendering.GlobalDrawablesManager.GlobalDrawablesManager() -> void
OpenNefia.Core.Rendering.GlobalDrawablesManager.HasActiveDrawables() -> bool
OpenNefia.Core.Rendering.GlobalDrawablesManager.WaitForDrawables() -> void
OpenNefia.Core.Rendering.GraphicsEx
OpenNefia.Core.Rendering.GraphicsS
OpenNefia.Core.Rendering.IAssetInstance
OpenNefia.Core.Rendering.IAssetInstance.Asset.get -> OpenNefia.Core.Rendering.AssetPrototype!
OpenNefia.Core.Rendering.IAssetInstance.CountX.get -> uint
OpenNefia.Core.Rendering.IAssetInstance.CountY.get -> uint
OpenNefia.Core.Rendering.IAssetInstance.Draw(float uiScale, float vx, float vy, float? vwidth = null, float? vheight = null, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.Draw(float uiScale, Love.Quad! quad, float vx, float vy, float? vwidth = null, float? vheight = null, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.Draw(float uiScale, OpenNefia.Core.Maths.UIBox2 box, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.DrawRegion(float uiScale, string! regionId, float vx, float vy, float? vwidth = null, float? vheight = null, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.DrawRegionUnscaled(Love.Quad! quad, float x, float y, float width = 0, float height = 0, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.DrawRegionUnscaled(Love.Quad! quad, OpenNefia.Core.Maths.UIBox2 box, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.DrawRegionUnscaled(OpenNefia.Core.Maths.UIBox2 quad, OpenNefia.Core.Maths.UIBox2 box, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.DrawRegionUnscaled(string! regionId, float x = 0, float y = 0, float width = 0, float height = 0, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.DrawUnscaled(float x, float y, float width = 0, float height = 0, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.DrawUnscaled(OpenNefia.Core.Maths.UIBox2 box, bool centered = false, float rotationRads = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
OpenNefia.Core.Rendering.IAssetInstance.MakeBatch(System.Collections.Generic.List<OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart!>! parts, int maxSprites = 2048) -> Love.SpriteBatch!
OpenNefia.Core.Rendering.IAssetInstance.MakeSpriteBatch(int count, Love.SpriteBatchUsage usage) -> Love.SpriteBatch!
OpenNefia.Core.Rendering.IAssetInstance.PixelHeight.get -> int
OpenNefia.Core.Rendering.IAssetInstance.PixelSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.IAssetInstance.PixelWidth.get -> int
OpenNefia.Core.Rendering.IAssetInstance.Regions.get -> System.Collections.Generic.IReadOnlyDictionary<string!, OpenNefia.Core.Maths.UIBox2i>!
OpenNefia.Core.Rendering.IAssetInstance.VirtualHeight(float uiScale) -> float
OpenNefia.Core.Rendering.IAssetInstance.VirtualSize(float uiScale) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Rendering.IAssetInstance.VirtualSize(float uiScale, string! regionID) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Rendering.IAssetInstance.VirtualWidth(float uiScale) -> float
OpenNefia.Core.Rendering.IAssetManager
OpenNefia.Core.Rendering.IAssetManager.GetAsset(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> id) -> OpenNefia.Core.Rendering.IAssetInstance!
OpenNefia.Core.Rendering.IAssetManager.GetSizedAsset(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> id, OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Rendering.IAssetInstance!
OpenNefia.Core.Rendering.IAssetManager.LoadAsset(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> id) -> void
OpenNefia.Core.Rendering.IAssetManager.PreloadAssets() -> void
OpenNefia.Core.Rendering.IAtlasRegionProvider
OpenNefia.Core.Rendering.IAtlasRegionProvider.GetAtlasRegions() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Rendering.AtlasRegion!>!
OpenNefia.Core.Rendering.ICoords
OpenNefia.Core.Rendering.ICoords.BoundDrawPosition(OpenNefia.Core.Maths.Vector2i screenPos, OpenNefia.Core.Maths.Vector2i tiledSize, OpenNefia.Core.Maths.Vector2i viewportSize) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.ICoords.GetTiledSize(OpenNefia.Core.Maths.Vector2i screenSize) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.ICoords.ScreenToTile(OpenNefia.Core.Maths.Vector2i screenPos) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.ICoords.TileSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.ICoords.TileToScreen(OpenNefia.Core.Maths.Vector2i tilePos) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.IEntityDrawable
OpenNefia.Core.Rendering.IEntityDrawable.Draw(float x, float y, float scaleX, float scaleY) -> void
OpenNefia.Core.Rendering.IEntityDrawable.Update(float dt) -> void
OpenNefia.Core.Rendering.IEntityDrawablesSystem
OpenNefia.Core.Rendering.IEntityDrawablesSystem.ClearDrawables(OpenNefia.Core.GameObjects.EntityUid entity, OpenNefia.Core.Rendering.EntityDrawablesComponent? drawables = null) -> void
OpenNefia.Core.Rendering.IEntityDrawablesSystem.RegisterDrawable(OpenNefia.Core.GameObjects.EntityUid entity, string! key, OpenNefia.Core.Rendering.EntityDrawableEntry! drawable, OpenNefia.Core.Rendering.EntityDrawablesComponent? drawables = null) -> void
OpenNefia.Core.Rendering.IEntityDrawablesSystem.TryGetDrawable(OpenNefia.Core.GameObjects.EntityUid entity, string! key, out OpenNefia.Core.Rendering.EntityDrawableEntry? drawable, OpenNefia.Core.Rendering.EntityDrawablesComponent? drawables = null) -> bool
OpenNefia.Core.Rendering.IEntityDrawablesSystem.UnregisterDrawable(OpenNefia.Core.GameObjects.EntityUid entity, string! key, OpenNefia.Core.Rendering.EntityDrawablesComponent? drawables = null) -> void
OpenNefia.Core.Rendering.IFontManager
OpenNefia.Core.Rendering.IFontManager.Clear() -> void
OpenNefia.Core.Rendering.IFontManager.GetFont(OpenNefia.Core.Rendering.FontSpec! spec) -> Love.Font!
OpenNefia.Core.Rendering.IFontManager.GetFont(OpenNefia.Core.Rendering.FontSpec! spec, float uiScale) -> Love.Font!
OpenNefia.Core.Rendering.IFontManager.GetRasterizer(OpenNefia.Core.Rendering.FontSpec! spec) -> Love.Rasterizer!
OpenNefia.Core.Rendering.IFontManager.GetRasterizer(OpenNefia.Core.Rendering.FontSpec! spec, float uiScale) -> Love.Rasterizer!
OpenNefia.Core.Rendering.IFontManager.Initialize() -> void
OpenNefia.Core.Rendering.IGlobalDrawable
OpenNefia.Core.Rendering.IGlobalDrawable.CanEnqueue() -> bool
OpenNefia.Core.Rendering.IGlobalDrawable.IsFinished.get -> bool
OpenNefia.Core.Rendering.IGlobalDrawable.OnEnqueue() -> void
OpenNefia.Core.Rendering.IGlobalDrawable.OnThemeSwitched() -> void
OpenNefia.Core.Rendering.IGlobalDrawablesManager
OpenNefia.Core.Rendering.IGlobalDrawablesManager.Clear() -> void
OpenNefia.Core.Rendering.IGlobalDrawablesManager.Enqueue(OpenNefia.Core.Rendering.IGlobalDrawable! drawable, OpenNefia.Core.Maths.Vector2 screenPos, int zOrder = 0) -> void
OpenNefia.Core.Rendering.IGlobalDrawablesManager.HasActiveDrawables() -> bool
OpenNefia.Core.Rendering.IGlobalDrawablesManager.WaitForDrawables() -> void
OpenNefia.Core.Rendering.ImageFilter
OpenNefia.Core.Rendering.ImageFilter.Anisotropy -> int
OpenNefia.Core.Rendering.ImageFilter.ImageFilter() -> void
OpenNefia.Core.Rendering.ImageFilter.ImageFilter(Love.FilterMode min, Love.FilterMode mag, int anisotropy) -> void
OpenNefia.Core.Rendering.ImageFilter.Mag -> Love.FilterMode
OpenNefia.Core.Rendering.ImageFilter.Min -> Love.FilterMode
OpenNefia.Core.Rendering.ImageLoader
OpenNefia.Core.Rendering.IMapDrawable
OpenNefia.Core.Rendering.IMapDrawable.CanEnqueue() -> bool
OpenNefia.Core.Rendering.IMapDrawable.IsFinished.get -> bool
OpenNefia.Core.Rendering.IMapDrawable.Map.get -> OpenNefia.Core.Maps.IMap!
OpenNefia.Core.Rendering.IMapDrawable.OnEnqueue() -> void
OpenNefia.Core.Rendering.IMapDrawable.OnThemeSwitched() -> void
OpenNefia.Core.Rendering.IMapDrawable.ScreenLocalPos.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.IMapDrawable.ScreenLocalPos.set -> void
OpenNefia.Core.Rendering.IMapDrawablesManager
OpenNefia.Core.Rendering.IMapDrawablesManager.Clear() -> void
OpenNefia.Core.Rendering.IMapDrawablesManager.Enqueue(OpenNefia.Core.Rendering.IMapDrawable! drawable, OpenNefia.Core.GameObjects.EntityUid ent, int zOrder = 0) -> void
OpenNefia.Core.Rendering.IMapDrawablesManager.Enqueue(OpenNefia.Core.Rendering.IMapDrawable! drawable, OpenNefia.Core.Maps.MapCoordinates pos, int zOrder = 0) -> void
OpenNefia.Core.Rendering.IMapDrawablesManager.HasActiveDrawables() -> bool
OpenNefia.Core.Rendering.IMapDrawablesManager.WaitForDrawables() -> void
OpenNefia.Core.Rendering.IMapRenderer
OpenNefia.Core.Rendering.IMapRenderer.GetTileLayer<T>() -> T
OpenNefia.Core.Rendering.IMapRenderer.Initialize() -> void
OpenNefia.Core.Rendering.IMapRenderer.RefreshAllLayers() -> void
OpenNefia.Core.Rendering.IMapRenderer.RegisterTileLayers() -> void
OpenNefia.Core.Rendering.IMapRenderer.SetMap(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Rendering.IMapRenderer.SetTileLayerEnabled(System.Type! type, bool enabled) -> void
OpenNefia.Core.Rendering.IMapRenderer.SetTileLayerEnabled<T>(bool enabled) -> void
OpenNefia.Core.Rendering.IRegionSpecifier
OpenNefia.Core.Rendering.IRegionSpecifier.GetRegions(OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Rendering.AssetRegions!
OpenNefia.Core.Rendering.IShaderInstance
OpenNefia.Core.Rendering.IShaderInstance.LoveShader.get -> Love.Shader!
OpenNefia.Core.Rendering.IsometricCoords
OpenNefia.Core.Rendering.IsometricCoords.BoundDrawPosition(OpenNefia.Core.Maths.Vector2i screenPos, OpenNefia.Core.Maths.Vector2i tiledSize, OpenNefia.Core.Maths.Vector2i viewportSize) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.IsometricCoords.GetTiledSize(OpenNefia.Core.Maths.Vector2i screenSize) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.IsometricCoords.IsometricCoords() -> void
OpenNefia.Core.Rendering.IsometricCoords.ScreenToTile(OpenNefia.Core.Maths.Vector2i screenPos) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.IsometricCoords.TileSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.IsometricCoords.TileToScreen(OpenNefia.Core.Maths.Vector2i tilePos) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.ITileAtlasManager
OpenNefia.Core.Rendering.ITileAtlasManager.GetAtlas(string! name) -> OpenNefia.Core.Rendering.TileAtlas!
OpenNefia.Core.Rendering.ITileAtlasManager.Initialize() -> void
OpenNefia.Core.Rendering.ITileAtlasManager.LoadAtlases() -> void
OpenNefia.Core.Rendering.ITileAtlasManager.ThemeSwitched -> System.Action?
OpenNefia.Core.Rendering.ITileDefinition
OpenNefia.Core.Rendering.ITileDefinition.AssignTileIndex(int id) -> void
OpenNefia.Core.Rendering.ITileDefinition.ID.get -> string!
OpenNefia.Core.Rendering.ITileDefinition.TileIndex.get -> int
OpenNefia.Core.Rendering.LoveExtensions
OpenNefia.Core.Rendering.MapDrawablesManager
OpenNefia.Core.Rendering.MapDrawablesManager.Clear() -> void
OpenNefia.Core.Rendering.MapDrawablesManager.Enqueue(OpenNefia.Core.Rendering.IMapDrawable! drawable, OpenNefia.Core.GameObjects.EntityUid ent, int zOrder = 0) -> void
OpenNefia.Core.Rendering.MapDrawablesManager.Enqueue(OpenNefia.Core.Rendering.IMapDrawable! drawable, OpenNefia.Core.Maps.MapCoordinates pos, int zOrder = 0) -> void
OpenNefia.Core.Rendering.MapDrawablesManager.HasActiveDrawables() -> bool
OpenNefia.Core.Rendering.MapDrawablesManager.MapDrawablesManager() -> void
OpenNefia.Core.Rendering.MapDrawablesManager.WaitForDrawables() -> void
OpenNefia.Core.Rendering.MapObjectMemory
OpenNefia.Core.Rendering.MapObjectMemory.AtlasIndex -> string!
OpenNefia.Core.Rendering.MapObjectMemory.Color -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Rendering.MapObjectMemory.HideWhenOutOfSight -> bool
OpenNefia.Core.Rendering.MapObjectMemory.IsVisible -> bool
OpenNefia.Core.Rendering.MapObjectMemory.MapObjectMemory() -> void
OpenNefia.Core.Rendering.MapObjectMemory.ObjectUid -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Rendering.MapObjectMemory.Rotation -> float
OpenNefia.Core.Rendering.MapObjectMemory.ScreenOffset -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.MapObjectMemory.ShadowType -> OpenNefia.Core.Rendering.ShadowType
OpenNefia.Core.Rendering.MapObjectMemory.ZOrder -> int
OpenNefia.Core.Rendering.MapObjectMemoryStore
OpenNefia.Core.Rendering.MapObjectMemoryStore.AllMemory.get -> System.Collections.Generic.IReadOnlyDictionary<int, OpenNefia.Core.Rendering.MapObjectMemory!>!
OpenNefia.Core.Rendering.MapObjectMemoryStore.ForgetObjects(OpenNefia.Core.Maths.Vector2i coords) -> void
OpenNefia.Core.Rendering.MapObjectMemoryStore.GetOrCreateMemory() -> OpenNefia.Core.Rendering.MapObjectMemory!
OpenNefia.Core.Rendering.MapObjectMemoryStore.HideObjects(OpenNefia.Core.Maths.Vector2i coords) -> void
OpenNefia.Core.Rendering.MapObjectMemoryStore.MapObjectMemoryStore() -> void
OpenNefia.Core.Rendering.MapObjectMemoryStore.MapObjectMemoryStore(int width, int height) -> void
OpenNefia.Core.Rendering.MapObjectMemoryStore.RedrawAll() -> void
OpenNefia.Core.Rendering.MapObjectMemoryStore.RevealObjects(OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maths.Vector2i pos, OpenNefia.Core.GameObjects.IEntityManager! entityManager) -> void
OpenNefia.Core.Rendering.MapRenderer
OpenNefia.Core.Rendering.MapRenderer.GetTileLayer<T>() -> T
OpenNefia.Core.Rendering.MapRenderer.Initialize() -> void
OpenNefia.Core.Rendering.MapRenderer.MapRenderer() -> void
OpenNefia.Core.Rendering.MapRenderer.RefreshAllLayers() -> void
OpenNefia.Core.Rendering.MapRenderer.RegisterTileLayers() -> void
OpenNefia.Core.Rendering.MapRenderer.SetMap(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Rendering.MapRenderer.SetTileLayerEnabled(System.Type! type, bool enabled) -> void
OpenNefia.Core.Rendering.MapRenderer.SetTileLayerEnabled<T>(bool enabled) -> void
OpenNefia.Core.Rendering.RectanglePacker
OpenNefia.Core.Rendering.RectanglePacker.Pack(int rectangleWidth, int rectangleHeight, out int outX, out int outY) -> bool
OpenNefia.Core.Rendering.RectanglePacker.RectanglePacker(int packingAreaWidth, int packingAreaHeight) -> void
OpenNefia.Core.Rendering.RegisterTileLayerAttribute
OpenNefia.Core.Rendering.RegisterTileLayerAttribute.RegisterTileLayerAttribute(System.Type![]? renderBefore = null, System.Type![]? renderAfter = null, bool enabledAtStartup = true) -> void
OpenNefia.Core.Rendering.ShaderInstance
OpenNefia.Core.Rendering.ShaderInstance.LoveShader.get -> Love.Shader!
OpenNefia.Core.Rendering.ShaderInstance.ShaderInstance() -> void
OpenNefia.Core.Rendering.ShadowType
OpenNefia.Core.Rendering.ShadowType.DropShadow = 2 -> OpenNefia.Core.Rendering.ShadowType
OpenNefia.Core.Rendering.ShadowType.None = 0 -> OpenNefia.Core.Rendering.ShadowType
OpenNefia.Core.Rendering.ShadowType.Normal = 1 -> OpenNefia.Core.Rendering.ShadowType
OpenNefia.Core.Rendering.StaticRegions
OpenNefia.Core.Rendering.StaticRegions.GetRegions(OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Rendering.AssetRegions!
OpenNefia.Core.Rendering.StaticRegions.Regions.get -> System.Collections.Generic.Dictionary<string!, OpenNefia.Core.Maths.UIBox2i>!
OpenNefia.Core.Rendering.StaticRegions.StaticRegions() -> void
OpenNefia.Core.Rendering.TileAtlas
OpenNefia.Core.Rendering.TileAtlas.Dispose() -> void
OpenNefia.Core.Rendering.TileAtlas.GetTileSize(OpenNefia.Core.Rendering.TileSpecifier! spec) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.TileAtlas.Image.get -> Love.Image!
OpenNefia.Core.Rendering.TileAtlas.TileAtlas(Love.Image! image, System.Collections.Generic.Dictionary<string!, OpenNefia.Core.Rendering.AtlasTile!>! atlasTiles) -> void
OpenNefia.Core.Rendering.TileAtlas.TryGetTile(OpenNefia.Core.Rendering.TileSpecifier! spec, out OpenNefia.Core.Rendering.AtlasTile? tile) -> bool
OpenNefia.Core.Rendering.TileAtlas.TryGetTile(string! tileId, out OpenNefia.Core.Rendering.AtlasTile? tile) -> bool
OpenNefia.Core.Rendering.TileAtlasBatch
OpenNefia.Core.Rendering.TileAtlasBatch.Add(float uiScale, string! tileId, float x, float y, float? width = null, float? height = null, Love.Color? color = null, bool centered = false, float rotationRads = 0) -> void
OpenNefia.Core.Rendering.TileAtlasBatch.BatchPixelHeight.get -> int
OpenNefia.Core.Rendering.TileAtlasBatch.BatchPixelWidth.get -> int
OpenNefia.Core.Rendering.TileAtlasBatch.Clear() -> void
OpenNefia.Core.Rendering.TileAtlasBatch.Dispose() -> void
OpenNefia.Core.Rendering.TileAtlasBatch.Draw(float uiScale, float x, float y, float? width = null, float? height = null, OpenNefia.Core.Maths.Color? color = null) -> void
OpenNefia.Core.Rendering.TileAtlasBatch.Flush() -> void
OpenNefia.Core.Rendering.TileAtlasBatch.GetTileSize(OpenNefia.Core.Rendering.TileSpecifier! spec) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Rendering.TileAtlasBatch.OnThemeSwitched() -> void
OpenNefia.Core.Rendering.TileAtlasBatch.TileAtlasBatch(string! atlasName) -> void
OpenNefia.Core.Rendering.TileAtlasFactory
OpenNefia.Core.Rendering.TileAtlasFactory.Build() -> OpenNefia.Core.Rendering.TileAtlas!
OpenNefia.Core.Rendering.TileAtlasFactory.Dispose() -> void
OpenNefia.Core.Rendering.TileAtlasFactory.LoadTile(OpenNefia.Core.Rendering.TileSpecifier! tile) -> void
OpenNefia.Core.Rendering.TileAtlasFactory.LoadTiles(System.Collections.Generic.IEnumerable<OpenNefia.Core.Rendering.TileSpecifier!>! tiles) -> OpenNefia.Core.Rendering.TileAtlasFactory!
OpenNefia.Core.Rendering.TileAtlasFactory.TileAtlasFactory(OpenNefia.Core.ResourceManagement.IResourceCache! resourceCache, int tileWidth = 48, int tileHeight = 48, int tileCountX = 48, int tileCountY = 48) -> void
OpenNefia.Core.Rendering.TileAtlasFactory._tileHeight.get -> int
OpenNefia.Core.Rendering.TileAtlasFactory._tileWidth.get -> int
OpenNefia.Core.Rendering.TileAtlasManager
OpenNefia.Core.Rendering.TileAtlasManager.GetAtlas(string! atlasName) -> OpenNefia.Core.Rendering.TileAtlas!
OpenNefia.Core.Rendering.TileAtlasManager.Initialize() -> void
OpenNefia.Core.Rendering.TileAtlasManager.LoadAtlases() -> void
OpenNefia.Core.Rendering.TileAtlasManager.ThemeSwitched -> System.Action?
OpenNefia.Core.Rendering.TileAtlasManager.TileAtlasManager() -> void
OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer
OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.BaseTileLayer() -> void
OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.Map -> OpenNefia.Core.Maps.IMap?
OpenNefia.Core.Rendering.TileDrawLayers.ITileLayer
OpenNefia.Core.Rendering.TileDrawLayers.ITileLayer.Initialize() -> void
OpenNefia.Core.Rendering.TileDrawLayers.ITileLayer.OnThemeSwitched() -> void
OpenNefia.Core.Rendering.TileDrawLayers.ITileLayer.RedrawAll() -> void
OpenNefia.Core.Rendering.TileDrawLayers.ITileLayer.RedrawDirtyTiles(System.Collections.Generic.HashSet<OpenNefia.Core.Maths.Vector2i>! dirtyTilesThisTurn) -> void
OpenNefia.Core.Rendering.TileDrawLayers.ITileLayer.SetMap(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer
OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.RedrawMapObjects() -> void
OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.TileAndChipTileLayer() -> void
OpenNefia.Core.Rendering.TileSpecifier
OpenNefia.Core.Rendering.TileSpecifier.AtlasIndex.get -> string!
OpenNefia.Core.Rendering.TileSpecifier.CountX.get -> int
OpenNefia.Core.Rendering.TileSpecifier.Filepath.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Rendering.TileSpecifier.HasOverhang.get -> bool
OpenNefia.Core.Rendering.TileSpecifier.Region.get -> OpenNefia.Core.Maths.UIBox2i?
OpenNefia.Core.Rendering.TileSpecifier.TileSpecifier() -> void
OpenNefia.Core.Rendering.TopicWindowRegions
OpenNefia.Core.Rendering.TopicWindowRegions.GetRegions(OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Rendering.AssetRegions!
OpenNefia.Core.Rendering.TopicWindowRegions.TopicWindowRegions() -> void
OpenNefia.Core.Rendering.WallTileShadows
OpenNefia.Core.Rendering.WallTileShadows.Clear() -> void
OpenNefia.Core.Rendering.WallTileShadows.Initialize(OpenNefia.Core.Rendering.ICoords! coords) -> void
OpenNefia.Core.Rendering.WallTileShadows.SetMap(OpenNefia.Core.Maps.IMap! map) -> void
OpenNefia.Core.Rendering.WallTileShadows.SetTile(OpenNefia.Core.Maths.Vector2i coords, OpenNefia.Core.Maps.TilePrototype! tile) -> void
OpenNefia.Core.Rendering.WallTileShadows.WallTileShadows() -> void
OpenNefia.Core.Rendering.WindowRegions
OpenNefia.Core.Rendering.WindowRegions.GetRegions(OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Rendering.AssetRegions!
OpenNefia.Core.Rendering.WindowRegions.WindowRegions() -> void
OpenNefia.Core.ResourceManagement.BaseResource
OpenNefia.Core.ResourceManagement.BaseResource.BaseResource() -> void
OpenNefia.Core.ResourceManagement.ImageLoadParameters
OpenNefia.Core.ResourceManagement.ImageLoadParameters.ImageLoadParameters() -> void
OpenNefia.Core.ResourceManagement.ImageLoadParameters.KeyColor.get -> OpenNefia.Core.Maths.Color?
OpenNefia.Core.ResourceManagement.ImageLoadParameters.KeyColor.set -> void
OpenNefia.Core.ResourceManagement.IResourceCache
OpenNefia.Core.ResourceManagement.IResourceCache.CacheResource<T>(OpenNefia.Core.Utility.ResourcePath! path, T! resource) -> void
OpenNefia.Core.ResourceManagement.IResourceCache.CacheResource<T>(string! path, T! resource) -> void
OpenNefia.Core.ResourceManagement.IResourceCache.GetAllResources<T>() -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<OpenNefia.Core.Utility.ResourcePath!, T!>>!
OpenNefia.Core.ResourceManagement.IResourceCache.GetFallback<T>() -> T!
OpenNefia.Core.ResourceManagement.IResourceCache.GetResource<T>(OpenNefia.Core.Utility.ResourcePath! path, bool useFallback = true) -> T!
OpenNefia.Core.ResourceManagement.IResourceCache.GetResource<T>(string! path, bool useFallback = true) -> T!
OpenNefia.Core.ResourceManagement.IResourceCache.ReloadResource<T>(OpenNefia.Core.Utility.ResourcePath! path) -> void
OpenNefia.Core.ResourceManagement.IResourceCache.ReloadResource<T>(string! path) -> void
OpenNefia.Core.ResourceManagement.IResourceCache.TryGetResource<T>(OpenNefia.Core.Utility.ResourcePath! path, out T? resource) -> bool
OpenNefia.Core.ResourceManagement.IResourceCache.TryGetResource<T>(string! path, out T? resource) -> bool
OpenNefia.Core.ResourceManagement.LoveFileDataResource
OpenNefia.Core.ResourceManagement.LoveFileDataResource.FileData.get -> Love.FileData!
OpenNefia.Core.ResourceManagement.LoveFileDataResource.LoveFileDataResource() -> void
OpenNefia.Core.ResourceManagement.LoveImageResource
OpenNefia.Core.ResourceManagement.LoveImageResource.Image.get -> Love.Image!
OpenNefia.Core.ResourceManagement.LoveImageResource.ImageData.get -> Love.ImageData!
OpenNefia.Core.ResourceManagement.LoveImageResource.LoveImageResource() -> void
OpenNefia.Core.SaveGames.AssemblyMetaData
OpenNefia.Core.SaveGames.AssemblyMetaData.AssemblyMetaData() -> void
OpenNefia.Core.SaveGames.AssemblyMetaData.FullName.get -> string!
OpenNefia.Core.SaveGames.AssemblyMetaData.FullName.set -> void
OpenNefia.Core.SaveGames.AssemblyMetaData.InformationalVersion.get -> string?
OpenNefia.Core.SaveGames.AssemblyMetaData.InformationalVersion.set -> void
OpenNefia.Core.SaveGames.AssemblyMetaData.Version.get -> System.Version!
OpenNefia.Core.SaveGames.AssemblyMetaData.Version.set -> void
OpenNefia.Core.SaveGames.GameLoadedDelegate
OpenNefia.Core.SaveGames.GameSavedDelegate
OpenNefia.Core.SaveGames.ISaveGameDirProvider
OpenNefia.Core.SaveGames.ISaveGameDirProvider.ClearTemp() -> void
OpenNefia.Core.SaveGames.ISaveGameDirProvider.Commit() -> void
OpenNefia.Core.SaveGames.ISaveGameHandle
OpenNefia.Core.SaveGames.ISaveGameHandle.Files.get -> OpenNefia.Core.SaveGames.ISaveGameDirProvider!
OpenNefia.Core.SaveGames.ISaveGameHandle.Header.get -> OpenNefia.Core.SaveGames.SaveGameHeader!
OpenNefia.Core.SaveGames.ISaveGameHandle.LastWriteTime.get -> System.DateTime
OpenNefia.Core.SaveGames.ISaveGameHandle.LastWriteTime.set -> void
OpenNefia.Core.SaveGames.ISaveGameHandle.SaveDirectory.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.SaveGames.ISaveGameHandle.SaveFormatVersion.get -> int
OpenNefia.Core.SaveGames.ISaveGameManager
OpenNefia.Core.SaveGames.ISaveGameManager.AllSaves.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.SaveGames.ISaveGameHandle!>!
OpenNefia.Core.SaveGames.ISaveGameManager.ContainsSave(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> bool
OpenNefia.Core.SaveGames.ISaveGameManager.CreateSave(OpenNefia.Core.Utility.ResourcePath! saveDirectory, OpenNefia.Core.SaveGames.SaveGameHeader! header) -> OpenNefia.Core.SaveGames.ISaveGameHandle!
OpenNefia.Core.SaveGames.ISaveGameManager.CurrentSave.get -> OpenNefia.Core.SaveGames.ISaveGameHandle?
OpenNefia.Core.SaveGames.ISaveGameManager.CurrentSave.set -> void
OpenNefia.Core.SaveGames.ISaveGameManager.DeleteSave(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.SaveGames.ISaveGameManager.RescanSaves() -> void
OpenNefia.Core.SaveGames.ISaveGameSerializer
OpenNefia.Core.SaveGames.ISaveGameSerializer.BeforeGameSaved -> OpenNefia.Core.SaveGames.GameSavedDelegate!
OpenNefia.Core.SaveGames.ISaveGameSerializer.InitializeSaveGame(string! name) -> OpenNefia.Core.SaveGames.ISaveGameHandle!
OpenNefia.Core.SaveGames.ISaveGameSerializer.LoadGame(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.SaveGames.ISaveGameSerializer.OnGameLoaded -> OpenNefia.Core.SaveGames.GameLoadedDelegate!
OpenNefia.Core.SaveGames.ISaveGameSerializer.OnSaveDataInitialize -> OpenNefia.Core.SaveGames.SaveDataInitializeDelegate!
OpenNefia.Core.SaveGames.ISaveGameSerializer.ResetGameState() -> void
OpenNefia.Core.SaveGames.ISaveGameSerializer.SaveGame(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.SaveGames.RegisterSaveDataAttribute
OpenNefia.Core.SaveGames.RegisterSaveDataAttribute.Key.get -> string!
OpenNefia.Core.SaveGames.RegisterSaveDataAttribute.RegisterSaveDataAttribute(string! key) -> void
OpenNefia.Core.SaveGames.SaveDataInitializeDelegate
OpenNefia.Core.SaveGames.SaveGameConstants
OpenNefia.Core.SaveGames.SaveGameHeader
OpenNefia.Core.SaveGames.SaveGameHeader.AssemblyMetaData.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.SaveGames.AssemblyMetaData!>!
OpenNefia.Core.SaveGames.SaveGameHeader.Name.get -> string!
OpenNefia.Core.SaveGames.SaveGameHeader.SaveGameHeader() -> void
OpenNefia.Core.SaveGames.SaveGameHeader.SaveGameHeader(string! name) -> void
OpenNefia.Core.SaveGames.SaveGameHeader.SaveGameHeader(string! name, System.Collections.Generic.List<OpenNefia.Core.SaveGames.AssemblyMetaData!>! assemblyVersions) -> void
OpenNefia.Core.SaveGames.SaveGameManager
OpenNefia.Core.SaveGames.SaveGameManager.AllSaves.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.SaveGames.ISaveGameHandle!>!
OpenNefia.Core.SaveGames.SaveGameManager.ContainsSave(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> bool
OpenNefia.Core.SaveGames.SaveGameManager.CreateSave(OpenNefia.Core.Utility.ResourcePath! saveDirectory, OpenNefia.Core.SaveGames.SaveGameHeader! header) -> OpenNefia.Core.SaveGames.ISaveGameHandle!
OpenNefia.Core.SaveGames.SaveGameManager.CurrentSave.get -> OpenNefia.Core.SaveGames.ISaveGameHandle?
OpenNefia.Core.SaveGames.SaveGameManager.CurrentSave.set -> void
OpenNefia.Core.SaveGames.SaveGameManager.DeleteSave(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.SaveGames.SaveGameManager.Initialize() -> void
OpenNefia.Core.SaveGames.SaveGameManager.RescanSaves() -> void
OpenNefia.Core.SaveGames.SaveGameManager.SaveGameManager() -> void
OpenNefia.Core.SaveGames.SaveGameSerializer
OpenNefia.Core.SaveGames.SaveGameSerializer.BeforeGameSaved -> OpenNefia.Core.SaveGames.GameSavedDelegate?
OpenNefia.Core.SaveGames.SaveGameSerializer.Initialize() -> void
OpenNefia.Core.SaveGames.SaveGameSerializer.InitializeSaveGame(string! name) -> OpenNefia.Core.SaveGames.ISaveGameHandle!
OpenNefia.Core.SaveGames.SaveGameSerializer.LoadGame(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.SaveGames.SaveGameSerializer.LoadGlobalData(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.SaveGames.SaveGameSerializer.OnGameLoaded -> OpenNefia.Core.SaveGames.GameLoadedDelegate?
OpenNefia.Core.SaveGames.SaveGameSerializer.OnSaveDataInitialize -> OpenNefia.Core.SaveGames.SaveDataInitializeDelegate?
OpenNefia.Core.SaveGames.SaveGameSerializer.ResetGameState() -> void
OpenNefia.Core.SaveGames.SaveGameSerializer.SaveGame(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.SaveGames.SaveGameSerializer.SaveGameSerializer() -> void
OpenNefia.Core.SaveGames.SaveGameSerializer.SaveGlobalData(OpenNefia.Core.SaveGames.ISaveGameHandle! save) -> void
OpenNefia.Core.Serialization.ConstantsForAttribute
OpenNefia.Core.Serialization.ConstantsForAttribute.ConstantsForAttribute(System.Type! tag) -> void
OpenNefia.Core.Serialization.ConstantsForAttribute.Tag.get -> System.Type!
OpenNefia.Core.Serialization.FlagsForAttribute
OpenNefia.Core.Serialization.FlagsForAttribute.FlagsForAttribute(System.Type! tag) -> void
OpenNefia.Core.Serialization.FlagsForAttribute.Tag.get -> System.Type!
OpenNefia.Core.Serialization.InvalidMappingException
OpenNefia.Core.Serialization.InvalidMappingException.InvalidMappingException(string! msg) -> void
OpenNefia.Core.Serialization.ISelfSerialize
OpenNefia.Core.Serialization.ISelfSerialize.Deserialize(string! value) -> void
OpenNefia.Core.Serialization.ISelfSerialize.Serialize() -> string!
OpenNefia.Core.Serialization.ISerializationHooks
OpenNefia.Core.Serialization.ISerializationHooks.AfterCompare(object? other) -> bool
OpenNefia.Core.Serialization.ISerializationHooks.AfterDeserialization() -> void
OpenNefia.Core.Serialization.ISerializationHooks.BeforeSerialization() -> void
OpenNefia.Core.Serialization.Manager.Attributes.AlwaysPushInheritanceAttribute
OpenNefia.Core.Serialization.Manager.Attributes.AlwaysPushInheritanceAttribute.AlwaysPushInheritanceAttribute() -> void
OpenNefia.Core.Serialization.Manager.Attributes.CopyByRefAttribute
OpenNefia.Core.Serialization.Manager.Attributes.CopyByRefAttribute.CopyByRefAttribute() -> void
OpenNefia.Core.Serialization.Manager.Attributes.DataDefinitionAttribute
OpenNefia.Core.Serialization.Manager.Attributes.DataDefinitionAttribute.DataDefinitionAttribute() -> void
OpenNefia.Core.Serialization.Manager.Attributes.DataFieldAttribute
OpenNefia.Core.Serialization.Manager.Attributes.DataFieldAttribute.DataFieldAttribute(string? tag = null, bool readOnly = false, int priority = 1, bool required = false, System.Type? customTypeSerializer = null, bool noCompare = false) -> void
OpenNefia.Core.Serialization.Manager.Attributes.ImplicitDataDefinitionForInheritorsAttribute
OpenNefia.Core.Serialization.Manager.Attributes.ImplicitDataDefinitionForInheritorsAttribute.ImplicitDataDefinitionForInheritorsAttribute() -> void
OpenNefia.Core.Serialization.Manager.Attributes.MeansDataDefinitionAttribute
OpenNefia.Core.Serialization.Manager.Attributes.MeansDataDefinitionAttribute.MeansDataDefinitionAttribute() -> void
OpenNefia.Core.Serialization.Manager.Attributes.NeverPushInheritanceAttribute
OpenNefia.Core.Serialization.Manager.Attributes.NeverPushInheritanceAttribute.NeverPushInheritanceAttribute() -> void
OpenNefia.Core.Serialization.Manager.Attributes.TypeSerializerAttribute
OpenNefia.Core.Serialization.Manager.Attributes.TypeSerializerAttribute.TypeSerializerAttribute() -> void
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.CanCallWith(object! obj) -> bool
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.Compare(object! objA, object! objB, OpenNefia.Core.Serialization.Manager.ISerializationManager! serialization, OpenNefia.Core.Serialization.Manager.ISerializationContext? context) -> bool
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.Copy(object! source, object! target, OpenNefia.Core.Serialization.Manager.ISerializationManager! serialization, OpenNefia.Core.Serialization.Manager.ISerializationContext? context) -> object!
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.DataDefinition(System.Type! type) -> void
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.Populate(object! target, OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry![]! fields) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.Populate(object! target, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! mapping, OpenNefia.Core.Serialization.Manager.ISerializationManager! serialization, OpenNefia.Core.Serialization.Manager.ISerializationContext? context, bool skipHook) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.Serialize(object! obj, OpenNefia.Core.Serialization.Manager.ISerializationManager! serialization, OpenNefia.Core.Serialization.Manager.ISerializationContext? context, bool alwaysWrite) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.TryGetDuplicates(out string![]! duplicates) -> bool
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.Type.get -> System.Type!
OpenNefia.Core.Serialization.Manager.Definition.DataDefinition.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serialization, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! mapping, OpenNefia.Core.Serialization.Manager.ISerializationContext? context) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior
OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior.Always = 1 -> OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior
OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior.Default = 0 -> OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior
OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior.Never = 2 -> OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior
OpenNefia.Core.Serialization.Manager.InvalidNodeTypeException
OpenNefia.Core.Serialization.Manager.InvalidNodeTypeException.InvalidNodeTypeException() -> void
OpenNefia.Core.Serialization.Manager.InvalidNodeTypeException.InvalidNodeTypeException(string? message) -> void
OpenNefia.Core.Serialization.Manager.IPopulateDefaultValues
OpenNefia.Core.Serialization.Manager.IPopulateDefaultValues.PopulateDefaultValues() -> void
OpenNefia.Core.Serialization.Manager.ISerializationContext
OpenNefia.Core.Serialization.Manager.ISerializationContext.TypeComparers.get -> System.Collections.Generic.Dictionary<System.Type!, object!>!
OpenNefia.Core.Serialization.Manager.ISerializationContext.TypeCopiers.get -> System.Collections.Generic.Dictionary<System.Type!, object!>!
OpenNefia.Core.Serialization.Manager.ISerializationContext.TypeReaders.get -> System.Collections.Generic.Dictionary<(System.Type!, System.Type!), object!>!
OpenNefia.Core.Serialization.Manager.ISerializationContext.TypeValidators.get -> System.Collections.Generic.Dictionary<(System.Type!, System.Type!), object!>!
OpenNefia.Core.Serialization.Manager.ISerializationContext.TypeWriters.get -> System.Collections.Generic.Dictionary<System.Type!, object!>!
OpenNefia.Core.Serialization.Manager.ISerializationManager
OpenNefia.Core.Serialization.Manager.ISerializationManager.CanSerializeType(System.Type! type) -> bool
OpenNefia.Core.Serialization.Manager.ISerializationManager.Compare(object? left, object? right, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> bool
OpenNefia.Core.Serialization.Manager.ISerializationManager.Copy(object? source, object? target, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object?
OpenNefia.Core.Serialization.Manager.ISerializationManager.Copy<T>(T? source, T? target, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
OpenNefia.Core.Serialization.Manager.ISerializationManager.CopyWithTypeSerializer(System.Type! typeSerializer, object? source, object? target, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object?
OpenNefia.Core.Serialization.Manager.ISerializationManager.CreateCopy(object? source, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object?
OpenNefia.Core.Serialization.Manager.ISerializationManager.CreateCopy<T>(T? source, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
OpenNefia.Core.Serialization.Manager.ISerializationManager.CreateDataDefinition<T>(OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry![]! fields, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.ISerializationManager.GetConstantTypeFromTag(System.Type! tagType) -> System.Type!
OpenNefia.Core.Serialization.Manager.ISerializationManager.GetDefinition(System.Type! type) -> OpenNefia.Core.Serialization.Manager.Definition.DataDefinition?
OpenNefia.Core.Serialization.Manager.ISerializationManager.GetDefinition<T>() -> OpenNefia.Core.Serialization.Manager.Definition.DataDefinition?
OpenNefia.Core.Serialization.Manager.ISerializationManager.GetFlagHighestBit(System.Type! tagType) -> int
OpenNefia.Core.Serialization.Manager.ISerializationManager.GetFlagTypeFromTag(System.Type! tagType) -> System.Type!
OpenNefia.Core.Serialization.Manager.ISerializationManager.HasDataDefinition(System.Type! type) -> bool
OpenNefia.Core.Serialization.Manager.ISerializationManager.Initialize() -> void
OpenNefia.Core.Serialization.Manager.ISerializationManager.PopulateDataDefinition(object! obj, OpenNefia.Core.Serialization.Manager.Result.IDeserializedDefinition! definition, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.ISerializationManager.PopulateDataDefinition<T>(T obj, OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>! definition, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.ISerializationManager.Read(System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.ISerializationManager.ReadValue(System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object?
OpenNefia.Core.Serialization.Manager.ISerializationManager.ReadValue<T>(OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
OpenNefia.Core.Serialization.Manager.ISerializationManager.ReadValueCast<T>(System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
OpenNefia.Core.Serialization.Manager.ISerializationManager.ReadWithTypeSerializer(System.Type! value, System.Type! serializer, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.ISerializationManager.Shutdown() -> void
OpenNefia.Core.Serialization.Manager.ISerializationManager.TryGetDefinition(System.Type! type, out OpenNefia.Core.Serialization.Manager.Definition.DataDefinition? dataDefinition) -> bool
OpenNefia.Core.Serialization.Manager.ISerializationManager.ValidateNode(System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.ISerializationManager.ValidateNode<T>(OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.ISerializationManager.ValidateNodeWith(System.Type! type, System.Type! typeSerializer, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.ISerializationManager.ValidateNodeWith<TType, TSerializer, TNode>(TNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.ISerializationManager.WriteValue(System.Type! type, object? value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Manager.ISerializationManager.WriteValue<T>(T value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Manager.ISerializationManager.WriteWithTypeSerializer(System.Type! type, System.Type! serializer, object? value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Manager.RequiredDataFieldNotProvidedException
OpenNefia.Core.Serialization.Manager.RequiredDataFieldNotProvidedException.RequiredDataFieldNotProvidedException() -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializationResult
OpenNefia.Core.Serialization.Manager.Result.DeserializationResult.Cast<T>() -> T!
OpenNefia.Core.Serialization.Manager.Result.DeserializationResult.DeserializationResult() -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializationResult<T>
OpenNefia.Core.Serialization.Manager.Result.DeserializationResult<T>.DeserializationResult() -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedArray
OpenNefia.Core.Serialization.Manager.Result.DeserializedArray.DeserializedArray(System.Array! array, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult![]! mappings) -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedArray.Mappings.get -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult![]!
OpenNefia.Core.Serialization.Manager.Result.DeserializedArray.Value.get -> System.Array!
OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>
OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.Create
OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.DeserializedCollection(TCollection value, System.Collections.Generic.IEnumerable<OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>! mappings, OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.Create! createDelegate) -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.Mappings.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>!
OpenNefia.Core.Serialization.Manager.Result.DeserializedComponentRegistry
OpenNefia.Core.Serialization.Manager.Result.DeserializedComponentRegistry.DeserializedComponentRegistry(OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry! value, System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>! mappings) -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedComponentRegistry.Mappings.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>!
OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>
OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>.DeserializedDefinition(T value, OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry![]! mapping) -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>.Mapping.get -> OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry![]!
OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>
OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.Create
OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.CreateDelegate.get -> OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.Create!
OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.DeserializedDictionary(TDict value, System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>! mappings, OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.Create! createDelegate) -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.Mappings.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>!
OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry
OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry!
OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry.DeserializedFieldEntry(bool mapped, OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior inheritanceBehavior, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult? result = null) -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry.InheritanceBehavior.get -> OpenNefia.Core.Serialization.Manager.Definition.InheritanceBehavior
OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry.Mapped.get -> bool
OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry! fieldEntry) -> OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry!
OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry.Result.get -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult?
OpenNefia.Core.Serialization.Manager.Result.DeserializedHspIds<TValue>
OpenNefia.Core.Serialization.Manager.Result.DeserializedHspIds<TValue>.DeserializedHspIds(OpenNefia.Core.Prototypes.HspIds<TValue>! value, System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!>! mappings) -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedValue
OpenNefia.Core.Serialization.Manager.Result.DeserializedValue.DeserializedValue(object? value) -> void
OpenNefia.Core.Serialization.Manager.Result.DeserializedValue<T>
OpenNefia.Core.Serialization.Manager.Result.DeserializedValue<T>.DeserializedValue(T value) -> void
OpenNefia.Core.Serialization.Manager.Result.IDeserializedDefinition
OpenNefia.Core.Serialization.Manager.Result.IDeserializedDefinition.Mapping.get -> OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry![]!
OpenNefia.Core.Serialization.Manager.Result.InvalidDeserializedResultTypeException<TExpected>
OpenNefia.Core.Serialization.Manager.Result.InvalidDeserializedResultTypeException<TExpected>.InvalidDeserializedResultTypeException(string? message, System.Exception? innerException, System.Type! receivedType) -> void
OpenNefia.Core.Serialization.Manager.Result.InvalidDeserializedResultTypeException<TExpected>.InvalidDeserializedResultTypeException(string? message, System.Type! receivedType) -> void
OpenNefia.Core.Serialization.Manager.Result.InvalidDeserializedResultTypeException<TExpected>.InvalidDeserializedResultTypeException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context, System.Type! receivedType) -> void
OpenNefia.Core.Serialization.Manager.Result.InvalidDeserializedResultTypeException<TExpected>.InvalidDeserializedResultTypeException(System.Type! receivedType) -> void
OpenNefia.Core.Serialization.Manager.SerializationManager
OpenNefia.Core.Serialization.Manager.SerializationManager.CanSerializeType(System.Type! type) -> bool
OpenNefia.Core.Serialization.Manager.SerializationManager.Compare(object? left, object? right, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> bool
OpenNefia.Core.Serialization.Manager.SerializationManager.Copy(object? source, object? target, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object?
OpenNefia.Core.Serialization.Manager.SerializationManager.Copy<T>(T? source, T? target, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
OpenNefia.Core.Serialization.Manager.SerializationManager.CopyWithTypeSerializer(System.Type! typeSerializer, object? source, object? target, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object?
OpenNefia.Core.Serialization.Manager.SerializationManager.CreateCopy(object? source, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object?
OpenNefia.Core.Serialization.Manager.SerializationManager.CreateCopy<T>(T? source, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
OpenNefia.Core.Serialization.Manager.SerializationManager.CreateDataDefinition<T>(OpenNefia.Core.Serialization.Manager.Result.DeserializedFieldEntry![]! fields, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.SerializationManager.DependencyCollection.get -> OpenNefia.Core.IoC.IDependencyCollection!
OpenNefia.Core.Serialization.Manager.SerializationManager.GetConstantTypeFromTag(System.Type! tagType) -> System.Type!
OpenNefia.Core.Serialization.Manager.SerializationManager.GetDefinition(System.Type! type) -> OpenNefia.Core.Serialization.Manager.Definition.DataDefinition?
OpenNefia.Core.Serialization.Manager.SerializationManager.GetDefinition<T>() -> OpenNefia.Core.Serialization.Manager.Definition.DataDefinition?
OpenNefia.Core.Serialization.Manager.SerializationManager.GetFlagHighestBit(System.Type! tagType) -> int
OpenNefia.Core.Serialization.Manager.SerializationManager.GetFlagTypeFromTag(System.Type! tagType) -> System.Type!
OpenNefia.Core.Serialization.Manager.SerializationManager.HasDataDefinition(System.Type! type) -> bool
OpenNefia.Core.Serialization.Manager.SerializationManager.Initialize() -> void
OpenNefia.Core.Serialization.Manager.SerializationManager.PopulateDataDefinition(object! obj, OpenNefia.Core.Serialization.Manager.Result.IDeserializedDefinition! definition, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.SerializationManager.PopulateDataDefinition<T>(T obj, OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>! definition, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.SerializationManager.Read(System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.SerializationManager.ReadValue(System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object?
OpenNefia.Core.Serialization.Manager.SerializationManager.ReadValue<T>(OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
OpenNefia.Core.Serialization.Manager.SerializationManager.ReadValueCast<T>(System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
OpenNefia.Core.Serialization.Manager.SerializationManager.ReadWithTypeSerializer(System.Type! value, System.Type! serializer, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.Manager.SerializationManager.SerializationManager() -> void
OpenNefia.Core.Serialization.Manager.SerializationManager.Shutdown() -> void
OpenNefia.Core.Serialization.Manager.SerializationManager.TryGetDefinition(System.Type! type, out OpenNefia.Core.Serialization.Manager.Definition.DataDefinition? dataDefinition) -> bool
OpenNefia.Core.Serialization.Manager.SerializationManager.ValidateNode(System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.SerializationManager.ValidateNode<T>(OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.SerializationManager.ValidateNodeWith(System.Type! type, System.Type! typeSerializer, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.SerializationManager.ValidateNodeWith<TType, TSerializer, TNode>(TNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.Manager.SerializationManager.WriteValue(System.Type! type, object? value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Manager.SerializationManager.WriteValue<T>(T value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Manager.SerializationManager.WriteWithTypeSerializer(System.Type! type, System.Type! serializer, object? value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions
OpenNefia.Core.Serialization.Manager.SerializationManagerWriteExtensions
OpenNefia.Core.Serialization.Markdown.DataNode
OpenNefia.Core.Serialization.Markdown.DataNode.CopyCast<T>() -> T!
OpenNefia.Core.Serialization.Markdown.DataNode.DataNode(OpenNefia.Core.Serialization.Markdown.NodeMark start, OpenNefia.Core.Serialization.Markdown.NodeMark end) -> void
OpenNefia.Core.Serialization.Markdown.DataNode.End -> OpenNefia.Core.Serialization.Markdown.NodeMark
OpenNefia.Core.Serialization.Markdown.DataNode.Start -> OpenNefia.Core.Serialization.Markdown.NodeMark
OpenNefia.Core.Serialization.Markdown.DataNode.Tag -> string?
OpenNefia.Core.Serialization.Markdown.DataNode<T>
OpenNefia.Core.Serialization.Markdown.DataNode<T>.DataNode(OpenNefia.Core.Serialization.Markdown.NodeMark start, OpenNefia.Core.Serialization.Markdown.NodeMark end) -> void
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Add(OpenNefia.Core.Serialization.Markdown.DataNode! key, OpenNefia.Core.Serialization.Markdown.DataNode! node) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Cast<T>(string! index) -> T!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Children.get -> System.Collections.Generic.IReadOnlyDictionary<OpenNefia.Core.Serialization.Markdown.DataNode!, OpenNefia.Core.Serialization.Markdown.DataNode!>!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Clear() -> void
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Get(OpenNefia.Core.Serialization.Markdown.DataNode! key) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Get(string! key) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Has(OpenNefia.Core.Serialization.Markdown.DataNode! key) -> bool
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Has(string! key) -> bool
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Insert(int index, OpenNefia.Core.Serialization.Markdown.DataNode! key, OpenNefia.Core.Serialization.Markdown.DataNode! node) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.MappingDataNode() -> void
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.MappingDataNode(System.Collections.Generic.Dictionary<OpenNefia.Core.Serialization.Markdown.DataNode!, OpenNefia.Core.Serialization.Markdown.DataNode!>! nodes) -> void
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.MappingDataNode(YamlDotNet.RepresentationModel.YamlMappingNode! mapping) -> void
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Merge(OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! otherMapping) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Remove(OpenNefia.Core.Serialization.Markdown.DataNode! key) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Remove(string! key) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.RemoveAt(int index) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.this[int key].get -> System.Collections.Generic.KeyValuePair<OpenNefia.Core.Serialization.Markdown.DataNode!, OpenNefia.Core.Serialization.Markdown.DataNode!>
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.this[string! index].get -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.this[string! index].set -> void
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.ToYaml() -> YamlDotNet.RepresentationModel.YamlMappingNode!
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.TryGet(OpenNefia.Core.Serialization.Markdown.DataNode! key, out OpenNefia.Core.Serialization.Markdown.DataNode? node) -> bool
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.TryGet(string! key, out OpenNefia.Core.Serialization.Markdown.DataNode? node) -> bool
OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNodeExtensions
OpenNefia.Core.Serialization.Markdown.NodeMark
OpenNefia.Core.Serialization.Markdown.NodeMark.Column.get -> int
OpenNefia.Core.Serialization.Markdown.NodeMark.Column.init -> void
OpenNefia.Core.Serialization.Markdown.NodeMark.CompareTo(OpenNefia.Core.Serialization.Markdown.NodeMark other) -> int
OpenNefia.Core.Serialization.Markdown.NodeMark.Equals(OpenNefia.Core.Serialization.Markdown.NodeMark other) -> bool
OpenNefia.Core.Serialization.Markdown.NodeMark.Line.get -> int
OpenNefia.Core.Serialization.Markdown.NodeMark.Line.init -> void
OpenNefia.Core.Serialization.Markdown.NodeMark.NodeMark() -> void
OpenNefia.Core.Serialization.Markdown.NodeMark.NodeMark(int line, int column) -> void
OpenNefia.Core.Serialization.Markdown.NodeMark.NodeMark(YamlDotNet.Core.Mark! mark) -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.Add(OpenNefia.Core.Serialization.Markdown.DataNode! node) -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.Cast<T>(int index) -> T!
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.Clear() -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.Remove(OpenNefia.Core.Serialization.Markdown.DataNode! node) -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.Sequence.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.Serialization.Markdown.DataNode!>!
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.SequenceDataNode() -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.SequenceDataNode(params OpenNefia.Core.Serialization.Markdown.DataNode![]! nodes) -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.SequenceDataNode(params string![]! strings) -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.SequenceDataNode(System.Collections.Generic.List<OpenNefia.Core.Serialization.Markdown.DataNode!>! nodes) -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.SequenceDataNode(System.Collections.Generic.List<string!>! values) -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.SequenceDataNode(YamlDotNet.RepresentationModel.YamlSequenceNode! sequence) -> void
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.this[int index].get -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.ToSequenceNode() -> YamlDotNet.RepresentationModel.YamlSequenceNode!
OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode
OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.AlwaysRelevant.get -> bool
OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.Equals(OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode? other) -> bool
OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.ErrorNode(OpenNefia.Core.Serialization.Markdown.DataNode! node, string! errorReason, bool alwaysRelevant = true) -> void
OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.ErrorReason.get -> string!
OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.Node.get -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Markdown.Validation.InconclusiveNode
OpenNefia.Core.Serialization.Markdown.Validation.InconclusiveNode.DataNode.get -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Markdown.Validation.InconclusiveNode.InconclusiveNode(OpenNefia.Core.Serialization.Markdown.DataNode! dataNode) -> void
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedMappingNode
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedMappingNode.Mapping.get -> System.Collections.Generic.Dictionary<OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!, OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!>!
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedMappingNode.ValidatedMappingNode(System.Collections.Generic.Dictionary<OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!, OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!>! mapping) -> void
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedSequenceNode
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedSequenceNode.Sequence.get -> System.Collections.Generic.List<OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!>!
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedSequenceNode.ValidatedSequenceNode(System.Collections.Generic.List<OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!>! sequence) -> void
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedValueNode
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedValueNode.DataNode.get -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.Markdown.Validation.ValidatedValueNode.ValidatedValueNode(OpenNefia.Core.Serialization.Markdown.DataNode! dataNode) -> void
OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode
OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode.ValidationNode() -> void
OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode
OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.Value.get -> string!
OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.Value.set -> void
OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.ValueDataNode(string! value, string? tag = null) -> void
OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.ValueDataNode(YamlDotNet.RepresentationModel.YamlScalarNode! node) -> void
OpenNefia.Core.Serialization.Markdown.YamlNodeHelpers
OpenNefia.Core.Serialization.SerializedTypeAttribute
OpenNefia.Core.Serialization.SerializedTypeAttribute.SerializedTypeAttribute(string! serializeName) -> void
OpenNefia.Core.Serialization.SerializedTypeAttribute.SerializeName.get -> string!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AngleSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AngleSerializer.AngleSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AngleSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Angle objA, OpenNefia.Core.Maths.Angle objB, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AngleSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Angle source, OpenNefia.Core.Maths.Angle target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maths.Angle
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AngleSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AngleSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AngleSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Angle value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AreaIdSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AreaIdSerializer.AreaIdSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AreaIdSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.AreaId left, OpenNefia.Core.Areas.AreaId right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AreaIdSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.AreaId source, OpenNefia.Core.Areas.AreaId target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Areas.AreaId
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AreaIdSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AreaIdSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.AreaIdSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.AreaId value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Base64DataSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Base64DataSerializer.Base64DataSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Base64DataSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, byte[]! left, byte[]! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Base64DataSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, byte[]! source, byte[]! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> byte[]!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Base64DataSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Base64DataSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Base64DataSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, byte[]! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ColorSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ColorSerializer.ColorSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ColorSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Color left, OpenNefia.Core.Maths.Color right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ColorSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Color source, OpenNefia.Core.Maths.Color target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ColorSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ColorSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ColorSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Color value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ComponentRegistrySerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ComponentRegistrySerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry! left, OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ComponentRegistrySerializer.ComponentRegistrySerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ComponentRegistrySerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry! source, OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ComponentRegistrySerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ComponentRegistrySerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ComponentRegistrySerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.ConstantSerializer<TTag>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.ConstantSerializer<TTag>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int left, int right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.ConstantSerializer<TTag>.ConstantSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.ConstantSerializer<TTag>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int source, int target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> int
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.ConstantSerializer<TTag>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.ConstantSerializer<TTag>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.ConstantSerializer<TTag>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int left, int right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int source, int target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> int
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>.FlagSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.FlagSerializer<TTag>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.AreaFloorIdSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.AreaFloorIdSerializer.AreaFloorIdSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.AreaFloorIdSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.AreaFloorId left, OpenNefia.Core.Areas.AreaFloorId right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.AreaFloorIdSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.AreaFloorId source, OpenNefia.Core.Areas.AreaFloorId target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Areas.AreaFloorId
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.AreaFloorIdSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.AreaFloorIdSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.AreaFloorIdSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.AreaFloorId value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.ContainerIdSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.ContainerIdSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Containers.ContainerId left, OpenNefia.Core.Containers.ContainerId right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.ContainerIdSerializer.ContainerIdSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.ContainerIdSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Containers.ContainerId source, OpenNefia.Core.Containers.ContainerId target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Containers.ContainerId
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.ContainerIdSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.ContainerIdSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.ContainerIdSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Containers.ContainerId value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.GlobalAreaIdSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.GlobalAreaIdSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.GlobalAreaId left, OpenNefia.Core.Areas.GlobalAreaId right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.GlobalAreaIdSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.GlobalAreaId source, OpenNefia.Core.Areas.GlobalAreaId target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Areas.GlobalAreaId
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.GlobalAreaIdSerializer.GlobalAreaIdSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.GlobalAreaIdSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.GlobalAreaIdSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.GlobalAreaIdSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Areas.GlobalAreaId value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.PrototypeFlags<T!>! left, OpenNefia.Core.Utility.PrototypeFlags<T!>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.PrototypeFlags<T!>! source, OpenNefia.Core.Utility.PrototypeFlags<T!>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Utility.PrototypeFlags<T!>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>.PrototypeFlagsTypeSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeFlagsTypeSerializer<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.PrototypeFlags<T!>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdSerializer<TPrototype>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdSerializer<TPrototype>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.PrototypeId<TPrototype!> left, OpenNefia.Core.Prototypes.PrototypeId<TPrototype!> right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdSerializer<TPrototype>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.PrototypeId<TPrototype!> source, OpenNefia.Core.Prototypes.PrototypeId<TPrototype!> target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Prototypes.PrototypeId<TPrototype!>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdSerializer<TPrototype>.PrototypeIdSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdSerializer<TPrototype>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdSerializer<TPrototype>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdSerializer<TPrototype>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.PrototypeId<TPrototype!> value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdStringSerializer<TPrototype>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdStringSerializer<TPrototype>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, string! left, string! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdStringSerializer<TPrototype>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, string! source, string! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> string!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdStringSerializer<TPrototype>.PrototypeIdStringSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdStringSerializer<TPrototype>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdStringSerializer<TPrototype>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Custom.Prototype.PrototypeIdStringSerializer<TPrototype>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, string! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityCoordinatesSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityCoordinatesSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.EntityCoordinates left, OpenNefia.Core.Maps.EntityCoordinates right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityCoordinatesSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.EntityCoordinates source, OpenNefia.Core.Maps.EntityCoordinates target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maps.EntityCoordinates
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityCoordinatesSerializer.EntityCoordinatesSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityCoordinatesSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityCoordinatesSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityCoordinatesSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.EntityCoordinates value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityUidSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityUidSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.GameObjects.EntityUid left, OpenNefia.Core.GameObjects.EntityUid right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityUidSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.GameObjects.EntityUid source, OpenNefia.Core.GameObjects.EntityUid target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityUidSerializer.EntityUidSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityUidSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityUidSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.EntityUidSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.GameObjects.EntityUid value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.FormattedMessageSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.FormattedMessageSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.FormattedMessage! left, OpenNefia.Core.Utility.FormattedMessage! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.FormattedMessageSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.FormattedMessage! source, OpenNefia.Core.Utility.FormattedMessage! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Utility.FormattedMessage!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.FormattedMessageSerializer.FormattedMessageSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.FormattedMessageSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.FormattedMessageSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.FormattedMessageSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.FormattedMessage! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Configuration.CVarDef! left, OpenNefia.Core.Configuration.CVarDef! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Configuration.CVarDef! source, OpenNefia.Core.Configuration.CVarDef! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Configuration.CVarDef!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer.CVarDefSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Configuration.CVarDef! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer<T>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Configuration.CVarDef<T>! left, OpenNefia.Core.Configuration.CVarDef<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Configuration.CVarDef<T>! source, OpenNefia.Core.Configuration.CVarDef<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Configuration.CVarDef<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer<T>.CVarDefSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer<T>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer<T>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.CVarDefSerializer<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Configuration.CVarDef<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.Dictionary<TKey, TValue>! left, System.Collections.Generic.Dictionary<TKey, TValue>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! left, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.SortedDictionary<TKey, TValue>! left, System.Collections.Generic.SortedDictionary<TKey, TValue>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.CompareInternal(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! left, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.Dictionary<TKey, TValue>! source, System.Collections.Generic.Dictionary<TKey, TValue>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Generic.Dictionary<TKey, TValue>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! source, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.SortedDictionary<TKey, TValue>! source, System.Collections.Generic.SortedDictionary<TKey, TValue>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Generic.SortedDictionary<TKey, TValue>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.DictionarySerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.Dictionary<TKey, TValue>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.DictionarySerializer<TKey, TValue>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.SortedDictionary<TKey, TValue>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.HashSet<T>! left, System.Collections.Generic.HashSet<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.SortedSet<T>! left, System.Collections.Generic.SortedSet<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableHashSet<T>! left, System.Collections.Immutable.ImmutableHashSet<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableSortedSet<T>! left, System.Collections.Immutable.ImmutableSortedSet<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.HashSet<T>! source, System.Collections.Generic.HashSet<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Generic.HashSet<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.SortedSet<T>! source, System.Collections.Generic.SortedSet<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Generic.SortedSet<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableHashSet<T>! source, System.Collections.Immutable.ImmutableHashSet<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Immutable.ImmutableHashSet<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableSortedSet<T>! source, System.Collections.Immutable.ImmutableSortedSet<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Immutable.ImmutableSortedSet<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.HashSetSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.HashSet<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.SortedSet<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableHashSet<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.HashSetSerializer<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableSortedSet<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyCollection<T>! left, System.Collections.Generic.IReadOnlyCollection<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyList<T>! left, System.Collections.Generic.IReadOnlyList<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.List<T>! left, System.Collections.Generic.List<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableList<T>! left, System.Collections.Immutable.ImmutableList<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyCollection<T>! source, System.Collections.Generic.IReadOnlyCollection<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Generic.IReadOnlyCollection<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyList<T>! source, System.Collections.Generic.IReadOnlyList<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Generic.IReadOnlyList<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.List<T>! source, System.Collections.Generic.List<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Generic.List<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableList<T>! source, System.Collections.Immutable.ImmutableList<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Collections.Immutable.ImmutableList<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.ListSerializers() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyCollection<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.IReadOnlyList<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Generic.List<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ListSerializers<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Collections.Immutable.ImmutableList<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ValueTupleSerializer<T1, T2>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ValueTupleSerializer<T1, T2>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, (T1, T2) left, (T1, T2) right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ValueTupleSerializer<T1, T2>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, (T1, T2) source, (T1, T2) target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> (T1, T2)
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ValueTupleSerializer<T1, T2>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ValueTupleSerializer<T1, T2>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ValueTupleSerializer<T1, T2>.ValueTupleSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Generic.ValueTupleSerializer<T1, T2>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, (T1, T2) value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.HspIdsSerializer<T>
OpenNefia.Core.Serialization.TypeSerializers.Implementations.HspIdsSerializer<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.HspIds<T>! left, OpenNefia.Core.Prototypes.HspIds<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.HspIdsSerializer<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.HspIds<T>! source, OpenNefia.Core.Prototypes.HspIds<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Prototypes.HspIds<T>!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.HspIdsSerializer<T>.HspIdsSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.HspIdsSerializer<T>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.HspIdsSerializer<T>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.HspIdsSerializer<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Prototypes.HspIds<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.LocaleKeySerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.LocaleKeySerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.LocaleKey left, OpenNefia.Core.LocaleKey right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.LocaleKeySerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.LocaleKey source, OpenNefia.Core.LocaleKey target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.LocaleKey
OpenNefia.Core.Serialization.TypeSerializers.Implementations.LocaleKeySerializer.LocaleKeySerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.LocaleKeySerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.LocaleKeySerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.LocaleKeySerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.LocaleKey value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapCoordinatesSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapCoordinatesSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.MapCoordinates left, OpenNefia.Core.Maps.MapCoordinates right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapCoordinatesSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.MapCoordinates source, OpenNefia.Core.Maps.MapCoordinates target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maps.MapCoordinates
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapCoordinatesSerializer.MapCoordinatesSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapCoordinatesSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapCoordinatesSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapCoordinatesSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.MapCoordinates value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapIdSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapIdSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.MapId left, OpenNefia.Core.Maps.MapId right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapIdSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.MapId source, OpenNefia.Core.Maps.MapId target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maps.MapId
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapIdSerializer.MapIdSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapIdSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapIdSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MapIdSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maps.MapId value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MappingDataNodeSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MappingDataNodeSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! left, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MappingDataNodeSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! source, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MappingDataNodeSerializer.MappingDataNodeSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MappingDataNodeSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MappingDataNodeSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.MappingDataNodeSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.BooleanSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.BooleanSerializer.BooleanSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.BooleanSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, bool left, bool right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.BooleanSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, bool source, bool target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.BooleanSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.BooleanSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.BooleanSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, bool value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ByteSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ByteSerializer.ByteSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ByteSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, byte left, byte right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ByteSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, byte source, byte target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> byte
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ByteSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ByteSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ByteSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, byte value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.CharSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.CharSerializer.CharSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.CharSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, char left, char right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.CharSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, char source, char target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> char
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.CharSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.CharSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.CharSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, char value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DecimalSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DecimalSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, decimal left, decimal right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DecimalSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, decimal source, decimal target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> decimal
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DecimalSerializer.DecimalSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DecimalSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DecimalSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DecimalSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, decimal value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DoubleSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DoubleSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, double left, double right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DoubleSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, double source, double target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> double
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DoubleSerializer.DoubleSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DoubleSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DoubleSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.DoubleSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, double value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.FloatSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.FloatSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, float left, float right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.FloatSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, float source, float target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> float
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.FloatSerializer.FloatSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.FloatSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.FloatSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.FloatSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, float value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.IntSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.IntSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int left, int right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.IntSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int source, int target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> int
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.IntSerializer.IntSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.IntSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.IntSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.IntSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, int value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.LongSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.LongSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, long left, long right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.LongSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, long source, long target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> long
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.LongSerializer.LongSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.LongSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.LongSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.LongSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, long value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.SByteSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.SByteSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, sbyte left, sbyte right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.SByteSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, sbyte source, sbyte target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> sbyte
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.SByteSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.SByteSerializer.SByteSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.SByteSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.SByteSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, sbyte value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ShortSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ShortSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, short left, short right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ShortSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, short source, short target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> short
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ShortSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ShortSerializer.ShortSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ShortSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ShortSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, short value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UIntSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UIntSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, uint left, uint right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UIntSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, uint source, uint target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> uint
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UIntSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UIntSerializer.UIntSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UIntSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UIntSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, uint value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ULongSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ULongSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, ulong left, ulong right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ULongSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, ulong source, ulong target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> ulong
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ULongSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ULongSerializer.ULongSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ULongSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.ULongSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, ulong value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UShortSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UShortSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, ushort left, ushort right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UShortSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, ushort source, ushort target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> ushort
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UShortSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UShortSerializer.UShortSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UShortSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Primitive.UShortSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, ushort value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.RegexSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.RegexSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Text.RegularExpressions.Regex! left, System.Text.RegularExpressions.Regex! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.RegexSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Text.RegularExpressions.Regex! source, System.Text.RegularExpressions.Regex! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Text.RegularExpressions.Regex!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.RegexSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.RegexSerializer.RegexSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.RegexSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.RegexSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Text.RegularExpressions.Regex! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ResourcePathSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ResourcePathSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.ResourcePath! left, OpenNefia.Core.Utility.ResourcePath! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ResourcePathSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.ResourcePath! source, OpenNefia.Core.Utility.ResourcePath! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ResourcePathSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ResourcePathSerializer.ResourcePathSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ResourcePathSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.ResourcePathSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Utility.ResourcePath! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.SlotIdSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.SlotIdSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.GameObjects.SlotId left, OpenNefia.Core.GameObjects.SlotId right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.SlotIdSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.GameObjects.SlotId source, OpenNefia.Core.GameObjects.SlotId target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.GameObjects.SlotId
OpenNefia.Core.Serialization.TypeSerializers.Implementations.SlotIdSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.SlotIdSerializer.SlotIdSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.SlotIdSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.SlotIdSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.GameObjects.SlotId value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.StringSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.StringSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, string! left, string! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.StringSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, string! source, string! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> string!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.StringSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.StringSerializer.StringSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.StringSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.StringSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, string! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TimeSpanSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TimeSpanSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.TimeSpan left, System.TimeSpan right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TimeSpanSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.TimeSpan source, System.TimeSpan target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.TimeSpan
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TimeSpanSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TimeSpanSerializer.TimeSpanSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TimeSpanSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TimeSpanSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.TimeSpan value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TypeSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TypeSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Type! left, System.Type! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TypeSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Type! source, System.Type! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Type!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TypeSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TypeSerializer.TypeSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TypeSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.TypeSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Type! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.UIBox2iFromDimensionsSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.UIBox2iFromDimensionsSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.UIBox2i left, OpenNefia.Core.Maths.UIBox2i right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.UIBox2iFromDimensionsSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.UIBox2i source, OpenNefia.Core.Maths.UIBox2i target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.Serialization.TypeSerializers.Implementations.UIBox2iFromDimensionsSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.UIBox2iFromDimensionsSerializer.UIBox2iFromDimensionsSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.UIBox2iFromDimensionsSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.UIBox2iFromDimensionsSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.UIBox2i value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2iSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2iSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector2i left, OpenNefia.Core.Maths.Vector2i right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2iSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector2i source, OpenNefia.Core.Maths.Vector2i target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2iSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2iSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2iSerializer.Vector2iSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2iSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector2i value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2Serializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2Serializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector2 left, OpenNefia.Core.Maths.Vector2 right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2Serializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector2 source, OpenNefia.Core.Maths.Vector2 target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2Serializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2Serializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2Serializer.Vector2Serializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector2Serializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector2 value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector3Serializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector3Serializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector3Serializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector3 source, OpenNefia.Core.Maths.Vector3 target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maths.Vector3
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector3Serializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector3Serializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector3Serializer.Vector3Serializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector3Serializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector3 value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector4Serializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector4Serializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector4 left, OpenNefia.Core.Maths.Vector4 right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector4Serializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector4 source, OpenNefia.Core.Maths.Vector4 target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Maths.Vector4
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector4Serializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector4Serializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector4Serializer.Vector4Serializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.Vector4Serializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Maths.Vector4 value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.VersionSerializer
OpenNefia.Core.Serialization.TypeSerializers.Implementations.VersionSerializer.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Version! left, System.Version! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Implementations.VersionSerializer.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Version! source, System.Version! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> System.Version!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.VersionSerializer.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.VersionSerializer.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Implementations.VersionSerializer.VersionSerializer() -> void
OpenNefia.Core.Serialization.TypeSerializers.Implementations.VersionSerializer.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, System.Version! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeComparer<TType>
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeComparer<TType>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, TType left, TType right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeCopier<TType>
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeCopier<TType>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, TType source, TType target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> TType
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeReader<TType, TNode>
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeReader<TType, TNode>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, TNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeReaderWriter<TType, TNode>
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeSerializer<TType, TNode>
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeValidator<TType, TNode>
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeValidator<TType, TNode>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, TNode node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeWriter<TType>
OpenNefia.Core.Serialization.TypeSerializers.Interfaces.ITypeWriter<TType>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, TType value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
OpenNefia.Core.Serialization.YamlMappingFix
OpenNefia.Core.Serialization.YamlMappingFix.Emit(YamlDotNet.Core.Events.ParsingEvent! event) -> void
OpenNefia.Core.Serialization.YamlMappingFix.YamlMappingFix(YamlDotNet.Core.IEmitter! next) -> void
OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>
OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>.BaseStatSerializer() -> void
OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>.Compare(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Stats.Stat<T>! left, OpenNefia.Core.Stats.Stat<T>! right, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> bool
OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>.Copy(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Stats.Stat<T>! source, OpenNefia.Core.Stats.Stat<T>! target, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Stats.Stat<T>!
OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>.Read(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, bool skipHook, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Stats.Serialization.BaseStatSerializer<T>.Validate(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node, OpenNefia.Core.IoC.IDependencyCollection! dependencies, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.Validation.ValidationNode!
OpenNefia.Core.Stats.Serialization.StatSerializerFull<T>
OpenNefia.Core.Stats.Serialization.StatSerializerFull<T>.StatSerializerFull() -> void
OpenNefia.Core.Stats.Serialization.StatSerializerPartial<T>
OpenNefia.Core.Stats.Serialization.StatSerializerPartial<T>.StatSerializerPartial() -> void
OpenNefia.Core.Stats.Stat<T>
OpenNefia.Core.Stats.Stat<T>.Base.get -> T
OpenNefia.Core.Stats.Stat<T>.Base.set -> void
OpenNefia.Core.Stats.Stat<T>.Buffed.get -> T
OpenNefia.Core.Stats.Stat<T>.Buffed.set -> void
OpenNefia.Core.Stats.Stat<T>.IsBuffed.get -> bool
OpenNefia.Core.Stats.Stat<T>.Stat() -> void
OpenNefia.Core.Stats.Stat<T>.Stat(T baseValue) -> void
OpenNefia.Core.Stats.Stat<T>.Stat(T baseValue, T buffedValue) -> void
OpenNefia.Core.Timing.FrameEventArgs
OpenNefia.Core.Timing.FrameEventArgs.DeltaSeconds.get -> float
OpenNefia.Core.Timing.FrameEventArgs.FrameEventArgs() -> void
OpenNefia.Core.Timing.FrameEventArgs.FrameEventArgs(float deltaSeconds, bool stepInput = true) -> void
OpenNefia.Core.Timing.FrameEventArgs.StepInput.get -> bool
OpenNefia.Core.Timing.IStopwatch
OpenNefia.Core.Timing.IStopwatch.Elapsed.get -> System.TimeSpan
OpenNefia.Core.Timing.IStopwatch.Restart() -> void
OpenNefia.Core.Timing.IStopwatch.Start() -> void
OpenNefia.Core.Timing.ITimerManager
OpenNefia.Core.Timing.ITimerManager.AddTimer(OpenNefia.Core.Timing.Timer! timer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
OpenNefia.Core.Timing.ITimerManager.UpdateTimers(OpenNefia.Core.Timing.FrameEventArgs frameEventArgs) -> void
OpenNefia.Core.Timing.ProfilerLogger
OpenNefia.Core.Timing.ProfilerLogger.Dispose() -> void
OpenNefia.Core.Timing.ProfilerLogger.ProfilerLogger(OpenNefia.Core.Log.LogLevel level, string! message) -> void
OpenNefia.Core.Timing.ProfilerLogger.ProfilerLogger(OpenNefia.Core.Log.LogLevel level, string! sawmill, string! message) -> void
OpenNefia.Core.Timing.Stopwatch
OpenNefia.Core.Timing.Stopwatch.Elapsed.get -> System.TimeSpan
OpenNefia.Core.Timing.Stopwatch.Restart() -> void
OpenNefia.Core.Timing.Stopwatch.Start() -> void
OpenNefia.Core.Timing.Stopwatch.Stopwatch() -> void
OpenNefia.Core.Timing.Timer
OpenNefia.Core.Timing.Timer.IsActive.get -> bool
OpenNefia.Core.Timing.Timer.IsRepeating.get -> bool
OpenNefia.Core.Timing.Timer.OnFired.get -> System.Action!
OpenNefia.Core.Timing.Timer.Time.get -> int
OpenNefia.Core.Timing.Timer.Timer(int milliseconds, bool isRepeating, System.Action! onFired) -> void
OpenNefia.Core.Timing.Timer.Update(float frameTime, OpenNefia.Core.Exceptions.IRuntimeLog! runtimeLog) -> void
OpenNefia.Core.UI.ChildAttribute
OpenNefia.Core.UI.ChildAttribute.ChildAttribute() -> void
OpenNefia.Core.UI.Constants
OpenNefia.Core.UI.Element.BaseDrawable
OpenNefia.Core.UI.Element.BaseDrawable.BaseDrawable() -> void
OpenNefia.Core.UI.Element.BaseDrawable.ContainsPoint(float x, float y) -> bool
OpenNefia.Core.UI.Element.BaseDrawable.Height.get -> float
OpenNefia.Core.UI.Element.BaseDrawable.PixelHeight.get -> int
OpenNefia.Core.UI.Element.BaseDrawable.PixelPosition.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.UI.Element.BaseDrawable.PixelRect.get -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.UI.Element.BaseDrawable.PixelSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.UI.Element.BaseDrawable.PixelSizeBox.get -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.UI.Element.BaseDrawable.PixelWidth.get -> int
OpenNefia.Core.UI.Element.BaseDrawable.PixelX.get -> int
OpenNefia.Core.UI.Element.BaseDrawable.PixelY.get -> int
OpenNefia.Core.UI.Element.BaseDrawable.Rect.get -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Element.BaseDrawable.SizeBox.get -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Element.BaseDrawable.Width.get -> float
OpenNefia.Core.UI.Element.BaseDrawable.X.get -> float
OpenNefia.Core.UI.Element.BaseDrawable.Y.get -> float
OpenNefia.Core.UI.Element.ControlChildMovedEventArgs
OpenNefia.Core.UI.Element.ControlChildMovedEventArgs.ControlChildMovedEventArgs() -> void
OpenNefia.Core.UI.Element.ControlChildMovedEventArgs.ControlChildMovedEventArgs(OpenNefia.Core.UI.Element.UiElement! control, int oldIndex, int newIndex) -> void
OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs
OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs.GUIBoundKeyEventArgs(OpenNefia.Core.Input.BoundKeyFunction function, OpenNefia.Core.Input.BoundKeyState state, OpenNefia.Core.Maps.ScreenCoordinates pointerLocation, bool canFocus, OpenNefia.Core.Maths.Vector2 relativePosition, OpenNefia.Core.Maths.Vector2 relativePixelPosition) -> void
OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs.RelativePixelPosition.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs.RelativePosition.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.GUIKeyEventArgs
OpenNefia.Core.UI.Element.GUIKeyEventArgs.GUIKeyEventArgs(OpenNefia.Core.UI.Element.UiElement! sourceControl, OpenNefia.Core.Input.Keyboard.Key key, bool repeat, bool alt, bool control, bool shift, bool system, Love.Scancode scanCode) -> void
OpenNefia.Core.UI.Element.GUIKeyEventArgs.SourceControl.get -> OpenNefia.Core.UI.Element.UiElement!
OpenNefia.Core.UI.Element.GUIMouseEventArgs
OpenNefia.Core.UI.Element.GUIMouseEventArgs.GlobalPixelPosition.get -> OpenNefia.Core.Maps.ScreenCoordinates
OpenNefia.Core.UI.Element.GUIMouseEventArgs.GlobalPosition.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.GUIMouseEventArgs.GUIMouseEventArgs(OpenNefia.Core.UI.Element.UiElement! sourceControl, OpenNefia.Core.Maths.Vector2 globalPosition, OpenNefia.Core.Maps.ScreenCoordinates globalPixelPosition, OpenNefia.Core.Maths.Vector2 relativePosition, OpenNefia.Core.Maths.Vector2 relativePixelPosition) -> void
OpenNefia.Core.UI.Element.GUIMouseEventArgs.RelativePixelPosition.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.GUIMouseEventArgs.RelativePosition.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.GUIMouseEventArgs.SourceControl.get -> OpenNefia.Core.UI.Element.UiElement!
OpenNefia.Core.UI.Element.GUIMouseHoverEventArgs
OpenNefia.Core.UI.Element.GUIMouseHoverEventArgs.GUIMouseHoverEventArgs(OpenNefia.Core.UI.Element.UiElement! sourceControl) -> void
OpenNefia.Core.UI.Element.GUIMouseHoverEventArgs.SourceControl.get -> OpenNefia.Core.UI.Element.UiElement!
OpenNefia.Core.UI.Element.GUIMouseMoveEventArgs
OpenNefia.Core.UI.Element.GUIMouseMoveEventArgs.GUIMouseMoveEventArgs(OpenNefia.Core.Maths.Vector2 relative, OpenNefia.Core.UI.Element.UiElement! sourceElement, OpenNefia.Core.Maths.Vector2 globalPosition, OpenNefia.Core.Maps.ScreenCoordinates globalPixelPosition, OpenNefia.Core.Maths.Vector2 relativePosition, OpenNefia.Core.Maths.Vector2 relativePixelPosition) -> void
OpenNefia.Core.UI.Element.GUIMouseMoveEventArgs.Relative.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.GUIMouseWheelEventArgs
OpenNefia.Core.UI.Element.GUIMouseWheelEventArgs.Delta.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.GUIMouseWheelEventArgs.GUIMouseWheelEventArgs(OpenNefia.Core.Maths.Vector2 delta, OpenNefia.Core.UI.Element.UiElement! sourceElement, OpenNefia.Core.Maths.Vector2 globalPosition, OpenNefia.Core.Maps.ScreenCoordinates globalPixelPosition, OpenNefia.Core.Maths.Vector2 relativePosition, OpenNefia.Core.Maths.Vector2 relativePixelPosition) -> void
OpenNefia.Core.UI.Element.GUIScaleChangedEventArgs
OpenNefia.Core.UI.Element.GUIScaleChangedEventArgs.GlobalUIScale.get -> float
OpenNefia.Core.UI.Element.GUIScaleChangedEventArgs.GUIScaleChangedEventArgs(float globalUIScale) -> void
OpenNefia.Core.UI.Element.GUITextEventArgs
OpenNefia.Core.UI.Element.GUITextEventArgs.GUITextEventArgs(OpenNefia.Core.UI.Element.UiElement! sourceControl, uint codePoint) -> void
OpenNefia.Core.UI.Element.GUITextEventArgs.SourceControl.get -> OpenNefia.Core.UI.Element.UiElement!
OpenNefia.Core.UI.Element.IDrawable
OpenNefia.Core.UI.Element.IDrawable.ContainsPoint(OpenNefia.Core.Maths.Vector2 point) -> bool
OpenNefia.Core.UI.Element.IDrawable.Draw() -> void
OpenNefia.Core.UI.Element.IDrawable.Height.get -> float
OpenNefia.Core.UI.Element.IDrawable.PixelHeight.get -> int
OpenNefia.Core.UI.Element.IDrawable.PixelPosition.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.UI.Element.IDrawable.PixelRect.get -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.UI.Element.IDrawable.PixelSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.UI.Element.IDrawable.PixelSizeBox.get -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.UI.Element.IDrawable.PixelWidth.get -> int
OpenNefia.Core.UI.Element.IDrawable.PixelX.get -> int
OpenNefia.Core.UI.Element.IDrawable.PixelY.get -> int
OpenNefia.Core.UI.Element.IDrawable.Position.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.IDrawable.Rect.get -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Element.IDrawable.SetPosition(float x, float y) -> void
OpenNefia.Core.UI.Element.IDrawable.SetSize(float width, float height) -> void
OpenNefia.Core.UI.Element.IDrawable.Size.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.IDrawable.SizeBox.get -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Element.IDrawable.UIScale.get -> float
OpenNefia.Core.UI.Element.IDrawable.Update(float dt) -> void
OpenNefia.Core.UI.Element.IDrawable.Width.get -> float
OpenNefia.Core.UI.Element.IDrawable.X.get -> float
OpenNefia.Core.UI.Element.IDrawable.Y.get -> float
OpenNefia.Core.UI.Element.IUiElement
OpenNefia.Core.UI.Element.IUiElement.ExactSize.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.IUiElement.ExactSize.set -> void
OpenNefia.Core.UI.Element.IUiElement.GetPreferredSize(out OpenNefia.Core.Maths.Vector2 size) -> void
OpenNefia.Core.UI.Element.IUiElement.MinSize.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Element.IUiElement.MinSize.set -> void
OpenNefia.Core.UI.Element.IUiElement.SetPreferredSize() -> void
OpenNefia.Core.UI.Element.IUiElement.Visible.get -> bool
OpenNefia.Core.UI.Element.IUiElement.Visible.set -> void
OpenNefia.Core.UI.Element.UiElement
OpenNefia.Core.UI.Element.UiElement.Access.set -> void
OpenNefia.Core.UI.Element.UiElement.AddChild(OpenNefia.Core.UI.Element.UiElement! child) -> void
OpenNefia.Core.UI.Element.UiElement.BoundKeyEventFilters.get -> System.Collections.Generic.List<OpenNefia.Core.UserInterface.IBoundKeyEventFilter!>!
OpenNefia.Core.UI.Element.UiElement.CanControlFocus.get -> bool
OpenNefia.Core.UI.Element.UiElement.CanControlFocus.set -> void
OpenNefia.Core.UI.Element.UiElement.CanKeyboardFocus.get -> bool
OpenNefia.Core.UI.Element.UiElement.CanKeyboardFocus.set -> void
OpenNefia.Core.UI.Element.UiElement.ChildCount.get -> int
OpenNefia.Core.UI.Element.UiElement.Children.get -> OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection!
OpenNefia.Core.UI.Element.UiElement.DisposeAllChildren() -> void
OpenNefia.Core.UI.Element.UiElement.Disposed.get -> bool
OpenNefia.Core.UI.Element.UiElement.EventFilter.get -> OpenNefia.Core.UserInterface.UIEventFilterMode
OpenNefia.Core.UI.Element.UiElement.EventFilter.set -> void
OpenNefia.Core.UI.Element.UiElement.FindControl<T>(string! name) -> T!
OpenNefia.Core.UI.Element.UiElement.FindNameScope() -> OpenNefia.Core.UserInterface.XAML.NameScope?
OpenNefia.Core.UI.Element.UiElement.GetChild(int index) -> OpenNefia.Core.UI.Element.UiElement!
OpenNefia.Core.UI.Element.UiElement.GetPositionInParent() -> int
OpenNefia.Core.UI.Element.UiElement.GlobalPixelRect.get -> OpenNefia.Core.Maths.UIBox2i
OpenNefia.Core.UI.Element.UiElement.GlobalRect.get -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Element.UiElement.GrabControlFocus() -> void
OpenNefia.Core.UI.Element.UiElement.GrabKeyboardFocus() -> void
OpenNefia.Core.UI.Element.UiElement.HasControlFocus() -> bool
OpenNefia.Core.UI.Element.UiElement.IsInsideTree.get -> bool
OpenNefia.Core.UI.Element.UiElement.IsLocalized.get -> bool
OpenNefia.Core.UI.Element.UiElement.IsLocalized.set -> void
OpenNefia.Core.UI.Element.UiElement.KeyboardFocusOnClick.get -> bool
OpenNefia.Core.UI.Element.UiElement.KeyboardFocusOnClick.set -> void
OpenNefia.Core.UI.Element.UiElement.LocalizeChildren() -> void
OpenNefia.Core.UI.Element.UiElement.MaxHeight.get -> float
OpenNefia.Core.UI.Element.UiElement.MaxWidth.get -> float
OpenNefia.Core.UI.Element.UiElement.MinHeight.get -> float
OpenNefia.Core.UI.Element.UiElement.MinWidth.get -> float
OpenNefia.Core.UI.Element.UiElement.NameScope -> OpenNefia.Core.UserInterface.XAML.NameScope?
OpenNefia.Core.UI.Element.UiElement.OnChildAdded -> System.Action<OpenNefia.Core.UI.Element.UiElement!>?
OpenNefia.Core.UI.Element.UiElement.OnChildMoved -> System.Action<OpenNefia.Core.UI.Element.ControlChildMovedEventArgs>?
OpenNefia.Core.UI.Element.UiElement.OnChildRemoved -> System.Action<OpenNefia.Core.UI.Element.UiElement!>?
OpenNefia.Core.UI.Element.UiElement.OnKeyBindDown -> System.Action<OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs!>?
OpenNefia.Core.UI.Element.UiElement.OnKeyBindUp -> System.Action<OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs!>?
OpenNefia.Core.UI.Element.UiElement.OnMouseEntered -> System.Action<OpenNefia.Core.UI.Element.GUIMouseHoverEventArgs!>?
OpenNefia.Core.UI.Element.UiElement.OnMouseExited -> System.Action<OpenNefia.Core.UI.Element.GUIMouseHoverEventArgs!>?
OpenNefia.Core.UI.Element.UiElement.OnResized -> System.Action?
OpenNefia.Core.UI.Element.UiElement.OnUIScaleChanged -> System.Action<OpenNefia.Core.UI.Element.GUIScaleChangedEventArgs!>?
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Add(OpenNefia.Core.UI.Element.UiElement! item) -> void
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Clear() -> void
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Contains(OpenNefia.Core.UI.Element.UiElement! item) -> bool
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.CopyTo(OpenNefia.Core.UI.Element.UiElement![]! array, int arrayIndex) -> void
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Enumerator
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Enumerator.Current.get -> OpenNefia.Core.UI.Element.UiElement!
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Enumerator.Dispose() -> void
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Enumerator.Enumerator() -> void
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Enumerator.MoveNext() -> bool
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Enumerator.Reset() -> void
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.GetEnumerator() -> OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Enumerator
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.IsReadOnly.get -> bool
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.OrderedChildCollection(OpenNefia.Core.UI.Element.UiElement! owner) -> void
OpenNefia.Core.UI.Element.UiElement.OrderedChildCollection.Remove(OpenNefia.Core.UI.Element.UiElement! item) -> bool
OpenNefia.Core.UI.Element.UiElement.Parent.get -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UI.Element.UiElement.PreferredHeight.get -> float
OpenNefia.Core.UI.Element.UiElement.PreferredWidth.get -> float
OpenNefia.Core.UI.Element.UiElement.RelativePixelPosition.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.UI.Element.UiElement.ReleaseControlFocus() -> void
OpenNefia.Core.UI.Element.UiElement.ReleaseKeyboardFocus() -> void
OpenNefia.Core.UI.Element.UiElement.RemoveAllChildren() -> void
OpenNefia.Core.UI.Element.UiElement.RemoveChild(OpenNefia.Core.UI.Element.UiElement! child) -> void
OpenNefia.Core.UI.Element.UiElement.SetPositionFirst() -> void
OpenNefia.Core.UI.Element.UiElement.SetPositionInParent(int position) -> void
OpenNefia.Core.UI.Element.UiElement.SetPositionLast() -> void
OpenNefia.Core.UI.Element.UiElement.SetPreferredSize() -> void
OpenNefia.Core.UI.Element.UiElement.UiElement() -> void
OpenNefia.Core.UI.Element.UiElement.UserInterfaceManager.get -> OpenNefia.Core.UserInterface.IUserInterfaceManager!
OpenNefia.Core.UI.IProgressableJob
OpenNefia.Core.UI.IProgressableJob.NumberOfSteps.get -> uint
OpenNefia.Core.UI.IUiInput
OpenNefia.Core.UI.IUiInput.MakeKeyHints() -> System.Collections.Generic.List<OpenNefia.Core.UI.UiKeyHint!>!
OpenNefia.Core.UI.IUiPaged
OpenNefia.Core.UI.IUiPaged.CurrentPage.get -> int
OpenNefia.Core.UI.IUiPaged.OnPageChanged -> OpenNefia.Core.UI.PageChangedDelegate?
OpenNefia.Core.UI.IUiPaged.PageBackward() -> bool
OpenNefia.Core.UI.IUiPaged.PageCount.get -> int
OpenNefia.Core.UI.IUiPaged.PageForward() -> bool
OpenNefia.Core.UI.IUiPaged.SetPage(int page) -> bool
OpenNefia.Core.UI.KeyActionResult
OpenNefia.Core.UI.KeyActionResult.Complete = 0 -> OpenNefia.Core.UI.KeyActionResult
OpenNefia.Core.UI.KeyActionResult.Forward = 1 -> OpenNefia.Core.UI.KeyActionResult
OpenNefia.Core.UI.Layer.IUiLayer
OpenNefia.Core.UI.Layer.IUiLayer.GetPreferredBounds(out OpenNefia.Core.Maths.UIBox2 bounds) -> void
OpenNefia.Core.UI.Layer.IUiLayer.GetPreferredPosition(out OpenNefia.Core.Maths.Vector2 pos) -> void
OpenNefia.Core.UI.Layer.IUiLayer.IsInActiveLayerList() -> bool
OpenNefia.Core.UI.Layer.IUiLayer.IsQuerying() -> bool
OpenNefia.Core.UI.Layer.IUiLayer.Localize() -> void
OpenNefia.Core.UI.Layer.IUiLayer.OnQuery() -> void
OpenNefia.Core.UI.Layer.IUiLayer.OnQueryFinish() -> void
OpenNefia.Core.UI.Layer.IUiLayer.SetPreferredPosition() -> void
OpenNefia.Core.UI.Layer.IUiLayer.ZOrder.get -> int
OpenNefia.Core.UI.Layer.IUiLayer.ZOrder.set -> void
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.Cancel() -> void
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.DefaultZOrder.get -> int?
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.Finish(TResult! result) -> void
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.GetResult() -> OpenNefia.Core.UI.UiResult<TResult!>?
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.Initialize(TArgs args) -> void
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.Result.get -> TResult?
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.Result.set -> void
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.WasCancelled.get -> bool
OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult>.WasCancelled.set -> void
OpenNefia.Core.UI.Layer.MinimalProgressBarLayer
OpenNefia.Core.UI.Layer.MinimalProgressBarLayer.Job.get -> OpenNefia.Core.UI.IProgressableJob!
OpenNefia.Core.UI.Layer.MinimalProgressBarLayer.MinimalProgressBarLayer() -> void
OpenNefia.Core.UI.Layer.UiLayer
OpenNefia.Core.UI.Layer.UiLayer.GetPreferredPosition(out OpenNefia.Core.Maths.Vector2 pos) -> void
OpenNefia.Core.UI.Layer.UiLayer.IsInActiveLayerList() -> bool
OpenNefia.Core.UI.Layer.UiLayer.IsQuerying() -> bool
OpenNefia.Core.UI.Layer.UiLayer.LayerUIScale.get -> float?
OpenNefia.Core.UI.Layer.UiLayer.LayerUIScale.set -> void
OpenNefia.Core.UI.Layer.UiLayer.Localize() -> void
OpenNefia.Core.UI.Layer.UiLayer.SetPreferredPosition() -> void
OpenNefia.Core.UI.Layer.UiLayer.UiLayer() -> void
OpenNefia.Core.UI.Layer.UiLayer.ZOrder.get -> int
OpenNefia.Core.UI.Layer.UiLayer.ZOrder.set -> void
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.Exception.get -> System.Exception?
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.HasResult.get -> bool
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.Result.get -> TResult?
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.Result.set -> void
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.UiLayerWithResult() -> void
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.WasCancelled.get -> bool
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.WasCancelled.set -> void
OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.WasFinished.get -> bool
OpenNefia.Core.UI.PageChangedDelegate
OpenNefia.Core.UI.ProgressHandler
OpenNefia.Core.UI.ProgressOperation
OpenNefia.Core.UI.ProgressOperation.IsCompleted.get -> bool
OpenNefia.Core.UI.ProgressOperation.Progress.get -> double
OpenNefia.Core.UI.ProgressOperation.ProgressOperation() -> void
OpenNefia.Core.UI.ProgressOperation.Report(double progress) -> void
OpenNefia.Core.UI.ProgressStep
OpenNefia.Core.UI.ProgressStep.Delegate.get -> OpenNefia.Core.UI.ProgressHandler!
OpenNefia.Core.UI.ProgressStep.ProgressStep(string! text, OpenNefia.Core.UI.ProgressHandler! delegate) -> void
OpenNefia.Core.UI.ProgressStep.ProgressStep(string! text, System.Threading.Tasks.Task! task) -> void
OpenNefia.Core.UI.ProgressStep.Text.get -> string!
OpenNefia.Core.UI.UiHelpers
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState.Asset.get -> OpenNefia.Core.Rendering.IAssetInstance!
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState.BarQuad.get -> Love.Quad!
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState.BarWidth.get -> float
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState.BarWidth.set -> void
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState.Dispose() -> void
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState.HPRatio.get -> float
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState.ScreenPos.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.UiHelpers.UiBarDrawableState.UiBarDrawableState(OpenNefia.Core.Rendering.IAssetInstance! assetInstance, float hpRatio, OpenNefia.Core.Maths.Vector2 screenPos) -> void
OpenNefia.Core.UI.UiKeyHint
OpenNefia.Core.UI.UiKeyHint.ActionText.get -> string!
OpenNefia.Core.UI.UiKeyHint.ActionText.set -> void
OpenNefia.Core.UI.UiKeyHint.KeybindNamesText.get -> string?
OpenNefia.Core.UI.UiKeyHint.KeybindNamesText.set -> void
OpenNefia.Core.UI.UiKeyHint.KeyFunctions.get -> OpenNefia.Core.Input.BoundKeyFunction[]!
OpenNefia.Core.UI.UiKeyHint.KeyFunctions.set -> void
OpenNefia.Core.UI.UiKeyHint.UiKeyHint(OpenNefia.Core.LocaleKey localeKey, OpenNefia.Core.Input.BoundKeyFunction function) -> void
OpenNefia.Core.UI.UiKeyHint.UiKeyHint(OpenNefia.Core.LocaleKey localeKey, OpenNefia.Core.Input.BoundKeyFunction[]! functions) -> void
OpenNefia.Core.UI.UiKeyHint.UiKeyHint(OpenNefia.Core.LocaleKey localeKey, OpenNefia.Core.LocaleKey keyNamesLocaleKey) -> void
OpenNefia.Core.UI.UiKeyHint.UiKeyHint(string! text, OpenNefia.Core.Input.BoundKeyFunction function) -> void
OpenNefia.Core.UI.UiKeyHint.UiKeyHint(string! text, OpenNefia.Core.Input.BoundKeyFunction[]! functions) -> void
OpenNefia.Core.UI.UINone
OpenNefia.Core.UI.UINone.UINone() -> void
OpenNefia.Core.UI.UiPageModel<T>
OpenNefia.Core.UI.UiPageModel<T>.CurrentElements.get -> System.Collections.Generic.IReadOnlyList<T>!
OpenNefia.Core.UI.UiPageModel<T>.CurrentPage.get -> int
OpenNefia.Core.UI.UiPageModel<T>.ItemsPerPage.get -> int
OpenNefia.Core.UI.UiPageModel<T>.OnPageChanged -> OpenNefia.Core.UI.PageChangedDelegate?
OpenNefia.Core.UI.UiPageModel<T>.PageBackward() -> bool
OpenNefia.Core.UI.UiPageModel<T>.PageCount.get -> int
OpenNefia.Core.UI.UiPageModel<T>.PageForward() -> bool
OpenNefia.Core.UI.UiPageModel<T>.SetElements(System.Collections.Generic.IEnumerable<T>! elements) -> void
OpenNefia.Core.UI.UiPageModel<T>.SetPage(int page) -> bool
OpenNefia.Core.UI.UiPageModel<T>.UiPageModel(int itemsPerPage = 16) -> void
OpenNefia.Core.UI.UiResult<T>
OpenNefia.Core.UI.UiResult<T>.Cancelled
OpenNefia.Core.UI.UiResult<T>.Cancelled.Cancelled() -> void
OpenNefia.Core.UI.UiResult<T>.Error
OpenNefia.Core.UI.UiResult<T>.Error.Error(System.Exception! Exception) -> void
OpenNefia.Core.UI.UiResult<T>.Error.Exception.get -> System.Exception!
OpenNefia.Core.UI.UiResult<T>.Error.Exception.init -> void
OpenNefia.Core.UI.UiResult<T>.Finished
OpenNefia.Core.UI.UiResult<T>.Finished.Finished(T! InnerValue) -> void
OpenNefia.Core.UI.UiResult<T>.Finished.InnerValue.get -> T!
OpenNefia.Core.UI.UiResult<T>.Finished.InnerValue.init -> void
OpenNefia.Core.UI.UiResult<T>.HasValue.get -> bool
OpenNefia.Core.UI.UiResult<T>.Value.get -> T!
OpenNefia.Core.UI.UiScroller
OpenNefia.Core.UI.UiScroller.Dx.get -> int
OpenNefia.Core.UI.UiScroller.Dy.get -> int
OpenNefia.Core.UI.UiScroller.GetPositionDiff(float dt, out int outDx, out int outDy) -> void
OpenNefia.Core.UI.UiScroller.HandleKeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! evt) -> void
OpenNefia.Core.UI.UiScroller.HandleKeyBindUp(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! evt) -> void
OpenNefia.Core.UI.UiScroller.UiScroller() -> void
OpenNefia.Core.UI.Wisp.AttachedProperty
OpenNefia.Core.UI.Wisp.AttachedProperty.Changed.get -> OpenNefia.Core.UI.Wisp.AttachedPropertyChangedCallback?
OpenNefia.Core.UI.Wisp.AttachedProperty.DefaultValue.get -> object?
OpenNefia.Core.UI.Wisp.AttachedProperty.Name.get -> string!
OpenNefia.Core.UI.Wisp.AttachedProperty.OwningType.get -> System.Type!
OpenNefia.Core.UI.Wisp.AttachedProperty.PropertyType.get -> System.Type!
OpenNefia.Core.UI.Wisp.AttachedProperty.Validate.get -> System.Func<object?, bool>?
OpenNefia.Core.UI.Wisp.AttachedProperty<T>
OpenNefia.Core.UI.Wisp.AttachedProperty<T>.Changed.get -> OpenNefia.Core.UI.Wisp.AttachedPropertyChangedCallback<T>?
OpenNefia.Core.UI.Wisp.AttachedProperty<T>.DefaultValue.get -> T
OpenNefia.Core.UI.Wisp.AttachedProperty<T>.Validate.get -> System.Func<T, bool>?
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedCallback
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedCallback<T>
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs.AttachedPropertyChangedEventArgs() -> void
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs.AttachedPropertyChangedEventArgs(object? newValue, object? oldValue) -> void
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs.NewValue.get -> object?
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs.OldValue.get -> object?
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs<T>
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs<T>.AttachedPropertyChangedEventArgs() -> void
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs<T>.AttachedPropertyChangedEventArgs(T newValue, T oldValue) -> void
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs<T>.NewValue.get -> T
OpenNefia.Core.UI.Wisp.AttachedPropertyChangedEventArgs<T>.OldValue.get -> T
OpenNefia.Core.UI.Wisp.Controls.BaseButton
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ActionMode
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ActionMode.Press = 0 -> OpenNefia.Core.UI.Wisp.Controls.BaseButton.ActionMode
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ActionMode.Release = 1 -> OpenNefia.Core.UI.Wisp.Controls.BaseButton.ActionMode
OpenNefia.Core.UI.Wisp.Controls.BaseButton.BaseButton() -> void
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonEventArgs
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonEventArgs.Button.get -> OpenNefia.Core.UI.Wisp.Controls.BaseButton!
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonEventArgs.ButtonEventArgs(OpenNefia.Core.UI.Wisp.Controls.BaseButton! button, OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonEventArgs.Event.get -> OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs!
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonToggledEventArgs
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonToggledEventArgs.ButtonToggledEventArgs(bool pressed, OpenNefia.Core.UI.Wisp.Controls.BaseButton! button, OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonToggledEventArgs.Pressed.get -> bool
OpenNefia.Core.UI.Wisp.Controls.BaseButton.Disabled.get -> bool
OpenNefia.Core.UI.Wisp.Controls.BaseButton.Disabled.set -> void
OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawMode.get -> OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum
OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum
OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum.Disabled = 3 -> OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum
OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum.Hover = 2 -> OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum
OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum.Normal = 0 -> OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum
OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum.Pressed = 1 -> OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeEnum
OpenNefia.Core.UI.Wisp.Controls.BaseButton.EnableAllKeybinds.get -> bool
OpenNefia.Core.UI.Wisp.Controls.BaseButton.EnableAllKeybinds.set -> void
OpenNefia.Core.UI.Wisp.Controls.BaseButton.Group.get -> OpenNefia.Core.UI.Wisp.Controls.ButtonGroup?
OpenNefia.Core.UI.Wisp.Controls.BaseButton.Group.set -> void
OpenNefia.Core.UI.Wisp.Controls.BaseButton.IsHovered.get -> bool
OpenNefia.Core.UI.Wisp.Controls.BaseButton.Mode.get -> OpenNefia.Core.UI.Wisp.Controls.BaseButton.ActionMode
OpenNefia.Core.UI.Wisp.Controls.BaseButton.Mode.set -> void
OpenNefia.Core.UI.Wisp.Controls.BaseButton.OnButtonDown -> System.Action<OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.BaseButton.OnButtonUp -> System.Action<OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.BaseButton.OnPressed -> System.Action<OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.BaseButton.OnToggled -> System.Action<OpenNefia.Core.UI.Wisp.Controls.BaseButton.ButtonToggledEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.BaseButton.Pressed.get -> bool
OpenNefia.Core.UI.Wisp.Controls.BaseButton.Pressed.set -> void
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ToggleMode.get -> bool
OpenNefia.Core.UI.Wisp.Controls.BaseButton.ToggleMode.set -> void
OpenNefia.Core.UI.Wisp.Controls.BoxContainer
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.Align.get -> OpenNefia.Core.UI.Wisp.Controls.BoxContainer.AlignMode
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.Align.set -> void
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.AlignMode
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.AlignMode.Begin = 0 -> OpenNefia.Core.UI.Wisp.Controls.BoxContainer.AlignMode
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.AlignMode.Center = 1 -> OpenNefia.Core.UI.Wisp.Controls.BoxContainer.AlignMode
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.AlignMode.End = 2 -> OpenNefia.Core.UI.Wisp.Controls.BoxContainer.AlignMode
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.BoxContainer() -> void
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.LayoutOrientation
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.LayoutOrientation.Horizontal = 0 -> OpenNefia.Core.UI.Wisp.Controls.BoxContainer.LayoutOrientation
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.LayoutOrientation.Vertical = 1 -> OpenNefia.Core.UI.Wisp.Controls.BoxContainer.LayoutOrientation
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.Orientation.get -> OpenNefia.Core.UI.Wisp.Controls.BoxContainer.LayoutOrientation
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.Orientation.set -> void
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.SeparationOverride.get -> int?
OpenNefia.Core.UI.Wisp.Controls.BoxContainer.SeparationOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.Button
OpenNefia.Core.UI.Wisp.Controls.Button.Button() -> void
OpenNefia.Core.UI.Wisp.Controls.Button.ClipText.get -> bool
OpenNefia.Core.UI.Wisp.Controls.Button.ClipText.set -> void
OpenNefia.Core.UI.Wisp.Controls.Button.Label.get -> OpenNefia.Core.UI.Wisp.Controls.Label!
OpenNefia.Core.UI.Wisp.Controls.Button.Text.get -> string?
OpenNefia.Core.UI.Wisp.Controls.Button.Text.set -> void
OpenNefia.Core.UI.Wisp.Controls.Button.TextAlign.get -> OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode
OpenNefia.Core.UI.Wisp.Controls.Button.TextAlign.set -> void
OpenNefia.Core.UI.Wisp.Controls.ButtonGroup
OpenNefia.Core.UI.Wisp.Controls.ButtonGroup.ButtonGroup() -> void
OpenNefia.Core.UI.Wisp.Controls.CheckBox
OpenNefia.Core.UI.Wisp.Controls.CheckBox.CheckBox() -> void
OpenNefia.Core.UI.Wisp.Controls.CheckBox.ClipText.get -> bool
OpenNefia.Core.UI.Wisp.Controls.CheckBox.ClipText.set -> void
OpenNefia.Core.UI.Wisp.Controls.CheckBox.Label.get -> OpenNefia.Core.UI.Wisp.Controls.Label!
OpenNefia.Core.UI.Wisp.Controls.CheckBox.Text.get -> string?
OpenNefia.Core.UI.Wisp.Controls.CheckBox.Text.set -> void
OpenNefia.Core.UI.Wisp.Controls.CheckBox.TextAlign.get -> OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode
OpenNefia.Core.UI.Wisp.Controls.CheckBox.TextAlign.set -> void
OpenNefia.Core.UI.Wisp.Controls.CheckBox.TextureRect.get -> OpenNefia.Core.UI.Wisp.Controls.TextureRect!
OpenNefia.Core.UI.Wisp.Controls.ChipView
OpenNefia.Core.UI.Wisp.Controls.ChipView.Chip.get -> OpenNefia.Core.GameObjects.ChipComponent?
OpenNefia.Core.UI.Wisp.Controls.ChipView.Chip.set -> void
OpenNefia.Core.UI.Wisp.Controls.ChipView.ChipView() -> void
OpenNefia.Core.UI.Wisp.Controls.ChipView.Scale.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Wisp.Controls.ChipView.Scale.set -> void
OpenNefia.Core.UI.Wisp.Controls.Container
OpenNefia.Core.UI.Wisp.Controls.Container.Container() -> void
OpenNefia.Core.UI.Wisp.Controls.ContainerButton
OpenNefia.Core.UI.Wisp.Controls.ContainerButton.ContainerButton() -> void
OpenNefia.Core.UI.Wisp.Controls.Dimension
OpenNefia.Core.UI.Wisp.Controls.Dimension.Column = 0 -> OpenNefia.Core.UI.Wisp.Controls.Dimension
OpenNefia.Core.UI.Wisp.Controls.Dimension.Row = 1 -> OpenNefia.Core.UI.Wisp.Controls.Dimension
OpenNefia.Core.UI.Wisp.Controls.GridContainer
OpenNefia.Core.UI.Wisp.Controls.GridContainer.AutoExpand.get -> bool
OpenNefia.Core.UI.Wisp.Controls.GridContainer.AutoExpand.set -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.Columns.get -> int
OpenNefia.Core.UI.Wisp.Controls.GridContainer.Columns.set -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.ExpandBackwards.get -> bool
OpenNefia.Core.UI.Wisp.Controls.GridContainer.ExpandBackwards.set -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.GridContainer() -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.HSeparationOverride.get -> int?
OpenNefia.Core.UI.Wisp.Controls.GridContainer.HSeparationOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.LimitedDimension.get -> OpenNefia.Core.UI.Wisp.Controls.Dimension
OpenNefia.Core.UI.Wisp.Controls.GridContainer.LimitedDimension.set -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.LimitType.get -> OpenNefia.Core.UI.Wisp.Controls.LimitType
OpenNefia.Core.UI.Wisp.Controls.GridContainer.MaxGridHeight.set -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.MaxGridWidth.set -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.Rows.get -> int
OpenNefia.Core.UI.Wisp.Controls.GridContainer.Rows.set -> void
OpenNefia.Core.UI.Wisp.Controls.GridContainer.UnlimitedDimension.get -> OpenNefia.Core.UI.Wisp.Controls.Dimension
OpenNefia.Core.UI.Wisp.Controls.GridContainer.VSeparationOverride.get -> int?
OpenNefia.Core.UI.Wisp.Controls.GridContainer.VSeparationOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.HScrollBar
OpenNefia.Core.UI.Wisp.Controls.HScrollBar.HScrollBar() -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList
OpenNefia.Core.UI.Wisp.Controls.ItemList.ActualBackground.get -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox!
OpenNefia.Core.UI.Wisp.Controls.ItemList.ActualDisabledItemBackground.get -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox!
OpenNefia.Core.UI.Wisp.Controls.ItemList.ActualFont.get -> OpenNefia.Core.Rendering.FontSpec!
OpenNefia.Core.UI.Wisp.Controls.ItemList.ActualFontColor.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.UI.Wisp.Controls.ItemList.ActualItemBackground.get -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox!
OpenNefia.Core.UI.Wisp.Controls.ItemList.ActualSelectedItemBackground.get -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox!
OpenNefia.Core.UI.Wisp.Controls.ItemList.Add(OpenNefia.Core.UI.Wisp.Controls.ItemList.Item! item) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.AddItem(string! text, OpenNefia.Core.Rendering.IAssetInstance? icon = null, bool selectable = true) -> OpenNefia.Core.UI.Wisp.Controls.ItemList.Item!
OpenNefia.Core.UI.Wisp.Controls.ItemList.ButtonDeselectDelay.get -> int
OpenNefia.Core.UI.Wisp.Controls.ItemList.ButtonDeselectDelay.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Clear() -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ClearSelected(int? except = null) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Contains(OpenNefia.Core.UI.Wisp.Controls.ItemList.Item! item) -> bool
OpenNefia.Core.UI.Wisp.Controls.ItemList.CopyTo(OpenNefia.Core.UI.Wisp.Controls.ItemList.Item![]! array, int arrayIndex) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Count.get -> int
OpenNefia.Core.UI.Wisp.Controls.ItemList.DrawTextInternal(Love.Text! text, OpenNefia.Core.Maths.UIBox2 box) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.EnsureCurrentIsVisible() -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.GetEnumerator() -> System.Collections.Generic.IEnumerator<OpenNefia.Core.UI.Wisp.Controls.ItemList.Item!>!
OpenNefia.Core.UI.Wisp.Controls.ItemList.GetItemAtPosition(OpenNefia.Core.Maths.Vector2 position, bool exact = false) -> int
OpenNefia.Core.UI.Wisp.Controls.ItemList.GetSelected() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.UI.Wisp.Controls.ItemList.Item!>!
OpenNefia.Core.UI.Wisp.Controls.ItemList.IndexOf(OpenNefia.Core.UI.Wisp.Controls.ItemList.Item! item) -> int
OpenNefia.Core.UI.Wisp.Controls.ItemList.Insert(int index, OpenNefia.Core.UI.Wisp.Controls.ItemList.Item! item) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.IsReadOnly.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.BakedText.get -> Love.Text?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.BakedText.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Disabled.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Disabled.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Icon.get -> OpenNefia.Core.Rendering.IAssetInstance?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Icon.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.IconModulate.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.IconModulate.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.IconRegion.get -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.IconRegion.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.IconSize.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Item(OpenNefia.Core.UI.Wisp.Controls.ItemList! owner) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Metadata.get -> object?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Metadata.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.OnDeselected -> System.Action<OpenNefia.Core.UI.Wisp.Controls.ItemList.Item!>?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.OnSelected -> System.Action<OpenNefia.Core.UI.Wisp.Controls.ItemList.Item!>?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Owner.get -> OpenNefia.Core.UI.Wisp.Controls.ItemList!
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Region.get -> OpenNefia.Core.Maths.UIBox2?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Region.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Selectable.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Selectable.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Selected.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Selected.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Text.get -> string?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.Text.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.TooltipEnabled.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.TooltipEnabled.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.TooltipText.get -> string?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Item.TooltipText.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemList() -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListDeselectedEventArgs
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListDeselectedEventArgs.ItemIndex -> int
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListDeselectedEventArgs.ItemListDeselectedEventArgs(int itemIndex, OpenNefia.Core.UI.Wisp.Controls.ItemList! list) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListEventArgs
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListEventArgs.ItemList.get -> OpenNefia.Core.UI.Wisp.Controls.ItemList!
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListEventArgs.ItemListEventArgs(OpenNefia.Core.UI.Wisp.Controls.ItemList! list) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListHoverEventArgs
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListHoverEventArgs.ItemIndex -> int
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListHoverEventArgs.ItemListHoverEventArgs(int itemIndex, OpenNefia.Core.UI.Wisp.Controls.ItemList! list) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectedEventArgs
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectedEventArgs.ItemIndex -> int
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectedEventArgs.ItemListSelectedEventArgs(int itemIndex, OpenNefia.Core.UI.Wisp.Controls.ItemList! list) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode.Button = 3 -> OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode.Multiple = 2 -> OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode.None = 0 -> OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode
OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode.Single = 1 -> OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode
OpenNefia.Core.UI.Wisp.Controls.ItemList.OnItemDeselected -> System.Action<OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListDeselectedEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.ItemList.OnItemHover -> System.Action<OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListHoverEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.ItemList.OnItemSelected -> System.Action<OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectedEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.ItemList.Remove(OpenNefia.Core.UI.Wisp.Controls.ItemList.Item! item) -> bool
OpenNefia.Core.UI.Wisp.Controls.ItemList.RemoveAt(int index) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ScrollFollowing.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ItemList.ScrollFollowing.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.ScrollToBottom() -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.SelectMode.get -> OpenNefia.Core.UI.Wisp.Controls.ItemList.ItemListSelectMode
OpenNefia.Core.UI.Wisp.Controls.ItemList.SelectMode.set -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.Sort(System.Comparison<OpenNefia.Core.UI.Wisp.Controls.ItemList.Item!>! comparison) -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.SortItemsByText() -> void
OpenNefia.Core.UI.Wisp.Controls.ItemList.this[int index].get -> OpenNefia.Core.UI.Wisp.Controls.ItemList.Item!
OpenNefia.Core.UI.Wisp.Controls.ItemList.this[int index].set -> void
OpenNefia.Core.UI.Wisp.Controls.Label
OpenNefia.Core.UI.Wisp.Controls.Label.Align.get -> OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.Align.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode.Center = 1 -> OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode.Fill = 3 -> OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode.Left = 0 -> OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode.Right = 2 -> OpenNefia.Core.UI.Wisp.Controls.Label.AlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.ClipText.get -> bool
OpenNefia.Core.UI.Wisp.Controls.Label.ClipText.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.FontColorOverride.get -> OpenNefia.Core.Maths.Color?
OpenNefia.Core.UI.Wisp.Controls.Label.FontColorOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.FontColorShadowOverride.get -> OpenNefia.Core.Maths.Color?
OpenNefia.Core.UI.Wisp.Controls.Label.FontColorShadowOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.FontOverride.get -> OpenNefia.Core.Rendering.FontSpec?
OpenNefia.Core.UI.Wisp.Controls.Label.FontOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.Label() -> void
OpenNefia.Core.UI.Wisp.Controls.Label.ShadowOffsetXOverride.get -> int?
OpenNefia.Core.UI.Wisp.Controls.Label.ShadowOffsetXOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.ShadowOffsetYOverride.get -> int?
OpenNefia.Core.UI.Wisp.Controls.Label.ShadowOffsetYOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.Text.get -> string?
OpenNefia.Core.UI.Wisp.Controls.Label.Text.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.VAlign.get -> OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.VAlign.set -> void
OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode.Bottom = 2 -> OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode.Center = 1 -> OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode.Fill = 3 -> OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode
OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode.Top = 0 -> OpenNefia.Core.UI.Wisp.Controls.Label.VAlignMode
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.Debug.get -> bool
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.Debug.set -> void
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection.Begin = 1 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection.Both = 2 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection.Constrain = 3 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection.End = 0 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.InheritChildMeasure.get -> bool
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.InheritChildMeasure.set -> void
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutContainer() -> void
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.BottomLeft = 2 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.BottomRight = 3 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.BottomWide = 12 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.Center = 8 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.CenterBottom = 7 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.CenterLeft = 4 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.CenterRight = 6 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.CenterTop = 5 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.HorizontalCenterWide = 14 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.LeftWide = 9 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.RightWide = 11 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.TopLeft = 0 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.TopRight = 1 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.TopWide = 10 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.VerticalCenterWide = 13 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset.Wide = 15 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode.KeepHeight = 2 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode.KeepSize = OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode.KeepWidth | OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode.KeepHeight -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode.KeepWidth = 1 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode
OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode.MinSize = 0 -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode
OpenNefia.Core.UI.Wisp.Controls.LimitType
OpenNefia.Core.UI.Wisp.Controls.LimitType.Count = 0 -> OpenNefia.Core.UI.Wisp.Controls.LimitType
OpenNefia.Core.UI.Wisp.Controls.LimitType.Size = 1 -> OpenNefia.Core.UI.Wisp.Controls.LimitType
OpenNefia.Core.UI.Wisp.Controls.LineEdit
OpenNefia.Core.UI.Wisp.Controls.LineEdit.Clear() -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.CursorPosition.get -> int
OpenNefia.Core.UI.Wisp.Controls.LineEdit.CursorPosition.set -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.Editable.get -> bool
OpenNefia.Core.UI.Wisp.Controls.LineEdit.Editable.set -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.IgnoreNext.get -> bool
OpenNefia.Core.UI.Wisp.Controls.LineEdit.IgnoreNext.set -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.InsertAtCursor(string! text) -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.IsValid.get -> System.Func<string!, bool>?
OpenNefia.Core.UI.Wisp.Controls.LineEdit.IsValid.set -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEdit() -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs
OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs.Control.get -> OpenNefia.Core.UI.Wisp.Controls.LineEdit!
OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs.LineEditEventArgs(OpenNefia.Core.UI.Wisp.Controls.LineEdit! control, string! text) -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs.Text.get -> string!
OpenNefia.Core.UI.Wisp.Controls.LineEdit.OnFocusEnter -> System.Action<OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.LineEdit.OnFocusExit -> System.Action<OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.LineEdit.OnTabComplete -> System.Action<OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.LineEdit.OnTextChanged -> System.Action<OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.LineEdit.OnTextEntered -> System.Action<OpenNefia.Core.UI.Wisp.Controls.LineEdit.LineEditEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.LineEdit.PlaceHolder.get -> string?
OpenNefia.Core.UI.Wisp.Controls.LineEdit.PlaceHolder.set -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.SelectedText.get -> System.ReadOnlySpan<char>
OpenNefia.Core.UI.Wisp.Controls.LineEdit.SelectionLength.get -> int
OpenNefia.Core.UI.Wisp.Controls.LineEdit.SelectionLower.get -> int
OpenNefia.Core.UI.Wisp.Controls.LineEdit.SelectionStart.get -> int
OpenNefia.Core.UI.Wisp.Controls.LineEdit.SelectionStart.set -> void
OpenNefia.Core.UI.Wisp.Controls.LineEdit.SelectionUpper.get -> int
OpenNefia.Core.UI.Wisp.Controls.LineEdit.SetText(string! newText) -> bool
OpenNefia.Core.UI.Wisp.Controls.LineEdit.Text.get -> string!
OpenNefia.Core.UI.Wisp.Controls.LineEdit.Text.set -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton
OpenNefia.Core.UI.Wisp.Controls.OptionButton.AddItem(Love.Image! icon, string! label, int? id = null) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.AddItem(string! label, int? id = null) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.Clear() -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.GetIdx(int id) -> int
OpenNefia.Core.UI.Wisp.Controls.OptionButton.GetItemId(int idx) -> int
OpenNefia.Core.UI.Wisp.Controls.OptionButton.GetItemMetadata(int idx) -> object?
OpenNefia.Core.UI.Wisp.Controls.OptionButton.HideTriangle.get -> bool
OpenNefia.Core.UI.Wisp.Controls.OptionButton.HideTriangle.set -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.IsItemDisabled(int idx) -> bool
OpenNefia.Core.UI.Wisp.Controls.OptionButton.ItemCount.get -> int
OpenNefia.Core.UI.Wisp.Controls.OptionButton.ItemSelectedEventArgs
OpenNefia.Core.UI.Wisp.Controls.OptionButton.ItemSelectedEventArgs.Button.get -> OpenNefia.Core.UI.Wisp.Controls.OptionButton!
OpenNefia.Core.UI.Wisp.Controls.OptionButton.ItemSelectedEventArgs.Id.get -> int
OpenNefia.Core.UI.Wisp.Controls.OptionButton.ItemSelectedEventArgs.ItemSelectedEventArgs(int id, OpenNefia.Core.UI.Wisp.Controls.OptionButton! button) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.OnItemSelected -> System.Action<OpenNefia.Core.UI.Wisp.Controls.OptionButton.ItemSelectedEventArgs!>?
OpenNefia.Core.UI.Wisp.Controls.OptionButton.OptionButton() -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.OptionStyleClasses.get -> System.Collections.Generic.ICollection<string!>!
OpenNefia.Core.UI.Wisp.Controls.OptionButton.Prefix.get -> string!
OpenNefia.Core.UI.Wisp.Controls.OptionButton.Prefix.set -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.PrefixMargin.get -> bool
OpenNefia.Core.UI.Wisp.Controls.OptionButton.PrefixMargin.set -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.RemoveItem(int idx) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.Select(int idx) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.SelectedId.get -> int
OpenNefia.Core.UI.Wisp.Controls.OptionButton.SelectedMetadata.get -> object?
OpenNefia.Core.UI.Wisp.Controls.OptionButton.SelectId(int id) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.SetItemDisabled(int idx, bool disabled) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.SetItemId(int idx, int id) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.SetItemMetadata(int idx, object! metadata) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.SetItemText(int idx, string! text) -> void
OpenNefia.Core.UI.Wisp.Controls.OptionButton.TrySelect(int idx) -> bool
OpenNefia.Core.UI.Wisp.Controls.OptionButton.TrySelectId(int id) -> bool
OpenNefia.Core.UI.Wisp.Controls.PanelContainer
OpenNefia.Core.UI.Wisp.Controls.PanelContainer.PanelContainer() -> void
OpenNefia.Core.UI.Wisp.Controls.PanelContainer.PanelOverride.get -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox?
OpenNefia.Core.UI.Wisp.Controls.PanelContainer.PanelOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.Popup
OpenNefia.Core.UI.Wisp.Controls.Popup.Close() -> void
OpenNefia.Core.UI.Wisp.Controls.Popup.OnPopupHide -> System.Action?
OpenNefia.Core.UI.Wisp.Controls.Popup.Open(OpenNefia.Core.Maths.UIBox2? box = null, OpenNefia.Core.Maths.Vector2? altPos = null) -> void
OpenNefia.Core.UI.Wisp.Controls.Popup.Popup() -> void
OpenNefia.Core.UI.Wisp.Controls.PopupContainer
OpenNefia.Core.UI.Wisp.Controls.PopupContainer.PopupContainer() -> void
OpenNefia.Core.UI.Wisp.Controls.Range
OpenNefia.Core.UI.Wisp.Controls.Range.ClampValue(float value) -> float
OpenNefia.Core.UI.Wisp.Controls.Range.GetAsRatio() -> float
OpenNefia.Core.UI.Wisp.Controls.Range.MaxValue.get -> float
OpenNefia.Core.UI.Wisp.Controls.Range.MaxValue.set -> void
OpenNefia.Core.UI.Wisp.Controls.Range.MinValue.get -> float
OpenNefia.Core.UI.Wisp.Controls.Range.MinValue.set -> void
OpenNefia.Core.UI.Wisp.Controls.Range.OnValueChanged -> System.Action<OpenNefia.Core.UI.Wisp.Controls.Range!>?
OpenNefia.Core.UI.Wisp.Controls.Range.Page.get -> float
OpenNefia.Core.UI.Wisp.Controls.Range.Page.set -> void
OpenNefia.Core.UI.Wisp.Controls.Range.Range() -> void
OpenNefia.Core.UI.Wisp.Controls.Range.SetAsRatio(float value) -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollBar
OpenNefia.Core.UI.Wisp.Controls.ScrollBar.IsAtEnd.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ScrollBar.MoveToEnd() -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollBar.OrientationMode
OpenNefia.Core.UI.Wisp.Controls.ScrollBar.OrientationMode.Horizontal = 0 -> OpenNefia.Core.UI.Wisp.Controls.ScrollBar.OrientationMode
OpenNefia.Core.UI.Wisp.Controls.ScrollBar.OrientationMode.Vertical = 1 -> OpenNefia.Core.UI.Wisp.Controls.ScrollBar.OrientationMode
OpenNefia.Core.UI.Wisp.Controls.ScrollBar.ScrollBar(OpenNefia.Core.UI.Wisp.Controls.ScrollBar.OrientationMode orientation) -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollBar.ValueTarget.get -> float
OpenNefia.Core.UI.Wisp.Controls.ScrollBar.ValueTarget.set -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.HScrollEnabled.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.HScrollEnabled.set -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ReturnMeasure.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ReturnMeasure.set -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ScrollContainer() -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ScrollSpeedX.get -> int
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ScrollSpeedX.set -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ScrollSpeedY.get -> int
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ScrollSpeedY.set -> void
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.VScrollEnabled.get -> bool
OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.VScrollEnabled.set -> void
OpenNefia.Core.UI.Wisp.Controls.TabContainer
OpenNefia.Core.UI.Wisp.Controls.TabContainer.CurrentTab.get -> int
OpenNefia.Core.UI.Wisp.Controls.TabContainer.CurrentTab.set -> void
OpenNefia.Core.UI.Wisp.Controls.TabContainer.GetActualTabTitle(int tab) -> string!
OpenNefia.Core.UI.Wisp.Controls.TabContainer.GetTabVisible(int tab) -> bool
OpenNefia.Core.UI.Wisp.Controls.TabContainer.OnTabChanged -> System.Action<int>?
OpenNefia.Core.UI.Wisp.Controls.TabContainer.SetTabTitle(int tab, string! title) -> void
OpenNefia.Core.UI.Wisp.Controls.TabContainer.SetTabVisible(int tab, bool visible) -> void
OpenNefia.Core.UI.Wisp.Controls.TabContainer.TabContainer() -> void
OpenNefia.Core.UI.Wisp.Controls.TabContainer.TabsVisible.get -> bool
OpenNefia.Core.UI.Wisp.Controls.TabContainer.TabsVisible.set -> void
OpenNefia.Core.UI.Wisp.Controls.TextureButton
OpenNefia.Core.UI.Wisp.Controls.TextureButton.AssetNormal.get -> OpenNefia.Core.Rendering.IAssetInstance?
OpenNefia.Core.UI.Wisp.Controls.TextureButton.AssetNormal.set -> void
OpenNefia.Core.UI.Wisp.Controls.TextureButton.Scale.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Wisp.Controls.TextureButton.Scale.set -> void
OpenNefia.Core.UI.Wisp.Controls.TextureButton.TextureButton() -> void
OpenNefia.Core.UI.Wisp.Controls.TextureRect
OpenNefia.Core.UI.Wisp.Controls.TextureRect.CanShrink.get -> bool
OpenNefia.Core.UI.Wisp.Controls.TextureRect.CanShrink.set -> void
OpenNefia.Core.UI.Wisp.Controls.TextureRect.GetDrawDimensions(OpenNefia.Core.Rendering.IAssetInstance! asset) -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Wisp.Controls.TextureRect.ShaderOverride.get -> OpenNefia.Core.Rendering.IShaderInstance?
OpenNefia.Core.UI.Wisp.Controls.TextureRect.ShaderOverride.set -> void
OpenNefia.Core.UI.Wisp.Controls.TextureRect.Stretch.get -> OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.Stretch.set -> void
OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode.Keep = 3 -> OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode.KeepAspect = 5 -> OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode.KeepAspectCentered = 7 -> OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode.KeepAspectCovered = 8 -> OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode.KeepCentered = 4 -> OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode.Scale = 1 -> OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode.Tile = 2 -> OpenNefia.Core.UI.Wisp.Controls.TextureRect.StretchMode
OpenNefia.Core.UI.Wisp.Controls.TextureRect.Texture.get -> OpenNefia.Core.Rendering.IAssetInstance?
OpenNefia.Core.UI.Wisp.Controls.TextureRect.Texture.set -> void
OpenNefia.Core.UI.Wisp.Controls.TextureRect.TextureRect() -> void
OpenNefia.Core.UI.Wisp.Controls.TextureRect.TextureScale.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Wisp.Controls.TextureRect.TextureScale.set -> void
OpenNefia.Core.UI.Wisp.Controls.TileView
OpenNefia.Core.UI.Wisp.Controls.TileView.Scale.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Wisp.Controls.TileView.Scale.set -> void
OpenNefia.Core.UI.Wisp.Controls.TileView.Tile.get -> OpenNefia.Core.Maps.TilePrototype?
OpenNefia.Core.UI.Wisp.Controls.TileView.Tile.set -> void
OpenNefia.Core.UI.Wisp.Controls.TileView.TileView() -> void
OpenNefia.Core.UI.Wisp.Controls.VScrollBar
OpenNefia.Core.UI.Wisp.Controls.VScrollBar.VScrollBar() -> void
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.BaseWindow() -> void
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode.Bottom = 4 -> OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode.Left = 8 -> OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode.Move = 1 -> OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode.None = 0 -> OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode.Right = 16 -> OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode.Top = 2 -> OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.IsAtFront() -> bool
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.IsOpen.get -> bool
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.MoveToFront() -> void
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.OnClose -> System.Action?
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.Open(OpenNefia.Core.UI.Wisp.IWispLayer! layer) -> void
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.OpenAt(OpenNefia.Core.UI.Wisp.IWispLayer! layer, OpenNefia.Core.Maths.Vector2 pos) -> void
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.OpenCentered(OpenNefia.Core.UI.Wisp.IWispLayer! layer) -> void
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.OpenToLeft(OpenNefia.Core.UI.Wisp.IWispLayer! layer) -> void
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.Resizable.get -> bool
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.Resizable.set -> void
OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow._firstTimeOpened -> bool
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.CanClose.get -> bool
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.CanClose.set -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.Contents.get -> OpenNefia.Core.UI.Wisp.WispControl!
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.DefaultWindow() -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.HeaderClass.get -> string?
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.HeaderClass.set -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.Title.get -> string?
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.Title.set -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.TitleClass.get -> string?
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.TitleClass.set -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Add(OpenNefia.Core.UI.Element.UiElement! item) -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Clear() -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Contains(OpenNefia.Core.UI.Element.UiElement! item) -> bool
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.CopyTo(OpenNefia.Core.UI.Element.UiElement![]! array, int arrayIndex) -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Enumerator
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Enumerator.Current.get -> OpenNefia.Core.UI.Element.UiElement!
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Enumerator.Dispose() -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Enumerator.Enumerator() -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Enumerator.MoveNext() -> bool
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Enumerator.Reset() -> void
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.GetEnumerator() -> OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Enumerator
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.IsReadOnly.get -> bool
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.Remove(OpenNefia.Core.UI.Element.UiElement! item) -> bool
OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.WispContentCollection.WispContentCollection(OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow! owner) -> void
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.Bottom = 8 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.BottomLeft = 9 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.BottomRight = 12 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.Center = 0 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.Left = 1 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.Right = 4 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.Top = 2 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.TopLeft = 3 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor.TopRight = 6 -> OpenNefia.Core.UI.Wisp.CustomControls.WindowAnchor
OpenNefia.Core.UI.Wisp.Drawing.StyleBox
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.ContentMarginBottomOverride.get -> float?
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.ContentMarginBottomOverride.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.ContentMarginLeftOverride.get -> float?
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.ContentMarginLeftOverride.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.ContentMarginRightOverride.get -> float?
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.ContentMarginRightOverride.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.ContentMarginTopOverride.get -> float?
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.ContentMarginTopOverride.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Draw(OpenNefia.Core.Maths.UIBox2 box, OpenNefia.Core.Maths.Color tint) -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.GetContentBox(OpenNefia.Core.Maths.UIBox2 baseBox) -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.GetContentMargin(OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin margin) -> float
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.GetContentOffset(OpenNefia.Core.Maths.Vector2 basePosition) -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.GetEnvelopBox(OpenNefia.Core.Maths.Vector2 position, OpenNefia.Core.Maths.Vector2 dimensions) -> OpenNefia.Core.Maths.UIBox2
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.GetPadding(OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin margin) -> float
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.All = OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Vertical | OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Horizontal -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Bottom = 2 -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Horizontal = OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Right | OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Left -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Left = 8 -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.None = 0 -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Right = 4 -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Top = 1 -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Vertical = OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Top | OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin.Bottom -> OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.MinimumSize.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Padding.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.PaddingBottom.get -> float
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.PaddingBottom.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.PaddingLeft.get -> float
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.PaddingLeft.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.PaddingRight.get -> float
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.PaddingRight.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.PaddingTop.get -> float
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.PaddingTop.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.SetContentMarginOverride(OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin margin, float value) -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.SetPadding(OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin margin, float value) -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.StyleBox() -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBox.StyleBox(OpenNefia.Core.UI.Wisp.Drawing.StyleBox! other) -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxEmpty
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxEmpty.StyleBoxEmpty() -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.BackgroundColor.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.BackgroundColor.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.BorderColor.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.BorderColor.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.BorderThickness.get -> OpenNefia.Core.Maths.Thickness
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.BorderThickness.set -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.StyleBoxFlat() -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.StyleBoxFlat(OpenNefia.Core.Maths.Color backgroundColor) -> void
OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat.StyleBoxFlat(OpenNefia.Core.UI.Wisp.Drawing.StyleBoxFlat! other) -> void
OpenNefia.Core.UI.Wisp.IWispLayer
OpenNefia.Core.UI.Wisp.IWispLayer.Debug.get -> bool
OpenNefia.Core.UI.Wisp.IWispLayer.Debug.set -> void
OpenNefia.Core.UI.Wisp.IWispLayer.DebugClipping.get -> bool
OpenNefia.Core.UI.Wisp.IWispLayer.DebugClipping.set -> void
OpenNefia.Core.UI.Wisp.IWispLayer.GlobalTint.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.UI.Wisp.IWispLayer.ModalRoot.get -> OpenNefia.Core.UI.Wisp.Controls.PopupContainer!
OpenNefia.Core.UI.Wisp.IWispLayer.PopScissor() -> void
OpenNefia.Core.UI.Wisp.IWispLayer.PushScissor(OpenNefia.Core.Maths.UIBox2 scissor, bool ignoreParents = false) -> void
OpenNefia.Core.UI.Wisp.IWispLayer.WindowRoot.get -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer!
OpenNefia.Core.UI.Wisp.IWispLayer.WispRoot.get -> OpenNefia.Core.UI.Wisp.WispRoot!
OpenNefia.Core.UI.Wisp.IWispLayerExtensions
OpenNefia.Core.UI.Wisp.IWispManager
OpenNefia.Core.UI.Wisp.IWispManager.AddRoot(OpenNefia.Core.UI.Wisp.WispRoot! root) -> void
OpenNefia.Core.UI.Wisp.IWispManager.CursorChanged(OpenNefia.Core.UI.Wisp.WispControl! control) -> void
OpenNefia.Core.UI.Wisp.IWispManager.FrameUpdate(OpenNefia.Core.Timing.FrameEventArgs args) -> void
OpenNefia.Core.UI.Wisp.IWispManager.GetStyleFallback<T>() -> T
OpenNefia.Core.UI.Wisp.IWispManager.Initialize() -> void
OpenNefia.Core.UI.Wisp.IWispManager.QueueArrangeUpdate(OpenNefia.Core.UI.Wisp.WispControl! control) -> void
OpenNefia.Core.UI.Wisp.IWispManager.QueueMeasureUpdate(OpenNefia.Core.UI.Wisp.WispControl! control) -> void
OpenNefia.Core.UI.Wisp.IWispManager.QueueStyleUpdate(OpenNefia.Core.UI.Wisp.WispControl! control) -> void
OpenNefia.Core.UI.Wisp.IWispManager.RemoveRoot(OpenNefia.Core.UI.Wisp.WispRoot! root) -> void
OpenNefia.Core.UI.Wisp.IWispManager.Stylesheet.get -> OpenNefia.Core.UI.Wisp.Styling.Stylesheet?
OpenNefia.Core.UI.Wisp.IWispManager.Stylesheet.set -> void
OpenNefia.Core.UI.Wisp.Styling.IStylesheetManager
OpenNefia.Core.UI.Wisp.Styling.IStylesheetManager.GetStyleFallback<T>() -> T
OpenNefia.Core.UI.Wisp.Styling.IStylesheetManager.Initialize() -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelector
OpenNefia.Core.UI.Wisp.Styling.MutableSelector.MutableSelector() -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelector.Prop(string! key, object! value) -> OpenNefia.Core.UI.Wisp.Styling.MutableSelector!
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild.Child(OpenNefia.Core.UI.Wisp.Styling.Selector! child) -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild!
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild.ChildSelector.get -> OpenNefia.Core.UI.Wisp.Styling.Selector?
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild.ChildSelector.set -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild.MutableSelectorChild() -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild.Parent(OpenNefia.Core.UI.Wisp.Styling.Selector! parent) -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild!
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild.ParentSelector.get -> OpenNefia.Core.UI.Wisp.Styling.Selector?
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild.ParentSelector.set -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.Class(params string![]! classes) -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement!
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.Class(string! class) -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement!
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.Identifier(string! identifier) -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement!
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.MutableSelectorElement() -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.Pseudo(params string![]! classes) -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement!
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.Pseudo(string! class) -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement!
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.PseudoClasses.get -> System.Collections.Generic.List<string!>?
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.PseudoClasses.set -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.StyleClasses.get -> System.Collections.Generic.List<string!>?
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.StyleClasses.set -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.StyleIdentifier.get -> string?
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.StyleIdentifier.set -> void
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.Type.get -> System.Type?
OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement.Type.set -> void
OpenNefia.Core.UI.Wisp.Styling.Selector
OpenNefia.Core.UI.Wisp.Styling.Selector.Selector() -> void
OpenNefia.Core.UI.Wisp.Styling.SelectorChild
OpenNefia.Core.UI.Wisp.Styling.SelectorChild.Child.get -> OpenNefia.Core.UI.Wisp.Styling.Selector!
OpenNefia.Core.UI.Wisp.Styling.SelectorChild.Parent.get -> OpenNefia.Core.UI.Wisp.Styling.Selector!
OpenNefia.Core.UI.Wisp.Styling.SelectorChild.SelectorChild(OpenNefia.Core.UI.Wisp.Styling.Selector! parent, OpenNefia.Core.UI.Wisp.Styling.Selector! child) -> void
OpenNefia.Core.UI.Wisp.Styling.SelectorElement
OpenNefia.Core.UI.Wisp.Styling.SelectorElement.ElementClasses.get -> System.Collections.Generic.IReadOnlyList<string!>?
OpenNefia.Core.UI.Wisp.Styling.SelectorElement.ElementId.get -> string?
OpenNefia.Core.UI.Wisp.Styling.SelectorElement.ElementType.get -> System.Type?
OpenNefia.Core.UI.Wisp.Styling.SelectorElement.PseudoClasses.get -> System.Collections.Generic.IReadOnlyList<string!>?
OpenNefia.Core.UI.Wisp.Styling.SelectorElement.SelectorElement(System.Type? elementType, System.Collections.Generic.IEnumerable<string!>? elementClasses, string? elementId, System.Collections.Generic.IEnumerable<string!>? pseudoClass) -> void
OpenNefia.Core.UI.Wisp.Styling.StyleNano
OpenNefia.Core.UI.Wisp.Styling.StyleNano.BaseRules.get -> OpenNefia.Core.UI.Wisp.Styling.StyleRule![]!
OpenNefia.Core.UI.Wisp.Styling.StyleNano.StyleNano(OpenNefia.Core.ResourceManagement.IResourceCache! resourceCache) -> void
OpenNefia.Core.UI.Wisp.Styling.StyleNano.Stylesheet.get -> OpenNefia.Core.UI.Wisp.Styling.Stylesheet!
OpenNefia.Core.UI.Wisp.Styling.StyleProperty
OpenNefia.Core.UI.Wisp.Styling.StyleProperty.Name.get -> string!
OpenNefia.Core.UI.Wisp.Styling.StyleProperty.StyleProperty() -> void
OpenNefia.Core.UI.Wisp.Styling.StyleProperty.StyleProperty(string! name, object! value) -> void
OpenNefia.Core.UI.Wisp.Styling.StyleProperty.Value.get -> object!
OpenNefia.Core.UI.Wisp.Styling.StyleRule
OpenNefia.Core.UI.Wisp.Styling.StyleRule.Properties.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.UI.Wisp.Styling.StyleProperty>!
OpenNefia.Core.UI.Wisp.Styling.StyleRule.Selector.get -> OpenNefia.Core.UI.Wisp.Styling.Selector!
OpenNefia.Core.UI.Wisp.Styling.StyleRule.Specificity.get -> OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity
OpenNefia.Core.UI.Wisp.Styling.StyleRule.StyleRule(OpenNefia.Core.UI.Wisp.Styling.Selector! selector, System.Collections.Generic.IReadOnlyList<OpenNefia.Core.UI.Wisp.Styling.StyleProperty>! properties) -> void
OpenNefia.Core.UI.Wisp.Styling.Stylesheet
OpenNefia.Core.UI.Wisp.Styling.Stylesheet.Rules.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.UI.Wisp.Styling.StyleRule!>!
OpenNefia.Core.UI.Wisp.Styling.Stylesheet.Stylesheet(System.Collections.Generic.IReadOnlyList<OpenNefia.Core.UI.Wisp.Styling.StyleRule!>! rules) -> void
OpenNefia.Core.UI.Wisp.Styling.StylesheetHelpers
OpenNefia.Core.UI.Wisp.Styling.StylesheetLoadException
OpenNefia.Core.UI.Wisp.Styling.StylesheetLoadException.StylesheetLoadException(string? message) -> void
OpenNefia.Core.UI.Wisp.Styling.StylesheetManager
OpenNefia.Core.UI.Wisp.Styling.StylesheetManager.GetStyleFallback<T>() -> T
OpenNefia.Core.UI.Wisp.Styling.StylesheetManager.Initialize() -> void
OpenNefia.Core.UI.Wisp.Styling.StylesheetManager.StylesheetManager() -> void
OpenNefia.Core.UI.Wisp.Styling.StylesheetUtilities
OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity
OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.CompareTo(object? obj) -> int
OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.CompareTo(OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity other) -> int
OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.StyleSpecificity() -> void
OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.StyleSpecificity(int idSelectors, int classSelectors, int typeSelectors) -> void
OpenNefia.Core.UI.Wisp.WispControl
OpenNefia.Core.UI.Wisp.WispControl.ActualTint.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.UI.Wisp.WispControl.ActualTintSelf.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.UI.Wisp.WispControl.AddStyleClass(string! className) -> void
OpenNefia.Core.UI.Wisp.WispControl.AddStylePseudoClass(string! className) -> void
OpenNefia.Core.UI.Wisp.WispControl.AllAttachedProperties.get -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<OpenNefia.Core.UI.Wisp.AttachedProperty!, object?>>!
OpenNefia.Core.UI.Wisp.WispControl.Arrange(OpenNefia.Core.Maths.UIBox2 finalRect) -> void
OpenNefia.Core.UI.Wisp.WispControl.ArrangePixel(OpenNefia.Core.Maths.UIBox2i finalRect) -> void
OpenNefia.Core.UI.Wisp.WispControl.Class.get -> string?
OpenNefia.Core.UI.Wisp.WispControl.Class.set -> void
OpenNefia.Core.UI.Wisp.WispControl.DefaultCursorShape.get -> OpenNefia.Core.Graphics.CursorShape
OpenNefia.Core.UI.Wisp.WispControl.DefaultCursorShape.set -> void
OpenNefia.Core.UI.Wisp.WispControl.DesiredPixelSize.get -> OpenNefia.Core.Maths.Vector2i
OpenNefia.Core.UI.Wisp.WispControl.DesiredSize.get -> OpenNefia.Core.Maths.Vector2
OpenNefia.Core.UI.Wisp.WispControl.ForceRunStyleUpdate() -> void
OpenNefia.Core.UI.Wisp.WispControl.GetValue(OpenNefia.Core.UI.Wisp.AttachedProperty! property) -> object?
OpenNefia.Core.UI.Wisp.WispControl.GetValue<T>(OpenNefia.Core.UI.Wisp.AttachedProperty! property) -> T
OpenNefia.Core.UI.Wisp.WispControl.GetValue<T>(OpenNefia.Core.UI.Wisp.AttachedProperty<T>! property) -> T
OpenNefia.Core.UI.Wisp.WispControl.GetWispChild(int index) -> OpenNefia.Core.UI.Wisp.WispControl!
OpenNefia.Core.UI.Wisp.WispControl.GlobalPixelX.get -> int
OpenNefia.Core.UI.Wisp.WispControl.GlobalPixelY.get -> int
OpenNefia.Core.UI.Wisp.WispControl.GlobalX.get -> float
OpenNefia.Core.UI.Wisp.WispControl.GlobalY.get -> float
OpenNefia.Core.UI.Wisp.WispControl.HAlignment
OpenNefia.Core.UI.Wisp.WispControl.HAlignment.Center = 2 -> OpenNefia.Core.UI.Wisp.WispControl.HAlignment
OpenNefia.Core.UI.Wisp.WispControl.HAlignment.Left = 1 -> OpenNefia.Core.UI.Wisp.WispControl.HAlignment
OpenNefia.Core.UI.Wisp.WispControl.HAlignment.Right = 3 -> OpenNefia.Core.UI.Wisp.WispControl.HAlignment
OpenNefia.Core.UI.Wisp.WispControl.HAlignment.Stretch = 0 -> OpenNefia.Core.UI.Wisp.WispControl.HAlignment
OpenNefia.Core.UI.Wisp.WispControl.HasStyleClass(string! className) -> bool
OpenNefia.Core.UI.Wisp.WispControl.HasStylePseudoClass(string! className) -> bool
OpenNefia.Core.UI.Wisp.WispControl.HorizontalAlignment.get -> OpenNefia.Core.UI.Wisp.WispControl.HAlignment
OpenNefia.Core.UI.Wisp.WispControl.HorizontalAlignment.set -> void
OpenNefia.Core.UI.Wisp.WispControl.HorizontalExpand.get -> bool
OpenNefia.Core.UI.Wisp.WispControl.HorizontalExpand.set -> void
OpenNefia.Core.UI.Wisp.WispControl.InvalidateArrange() -> void
OpenNefia.Core.UI.Wisp.WispControl.InvalidateMeasure() -> void
OpenNefia.Core.UI.Wisp.WispControl.IsArrangeValid.get -> bool
OpenNefia.Core.UI.Wisp.WispControl.IsMeasureValid.get -> bool
OpenNefia.Core.UI.Wisp.WispControl.Margin.get -> OpenNefia.Core.Maths.Thickness
OpenNefia.Core.UI.Wisp.WispControl.Margin.set -> void
OpenNefia.Core.UI.Wisp.WispControl.Measure(OpenNefia.Core.Maths.Vector2 availableSize) -> void
OpenNefia.Core.UI.Wisp.WispControl.Name.get -> string?
OpenNefia.Core.UI.Wisp.WispControl.Name.set -> void
OpenNefia.Core.UI.Wisp.WispControl.OnVisibilityChanged -> System.Action<OpenNefia.Core.UI.Wisp.WispControl!>?
OpenNefia.Core.UI.Wisp.WispControl.RectClipContent.get -> bool
OpenNefia.Core.UI.Wisp.WispControl.RectClipContent.set -> void
OpenNefia.Core.UI.Wisp.WispControl.RectDrawClipMargin.get -> int
OpenNefia.Core.UI.Wisp.WispControl.RectDrawClipMargin.set -> void
OpenNefia.Core.UI.Wisp.WispControl.RemoveStyleClass(string! className) -> void
OpenNefia.Core.UI.Wisp.WispControl.RemoveStylePseudoClass(string! className) -> void
OpenNefia.Core.UI.Wisp.WispControl.SetOnlyStyleClass(string! className) -> void
OpenNefia.Core.UI.Wisp.WispControl.SetOnlyStylePseudoClass(string? className) -> void
OpenNefia.Core.UI.Wisp.WispControl.SetValue(OpenNefia.Core.UI.Wisp.AttachedProperty! property, object? value) -> void
OpenNefia.Core.UI.Wisp.WispControl.SetValue<T>(OpenNefia.Core.UI.Wisp.AttachedProperty! property, T value) -> void
OpenNefia.Core.UI.Wisp.WispControl.SetValue<T>(OpenNefia.Core.UI.Wisp.AttachedProperty<T>! property, T value) -> void
OpenNefia.Core.UI.Wisp.WispControl.SizeFlagsStretchRatio.get -> float
OpenNefia.Core.UI.Wisp.WispControl.SizeFlagsStretchRatio.set -> void
OpenNefia.Core.UI.Wisp.WispControl.StyleClasses.get -> System.Collections.Generic.ICollection<string!>!
OpenNefia.Core.UI.Wisp.WispControl.StyleIdentifier.get -> string?
OpenNefia.Core.UI.Wisp.WispControl.StyleIdentifier.set -> void
OpenNefia.Core.UI.Wisp.WispControl.StylePropertyDefault<T>(string! param, T defaultValue) -> T
OpenNefia.Core.UI.Wisp.WispControl.StylePseudoClass.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
OpenNefia.Core.UI.Wisp.WispControl.Stylesheet.get -> OpenNefia.Core.UI.Wisp.Styling.Stylesheet?
OpenNefia.Core.UI.Wisp.WispControl.Stylesheet.set -> void
OpenNefia.Core.UI.Wisp.WispControl.Tint.get -> OpenNefia.Core.Maths.Color?
OpenNefia.Core.UI.Wisp.WispControl.Tint.set -> void
OpenNefia.Core.UI.Wisp.WispControl.TintSelf.get -> OpenNefia.Core.Maths.Color?
OpenNefia.Core.UI.Wisp.WispControl.TintSelf.set -> void
OpenNefia.Core.UI.Wisp.WispControl.TryGetStyleProperty<T>(string! param, out T value) -> bool
OpenNefia.Core.UI.Wisp.WispControl.VAlignment
OpenNefia.Core.UI.Wisp.WispControl.VAlignment.Bottom = 3 -> OpenNefia.Core.UI.Wisp.WispControl.VAlignment
OpenNefia.Core.UI.Wisp.WispControl.VAlignment.Center = 2 -> OpenNefia.Core.UI.Wisp.WispControl.VAlignment
OpenNefia.Core.UI.Wisp.WispControl.VAlignment.Stretch = 0 -> OpenNefia.Core.UI.Wisp.WispControl.VAlignment
OpenNefia.Core.UI.Wisp.WispControl.VAlignment.Top = 1 -> OpenNefia.Core.UI.Wisp.WispControl.VAlignment
OpenNefia.Core.UI.Wisp.WispControl.VerticalAlignment.get -> OpenNefia.Core.UI.Wisp.WispControl.VAlignment
OpenNefia.Core.UI.Wisp.WispControl.VerticalAlignment.set -> void
OpenNefia.Core.UI.Wisp.WispControl.VerticalExpand.get -> bool
OpenNefia.Core.UI.Wisp.WispControl.VerticalExpand.set -> void
OpenNefia.Core.UI.Wisp.WispControl.VisibleInTree.get -> bool
OpenNefia.Core.UI.Wisp.WispControl.WispChildCount.get -> int
OpenNefia.Core.UI.Wisp.WispControl.WispChildren.get -> System.Collections.Generic.IEnumerable<OpenNefia.Core.UI.Wisp.WispControl!>!
OpenNefia.Core.UI.Wisp.WispControl.WispControl() -> void
OpenNefia.Core.UI.Wisp.WispControl.WispManager.get -> OpenNefia.Core.UI.Wisp.IWispManager!
OpenNefia.Core.UI.Wisp.WispControl.WispParent.get -> OpenNefia.Core.UI.Wisp.WispControl?
OpenNefia.Core.UI.Wisp.WispControl.WispRootLayer.get -> OpenNefia.Core.UI.Wisp.IWispLayer?
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.Debug.get -> bool
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.Debug.set -> void
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.DebugClipping.get -> bool
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.DebugClipping.set -> void
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.GlobalTint.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.ModalRoot.get -> OpenNefia.Core.UI.Wisp.Controls.PopupContainer!
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.PopScissor() -> void
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.PushScissor(OpenNefia.Core.Maths.UIBox2 scissor, bool ignoreParents = false) -> void
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.WindowRoot.get -> OpenNefia.Core.UI.Wisp.Controls.LayoutContainer!
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.WispLayerWithResult() -> void
OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.WispRoot.get -> OpenNefia.Core.UI.Wisp.WispRoot!
OpenNefia.Core.UI.Wisp.WispManager
OpenNefia.Core.UI.Wisp.WispManager.AddRoot(OpenNefia.Core.UI.Wisp.WispRoot! root) -> void
OpenNefia.Core.UI.Wisp.WispManager.CursorChanged(OpenNefia.Core.UI.Wisp.WispControl! control) -> void
OpenNefia.Core.UI.Wisp.WispManager.FrameUpdate(OpenNefia.Core.Timing.FrameEventArgs args) -> void
OpenNefia.Core.UI.Wisp.WispManager.GetStyleFallback<T>() -> T
OpenNefia.Core.UI.Wisp.WispManager.Initialize() -> void
OpenNefia.Core.UI.Wisp.WispManager.QueueArrangeUpdate(OpenNefia.Core.UI.Wisp.WispControl! control) -> void
OpenNefia.Core.UI.Wisp.WispManager.QueueMeasureUpdate(OpenNefia.Core.UI.Wisp.WispControl! control) -> void
OpenNefia.Core.UI.Wisp.WispManager.QueueStyleUpdate(OpenNefia.Core.UI.Wisp.WispControl! control) -> void
OpenNefia.Core.UI.Wisp.WispManager.RemoveRoot(OpenNefia.Core.UI.Wisp.WispRoot! root) -> void
OpenNefia.Core.UI.Wisp.WispManager.Stylesheet.get -> OpenNefia.Core.UI.Wisp.Styling.Stylesheet?
OpenNefia.Core.UI.Wisp.WispManager.Stylesheet.set -> void
OpenNefia.Core.UI.Wisp.WispManager.WispManager() -> void
OpenNefia.Core.UI.Wisp.WispRoot
OpenNefia.Core.UI.Wisp.WispRoot.WispRoot() -> void
OpenNefia.Core.UserInterface.AccessLevel
OpenNefia.Core.UserInterface.AccessLevel.Internal = 2 -> OpenNefia.Core.UserInterface.AccessLevel
OpenNefia.Core.UserInterface.AccessLevel.Private = 4 -> OpenNefia.Core.UserInterface.AccessLevel
OpenNefia.Core.UserInterface.AccessLevel.PrivateProtected = 5 -> OpenNefia.Core.UserInterface.AccessLevel
OpenNefia.Core.UserInterface.AccessLevel.Protected = 1 -> OpenNefia.Core.UserInterface.AccessLevel
OpenNefia.Core.UserInterface.AccessLevel.ProtectedInternal = 3 -> OpenNefia.Core.UserInterface.AccessLevel
OpenNefia.Core.UserInterface.AccessLevel.Public = 0 -> OpenNefia.Core.UserInterface.AccessLevel
OpenNefia.Core.UserInterface.AssetExtension
OpenNefia.Core.UserInterface.AssetExtension.AssetExtension(string! key) -> void
OpenNefia.Core.UserInterface.AssetExtension.Key.get -> string!
OpenNefia.Core.UserInterface.AssetExtension.ProvideValue() -> object!
OpenNefia.Core.UserInterface.IBoundKeyEventFilter
OpenNefia.Core.UserInterface.IBoundKeyEventFilter.FilterEvent(OpenNefia.Core.UI.Element.UiElement! element, OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! evt) -> bool
OpenNefia.Core.UserInterface.IClipboardManager
OpenNefia.Core.UserInterface.IClipboardManager.GetText() -> string!
OpenNefia.Core.UserInterface.IClipboardManager.SetText(string! text) -> void
OpenNefia.Core.UserInterface.IHasXamlReferences
OpenNefia.Core.UserInterface.IUserInterfaceManager
OpenNefia.Core.UserInterface.IUserInterfaceManager.ActiveLayers.get -> System.Collections.Generic.IList<OpenNefia.Core.UI.Layer.UiLayer!>!
OpenNefia.Core.UserInterface.IUserInterfaceManager.ControlFocused.get -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UserInterface.IUserInterfaceManager.ControlFocused.set -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.CreateLayer<TLayer, TArgs, TResult>(TArgs args) -> TLayer
OpenNefia.Core.UserInterface.IUserInterfaceManager.CreateLayer<TLayer, TArgs>(TArgs args) -> TLayer
OpenNefia.Core.UserInterface.IUserInterfaceManager.CreateLayer<TLayer, TResult>() -> TLayer
OpenNefia.Core.UserInterface.IUserInterfaceManager.CreateLayer<TLayer>() -> TLayer
OpenNefia.Core.UserInterface.IUserInterfaceManager.CurrentLayer.get -> OpenNefia.Core.UI.Layer.UiLayer?
OpenNefia.Core.UserInterface.IUserInterfaceManager.CurrentlyHovered.get -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UserInterface.IUserInterfaceManager.DrawLayers() -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.FormatKeyHints(System.Collections.Generic.IEnumerable<OpenNefia.Core.UI.UiKeyHint!>! keyHints) -> string!
OpenNefia.Core.UserInterface.IUserInterfaceManager.FrameUpdate(OpenNefia.Core.Timing.FrameEventArgs frame) -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.GrabKeyboardFocus(OpenNefia.Core.UI.Element.UiElement! control) -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.InitializeLayer<TLayer, TArgs, TResult>(TLayer layer, TArgs args) -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.InitializeLayer<TLayer>(TLayer layer) -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.IsInActiveLayerList(OpenNefia.Core.UI.Layer.UiLayer! layer) -> bool
OpenNefia.Core.UserInterface.IUserInterfaceManager.IsQuerying(OpenNefia.Core.UI.Layer.UiLayer! layer) -> bool
OpenNefia.Core.UserInterface.IUserInterfaceManager.KeyboardFocused.get -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UserInterface.IUserInterfaceManager.MousePositionScaled.get -> OpenNefia.Core.Maps.ScreenCoordinates
OpenNefia.Core.UserInterface.IUserInterfaceManager.OnHoveredElementChanged -> System.Action?
OpenNefia.Core.UserInterface.IUserInterfaceManager.PopLayer(OpenNefia.Core.UI.Layer.UiLayer! layer) -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.PushLayer(OpenNefia.Core.UI.Layer.UiLayer! layer) -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.PushModal(OpenNefia.Core.UI.Element.UiElement! modal) -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.Query<TArgs, TResult>(OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult!>! layer) -> OpenNefia.Core.UI.UiResult<TResult!>!
OpenNefia.Core.UserInterface.IUserInterfaceManager.Query<TLayer, TArgs, TResult>(TArgs args) -> OpenNefia.Core.UI.UiResult<TResult!>!
OpenNefia.Core.UserInterface.IUserInterfaceManager.Query<TLayer, TArgs>(TArgs args) -> OpenNefia.Core.UI.UiResult<OpenNefia.Core.UI.UINone!>!
OpenNefia.Core.UserInterface.IUserInterfaceManager.Query<TLayer, TResult>() -> OpenNefia.Core.UI.UiResult<TResult!>!
OpenNefia.Core.UserInterface.IUserInterfaceManager.Query<TLayer>() -> OpenNefia.Core.UI.UiResult<OpenNefia.Core.UI.UINone!>!
OpenNefia.Core.UserInterface.IUserInterfaceManager.Query<TResult, TLayer, TArgs>(TLayer layer, TArgs args) -> OpenNefia.Core.UI.UiResult<TResult!>!
OpenNefia.Core.UserInterface.IUserInterfaceManager.ReleaseKeyboardFocus() -> void
OpenNefia.Core.UserInterface.IUserInterfaceManager.ReleaseKeyboardFocus(OpenNefia.Core.UI.Element.UiElement! control) -> void
OpenNefia.Core.UserInterface.LocExtension
OpenNefia.Core.UserInterface.LocExtension.Key.get -> string!
OpenNefia.Core.UserInterface.LocExtension.LocExtension(string! key) -> void
OpenNefia.Core.UserInterface.LocExtension.ProvideValue() -> object!
OpenNefia.Core.UserInterface.LogicalExtensions
OpenNefia.Core.UserInterface.UIEventFilterMode
OpenNefia.Core.UserInterface.UIEventFilterMode.Ignore = 2 -> OpenNefia.Core.UserInterface.UIEventFilterMode
OpenNefia.Core.UserInterface.UIEventFilterMode.Pass = 1 -> OpenNefia.Core.UserInterface.UIEventFilterMode
OpenNefia.Core.UserInterface.UIEventFilterMode.Stop = 0 -> OpenNefia.Core.UserInterface.UIEventFilterMode
OpenNefia.Core.UserInterface.UserInterfaceManager
OpenNefia.Core.UserInterface.UserInterfaceManager.ActiveLayers.get -> System.Collections.Generic.IList<OpenNefia.Core.UI.Layer.UiLayer!>!
OpenNefia.Core.UserInterface.UserInterfaceManager.CalcRelativeMousePositionFor(OpenNefia.Core.UI.Element.UiElement! control, OpenNefia.Core.Maps.ScreenCoordinates mousePos) -> OpenNefia.Core.Maths.Vector2?
OpenNefia.Core.UserInterface.UserInterfaceManager.ControlFocused.get -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UserInterface.UserInterfaceManager.ControlFocused.set -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.ControlHidden(OpenNefia.Core.UI.Element.UiElement! control) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.ControlRemovedFromTree(OpenNefia.Core.UI.Element.UiElement! control) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.CreateLayer<TLayer, TArgs, TResult>(TArgs args) -> TLayer
OpenNefia.Core.UserInterface.UserInterfaceManager.CreateLayer<TLayer, TArgs>(TArgs args) -> TLayer
OpenNefia.Core.UserInterface.UserInterfaceManager.CreateLayer<TLayer, TResult>() -> TLayer
OpenNefia.Core.UserInterface.UserInterfaceManager.CreateLayer<TLayer>() -> TLayer
OpenNefia.Core.UserInterface.UserInterfaceManager.CurrentLayer.get -> OpenNefia.Core.UI.Layer.UiLayer?
OpenNefia.Core.UserInterface.UserInterfaceManager.CurrentlyHovered.get -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UserInterface.UserInterfaceManager.DrawLayers() -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.FormatKeyHints(System.Collections.Generic.IEnumerable<OpenNefia.Core.UI.UiKeyHint!>! keyHints) -> string!
OpenNefia.Core.UserInterface.UserInterfaceManager.FrameUpdate(OpenNefia.Core.Timing.FrameEventArgs frame) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.GrabKeyboardFocus(OpenNefia.Core.UI.Element.UiElement! control) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.HandleCanFocusDown(OpenNefia.Core.Maps.ScreenCoordinates pointerPosition, out (OpenNefia.Core.UI.Element.UiElement! control, OpenNefia.Core.Maths.Vector2i rel)? hitData) -> bool
OpenNefia.Core.UserInterface.UserInterfaceManager.HandleCanFocusUp() -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.Initialize() -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.InitializeLayer<TLayer, TArgs, TResult>(TLayer layer, TArgs args) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.InitializeLayer<TLayer>(TLayer layer) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.InitializeTesting() -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.IsInActiveLayerList(OpenNefia.Core.UI.Layer.UiLayer! layer) -> bool
OpenNefia.Core.UserInterface.UserInterfaceManager.IsQuerying(OpenNefia.Core.UI.Layer.UiLayer! layer) -> bool
OpenNefia.Core.UserInterface.UserInterfaceManager.KeyBindDown(OpenNefia.Core.Input.BoundKeyEventArgs! args) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.KeyBindUp(OpenNefia.Core.Input.BoundKeyEventArgs! args) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.KeyboardFocused.get -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UserInterface.UserInterfaceManager.MouseGetControl(OpenNefia.Core.Maps.ScreenCoordinates coordinates) -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UserInterface.UserInterfaceManager.MouseMove(OpenNefia.Core.Input.MouseMoveEventArgs! mouseMoveEventArgs) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.MousePositionScaled.get -> OpenNefia.Core.Maps.ScreenCoordinates
OpenNefia.Core.UserInterface.UserInterfaceManager.MouseWheel(OpenNefia.Core.Input.MouseWheelEventArgs! args) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.OnHoveredElementChanged -> System.Action?
OpenNefia.Core.UserInterface.UserInterfaceManager.PopLayer(OpenNefia.Core.UI.Layer.UiLayer! layer) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.PushLayer(OpenNefia.Core.UI.Layer.UiLayer! layer) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.PushModal(OpenNefia.Core.UI.Element.UiElement! modal) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.Query<TArgs, TResult>(OpenNefia.Core.UI.Layer.IUiLayerWithResult<TArgs, TResult!>! layer) -> OpenNefia.Core.UI.UiResult<TResult!>!
OpenNefia.Core.UserInterface.UserInterfaceManager.Query<TLayer, TArgs, TResult>(TArgs args) -> OpenNefia.Core.UI.UiResult<TResult!>!
OpenNefia.Core.UserInterface.UserInterfaceManager.Query<TLayer, TArgs>(TArgs args) -> OpenNefia.Core.UI.UiResult<OpenNefia.Core.UI.UINone!>!
OpenNefia.Core.UserInterface.UserInterfaceManager.Query<TLayer, TResult>() -> OpenNefia.Core.UI.UiResult<TResult!>!
OpenNefia.Core.UserInterface.UserInterfaceManager.Query<TLayer>() -> OpenNefia.Core.UI.UiResult<OpenNefia.Core.UI.UINone!>!
OpenNefia.Core.UserInterface.UserInterfaceManager.Query<TResult, TLayer, TArgs>(TLayer layer, TArgs args) -> OpenNefia.Core.UI.UiResult<TResult!>!
OpenNefia.Core.UserInterface.UserInterfaceManager.ReleaseKeyboardFocus() -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.ReleaseKeyboardFocus(OpenNefia.Core.UI.Element.UiElement! ifControl) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.RemoveModal(OpenNefia.Core.UI.Element.UiElement! modal) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.Shutdown() -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.TextEntered(OpenNefia.Core.Input.TextEventArgs! textEvent) -> void
OpenNefia.Core.UserInterface.UserInterfaceManager.UserInterfaceManager() -> void
OpenNefia.Core.UserInterface.XAML.ContentAttribute
OpenNefia.Core.UserInterface.XAML.ContentAttribute.ContentAttribute() -> void
OpenNefia.Core.UserInterface.XAML.DeferredContentAttribute
OpenNefia.Core.UserInterface.XAML.DeferredContentAttribute.DeferredContentAttribute() -> void
OpenNefia.Core.UserInterface.XAML.ITestProvideValueTarget
OpenNefia.Core.UserInterface.XAML.ITestProvideValueTarget.TargetObject.get -> object!
OpenNefia.Core.UserInterface.XAML.ITestProvideValueTarget.TargetProperty.get -> object!
OpenNefia.Core.UserInterface.XAML.ITestRootObjectProvider
OpenNefia.Core.UserInterface.XAML.ITestRootObjectProvider.RootObject.get -> object!
OpenNefia.Core.UserInterface.XAML.ITestUriContext
OpenNefia.Core.UserInterface.XAML.ITestUriContext.BaseUri.get -> System.Uri!
OpenNefia.Core.UserInterface.XAML.ITestUriContext.BaseUri.set -> void
OpenNefia.Core.UserInterface.XAML.NameScope
OpenNefia.Core.UserInterface.XAML.NameScope.Absorb(OpenNefia.Core.UserInterface.XAML.NameScope? nameScope) -> void
OpenNefia.Core.UserInterface.XAML.NameScope.Complete() -> void
OpenNefia.Core.UserInterface.XAML.NameScope.Find(string! name) -> OpenNefia.Core.UI.Element.UiElement?
OpenNefia.Core.UserInterface.XAML.NameScope.IsCompleted.get -> bool
OpenNefia.Core.UserInterface.XAML.NameScope.NameScope() -> void
OpenNefia.Core.UserInterface.XAML.NameScope.Register(string! name, OpenNefia.Core.UI.Element.UiElement! element) -> void
OpenNefia.Core.UserInterface.XAML.OpenNefiaXamlLoader
OpenNefia.Core.UserInterface.XAML.TypeUtilities
OpenNefia.Core.UserInterface.XAML.UsableDuringInitializationAttribute
OpenNefia.Core.UserInterface.XAML.UsableDuringInitializationAttribute.UsableDuringInitializationAttribute(bool usable) -> void
OpenNefia.Core.UserInterface.XAML.XNamespace.NullExtension
OpenNefia.Core.UserInterface.XAML.XNamespace.NullExtension.NullExtension() -> void
OpenNefia.Core.UserInterface.XAML.XNamespace.StaticExtension
OpenNefia.Core.UserInterface.XAML.XNamespace.StaticExtension.StaticExtension(string! _) -> void
OpenNefia.Core.Utility.Blackboard<TType>
OpenNefia.Core.Utility.Blackboard<TType>.Add<T>(T! instance) -> void
OpenNefia.Core.Utility.Blackboard<TType>.Blackboard() -> void
OpenNefia.Core.Utility.Blackboard<TType>.Clear() -> void
OpenNefia.Core.Utility.Blackboard<TType>.Ensure<T>() -> T!
OpenNefia.Core.Utility.Blackboard<TType>.Get<T>() -> T!
OpenNefia.Core.Utility.Blackboard<TType>.Has<T>() -> bool
OpenNefia.Core.Utility.Blackboard<TType>.Remove<T>() -> bool
OpenNefia.Core.Utility.Blackboard<TType>.TryGet<T>(out T? instance) -> bool
OpenNefia.Core.Utility.Blackboard<TType>._instances -> System.Collections.Generic.Dictionary<System.Type!, object!>!
OpenNefia.Core.Utility.ByteArrayHelpers
OpenNefia.Core.Utility.CircularBuffer<T>
OpenNefia.Core.Utility.CircularBuffer<T>.Back() -> T
OpenNefia.Core.Utility.CircularBuffer<T>.Capacity.get -> int
OpenNefia.Core.Utility.CircularBuffer<T>.CircularBuffer(int capacity) -> void
OpenNefia.Core.Utility.CircularBuffer<T>.CircularBuffer(int capacity, T[]! items) -> void
OpenNefia.Core.Utility.CircularBuffer<T>.Clear() -> void
OpenNefia.Core.Utility.CircularBuffer<T>.Front() -> T
OpenNefia.Core.Utility.CircularBuffer<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
OpenNefia.Core.Utility.CircularBuffer<T>.IsEmpty.get -> bool
OpenNefia.Core.Utility.CircularBuffer<T>.IsFull.get -> bool
OpenNefia.Core.Utility.CircularBuffer<T>.PopBack() -> void
OpenNefia.Core.Utility.CircularBuffer<T>.PopFront() -> void
OpenNefia.Core.Utility.CircularBuffer<T>.PushBack(T item) -> void
OpenNefia.Core.Utility.CircularBuffer<T>.PushFront(T item) -> void
OpenNefia.Core.Utility.CircularBuffer<T>.Size.get -> int
OpenNefia.Core.Utility.CircularBuffer<T>.this[int index].get -> T
OpenNefia.Core.Utility.CircularBuffer<T>.this[int index].set -> void
OpenNefia.Core.Utility.CircularBuffer<T>.ToArray() -> T[]!
OpenNefia.Core.Utility.CircularBuffer<T>.ToArraySegments() -> System.Collections.Generic.IList<System.ArraySegment<T>>!
OpenNefia.Core.Utility.CommandParsing
OpenNefia.Core.Utility.ComparisonType
OpenNefia.Core.Utility.ComparisonType.Equal = 0 -> OpenNefia.Core.Utility.ComparisonType
OpenNefia.Core.Utility.ComparisonType.GreaterThan = 2 -> OpenNefia.Core.Utility.ComparisonType
OpenNefia.Core.Utility.ComparisonType.GreaterThanOrEqual = 3 -> OpenNefia.Core.Utility.ComparisonType
OpenNefia.Core.Utility.ComparisonType.LessThan = 4 -> OpenNefia.Core.Utility.ComparisonType
OpenNefia.Core.Utility.ComparisonType.LessThanOrEqual = 5 -> OpenNefia.Core.Utility.ComparisonType
OpenNefia.Core.Utility.ComparisonType.NotEqual = 1 -> OpenNefia.Core.Utility.ComparisonType
OpenNefia.Core.Utility.ComparisonUtils
OpenNefia.Core.Utility.DebugAssertException
OpenNefia.Core.Utility.DebugAssertException.DebugAssertException() -> void
OpenNefia.Core.Utility.DebugAssertException.DebugAssertException(string! message) -> void
OpenNefia.Core.Utility.DebugTools
OpenNefia.Core.Utility.EncodingHelpers
OpenNefia.Core.Utility.EnumHelpers
OpenNefia.Core.Utility.ExceptionHelpers
OpenNefia.Core.Utility.Extensions
OpenNefia.Core.Utility.FormattedMessage
OpenNefia.Core.Utility.FormattedMessage.AddMarkup(string! markup) -> void
OpenNefia.Core.Utility.FormattedMessage.AddMarkupPermissive(string! markup) -> void
OpenNefia.Core.Utility.FormattedMessage.AddMessage(OpenNefia.Core.Utility.FormattedMessage! other) -> void
OpenNefia.Core.Utility.FormattedMessage.AddText(string! text) -> void
OpenNefia.Core.Utility.FormattedMessage.Clear() -> void
OpenNefia.Core.Utility.FormattedMessage.FormattedMessage() -> void
OpenNefia.Core.Utility.FormattedMessage.FormattedMessage(int capacity) -> void
OpenNefia.Core.Utility.FormattedMessage.FormattedMessage(OpenNefia.Core.Utility.FormattedMessage! toCopy) -> void
OpenNefia.Core.Utility.FormattedMessage.Pop() -> void
OpenNefia.Core.Utility.FormattedMessage.PushColor(OpenNefia.Core.Maths.Color color) -> void
OpenNefia.Core.Utility.FormattedMessage.PushNewline() -> void
OpenNefia.Core.Utility.FormattedMessage.Tag
OpenNefia.Core.Utility.FormattedMessage.TagColor
OpenNefia.Core.Utility.FormattedMessage.TagColor.Color.get -> OpenNefia.Core.Maths.Color
OpenNefia.Core.Utility.FormattedMessage.TagColor.Color.init -> void
OpenNefia.Core.Utility.FormattedMessage.TagColor.TagColor(OpenNefia.Core.Maths.Color Color) -> void
OpenNefia.Core.Utility.FormattedMessage.TagList
OpenNefia.Core.Utility.FormattedMessage.TagList.Count.get -> int
OpenNefia.Core.Utility.FormattedMessage.TagList.GetEnumerator() -> System.Collections.Generic.List<OpenNefia.Core.Utility.FormattedMessage.Tag!>.Enumerator
OpenNefia.Core.Utility.FormattedMessage.TagList.TagList() -> void
OpenNefia.Core.Utility.FormattedMessage.TagList.TagList(System.Collections.Generic.List<OpenNefia.Core.Utility.FormattedMessage.Tag!>! tags) -> void
OpenNefia.Core.Utility.FormattedMessage.TagList.this[int index].get -> OpenNefia.Core.Utility.FormattedMessage.Tag!
OpenNefia.Core.Utility.FormattedMessage.TagPop
OpenNefia.Core.Utility.FormattedMessage.Tags.get -> OpenNefia.Core.Utility.FormattedMessage.TagList
OpenNefia.Core.Utility.FormattedMessage.TagText
OpenNefia.Core.Utility.FormattedMessage.TagText.TagText(string! Text) -> void
OpenNefia.Core.Utility.FormattedMessage.TagText.Text.get -> string!
OpenNefia.Core.Utility.FormattedMessage.TagText.Text.init -> void
OpenNefia.Core.Utility.FormattedMessage.ToMarkup() -> string!
OpenNefia.Core.Utility.ILGeneratorExt
OpenNefia.Core.Utility.IOrderedDictionary<TKey, TValue>
OpenNefia.Core.Utility.IOrderedDictionary<TKey, TValue>.Insert(int index, TKey key, TValue value) -> void
OpenNefia.Core.Utility.IOrderedDictionary<TKey, TValue>.RemoveAt(int index) -> void
OpenNefia.Core.Utility.IOrderedDictionary<TKey, TValue>.this[int index].get -> System.Collections.Generic.KeyValuePair<TKey, TValue>
OpenNefia.Core.Utility.IOrderedDictionary<TKey, TValue>.this[int index].set -> void
OpenNefia.Core.Utility.IReadOnlyPrototypeFlags<T>
OpenNefia.Core.Utility.IReadOnlyPrototypeFlags<T>.Contains(OpenNefia.Core.Prototypes.PrototypeId<T!> flag) -> bool
OpenNefia.Core.Utility.IReadOnlyPrototypeFlags<T>.ContainsAll(params OpenNefia.Core.Prototypes.PrototypeId<T!>[]! flags) -> bool
OpenNefia.Core.Utility.IReadOnlyPrototypeFlags<T>.ContainsAll(System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.PrototypeId<T!>>! flags) -> bool
OpenNefia.Core.Utility.IReadOnlyPrototypeFlags<T>.ContainsAny(params OpenNefia.Core.Prototypes.PrototypeId<T!>[]! flags) -> bool
OpenNefia.Core.Utility.IReadOnlyPrototypeFlags<T>.ContainsAny(System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.PrototypeId<T!>>! flags) -> bool
OpenNefia.Core.Utility.IReadOnlyPrototypeFlags<T>.Count.get -> int
OpenNefia.Core.Utility.IReadOnlyPrototypeFlags<T>.GetPrototypes(OpenNefia.Core.Prototypes.IPrototypeManager! prototypeManager) -> System.Collections.Generic.IEnumerable<T!>!
OpenNefia.Core.Utility.NullableHelper
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue> item) -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Add(TKey key, TValue value) -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Clear() -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item) -> bool
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.ContainsKey(TKey key) -> bool
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[]! array, int arrayIndex) -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Count.get -> int
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>!
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Insert(int index, TKey key, TValue value) -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.IsReadOnly.get -> bool
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Keys.get -> System.Collections.Generic.ICollection<TKey>!
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.OrderedDictionary() -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.OrderedDictionary(System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue> item) -> bool
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Remove(TKey key) -> bool
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.RemoveAt(int index) -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.this[int index].get -> System.Collections.Generic.KeyValuePair<TKey, TValue>
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.this[int index].set -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.this[TKey key].get -> TValue
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.this[TKey key].set -> void
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.TryGetValue(TKey key, out TValue value) -> bool
OpenNefia.Core.Utility.OrderedDictionary<TKey, TValue>.Values.get -> System.Collections.Generic.ICollection<TValue>!
OpenNefia.Core.Utility.PosHelpers
OpenNefia.Core.Utility.PrettyPrint
OpenNefia.Core.Utility.PriorityMap<K, V, P>
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Add(K key, V value) -> void
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Add(K key, V value, P priority) -> void
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Add(System.Collections.Generic.KeyValuePair<K, V> item) -> void
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Add(System.Collections.Generic.KeyValuePair<K, V> item, P priority) -> void
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Clear() -> void
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Contains(System.Collections.Generic.KeyValuePair<K, V> item) -> bool
OpenNefia.Core.Utility.PriorityMap<K, V, P>.ContainsKey(K key) -> bool
OpenNefia.Core.Utility.PriorityMap<K, V, P>.CopyTo(System.Collections.Generic.KeyValuePair<K, V>[]! array, int arrayIndex) -> void
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Count.get -> int
OpenNefia.Core.Utility.PriorityMap<K, V, P>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<K, V>>!
OpenNefia.Core.Utility.PriorityMap<K, V, P>.IsReadOnly.get -> bool
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Keys.get -> System.Collections.Generic.ICollection<K>!
OpenNefia.Core.Utility.PriorityMap<K, V, P>.PriorityMap() -> void
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Remove(K key) -> bool
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Remove(System.Collections.Generic.KeyValuePair<K, V> item) -> bool
OpenNefia.Core.Utility.PriorityMap<K, V, P>.this[K key].get -> V
OpenNefia.Core.Utility.PriorityMap<K, V, P>.this[K key].set -> void
OpenNefia.Core.Utility.PriorityMap<K, V, P>.TryGetValue(K key, out V value) -> bool
OpenNefia.Core.Utility.PriorityMap<K, V, P>.Values.get -> System.Collections.Generic.ICollection<V>!
OpenNefia.Core.Utility.PrototypeFlags<T>
OpenNefia.Core.Utility.PrototypeFlags<T>.Add(OpenNefia.Core.Prototypes.PrototypeId<T!> flag, OpenNefia.Core.Prototypes.IPrototypeManager! prototypeManager) -> bool
OpenNefia.Core.Utility.PrototypeFlags<T>.Clear() -> void
OpenNefia.Core.Utility.PrototypeFlags<T>.Contains(OpenNefia.Core.Prototypes.PrototypeId<T!> flag) -> bool
OpenNefia.Core.Utility.PrototypeFlags<T>.ContainsAll(params OpenNefia.Core.Prototypes.PrototypeId<T!>[]! flags) -> bool
OpenNefia.Core.Utility.PrototypeFlags<T>.ContainsAll(System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.PrototypeId<T!>>! flags) -> bool
OpenNefia.Core.Utility.PrototypeFlags<T>.ContainsAny(params OpenNefia.Core.Prototypes.PrototypeId<T!>[]! flags) -> bool
OpenNefia.Core.Utility.PrototypeFlags<T>.ContainsAny(System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.PrototypeId<T!>>! flags) -> bool
OpenNefia.Core.Utility.PrototypeFlags<T>.Count.get -> int
OpenNefia.Core.Utility.PrototypeFlags<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<OpenNefia.Core.Prototypes.PrototypeId<T!>>!
OpenNefia.Core.Utility.PrototypeFlags<T>.GetPrototypes(OpenNefia.Core.Prototypes.IPrototypeManager! prototypeManager) -> System.Collections.Generic.IEnumerable<T!>!
OpenNefia.Core.Utility.PrototypeFlags<T>.PrototypeFlags() -> void
OpenNefia.Core.Utility.PrototypeFlags<T>.PrototypeFlags(params OpenNefia.Core.Prototypes.PrototypeId<T!>[]! flags) -> void
OpenNefia.Core.Utility.PrototypeFlags<T>.PrototypeFlags(System.Collections.Generic.IEnumerable<OpenNefia.Core.Prototypes.PrototypeId<T!>>! flags) -> void
OpenNefia.Core.Utility.PrototypeFlags<T>.Remove(OpenNefia.Core.Prototypes.PrototypeId<T!> flag) -> bool
OpenNefia.Core.Utility.ResourcePath
OpenNefia.Core.Utility.ResourcePath.ChangeSeparator(string! newSeparator) -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.ResourcePath.Clean() -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.ResourcePath.CommonBase(OpenNefia.Core.Utility.ResourcePath! other) -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.ResourcePath.Directory.get -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.ResourcePath.EnumerateSegments() -> System.Collections.Generic.IEnumerable<string!>!
OpenNefia.Core.Utility.ResourcePath.Equals(OpenNefia.Core.Utility.ResourcePath? other) -> bool
OpenNefia.Core.Utility.ResourcePath.Extension.get -> string!
OpenNefia.Core.Utility.ResourcePath.Filename.get -> string!
OpenNefia.Core.Utility.ResourcePath.FilenameWithoutExtension.get -> string!
OpenNefia.Core.Utility.ResourcePath.IsClean() -> bool
OpenNefia.Core.Utility.ResourcePath.IsRelative.get -> bool
OpenNefia.Core.Utility.ResourcePath.IsRooted.get -> bool
OpenNefia.Core.Utility.ResourcePath.IsSelf.get -> bool
OpenNefia.Core.Utility.ResourcePath.RelativeTo(OpenNefia.Core.Utility.ResourcePath! basePath) -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.ResourcePath.ResourcePath(string! path, string! separator = "/") -> void
OpenNefia.Core.Utility.ResourcePath.Separator.get -> string!
OpenNefia.Core.Utility.ResourcePath.ToRelativePath() -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.ResourcePath.ToRelativeSystemPath() -> string!
OpenNefia.Core.Utility.ResourcePath.ToRootedPath() -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.ResourcePath.TryRelativeTo(OpenNefia.Core.Utility.ResourcePath! basePath, out OpenNefia.Core.Utility.ResourcePath? relative) -> bool
OpenNefia.Core.Utility.ResourcePath.WithExtension(string! newExtension) -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.ResourcePath.WithName(string! name) -> OpenNefia.Core.Utility.ResourcePath!
OpenNefia.Core.Utility.RobustILGenerator
OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, sbyte arg) -> void
OpenNefia.Core.Utility.RobustILGenerator.GetStringLog() -> string![]!
OpenNefia.Core.Utility.RobustILGenerator.RobustILGenerator(System.Reflection.Emit.ILGenerator! generator) -> void
OpenNefia.Core.Utility.SerializationHelpers
OpenNefia.Core.Utility.StreamExt
OpenNefia.Core.Utility.StringHelpers
OpenNefia.Core.Utility.StructMultiKey<T1, T2>
OpenNefia.Core.Utility.StructMultiKey<T1, T2>.Equals(OpenNefia.Core.Utility.StructMultiKey<T1, T2> other) -> bool
OpenNefia.Core.Utility.StructMultiKey<T1, T2>.StructMultiKey() -> void
OpenNefia.Core.Utility.StructMultiKey<T1, T2>.StructMultiKey(T1 v1, T2 v2) -> void
OpenNefia.Core.Utility.TopologicalSort
OpenNefia.Core.Utility.TopologicalSort.GraphNode<T>
OpenNefia.Core.Utility.TopologicalSort.GraphNode<T>.GraphNode(T value) -> void
OpenNefia.Core.Utility.TopologicalSort.TopologicalSort() -> void
OpenNefia.Core.Utility.TypeAbbreviation
OpenNefia.Core.Utility.TypeHelpers
OpenNefia.Core.Utility.TypeHelpers.TypeInheritanceComparerImpl
OpenNefia.Core.Utility.TypeHelpers.TypeInheritanceComparerImpl.Compare(System.Type? x, System.Type? y) -> int
OpenNefia.Core.Utility.TypeHelpers.TypeInheritanceComparerImpl.TypeInheritanceComparerImpl() -> void
OpenNefia.Core.Utility.UnicodeWidth
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Add(TKey key, TValue value) -> bool
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.AddRange(TKey key, System.Collections.Generic.IEnumerable<TValue>! values) -> int
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Clear() -> void
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Freeze(TKey key) -> bool
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.ISet<TValue>!>>!
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Initialize(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.ISet<TValue>!>>! index) -> void
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Initialize(System.Collections.Generic.IEnumerable<TKey>! keys) -> void
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.KeyCount.get -> int
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Remove(TKey key) -> bool
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Remove(TKey key, TValue value) -> bool
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.RemoveRange(TKey key, System.Collections.Generic.IEnumerable<TValue>! values) -> int
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Replace(TKey key, TValue oldValue, TValue newValue) -> bool
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.this[TKey key].get -> System.Collections.Generic.ISet<TValue>!
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.Touch(TKey key) -> void
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.UniqueIndexHkm() -> void
OpenNefia.Core.Utility.UniqueIndexHkm<TKey, TValue>.UniqueIndexHkm(int capacity) -> void
OpenNefia.Core.Utility.VectorSerializerUtility
OpenNefia.Core.Utility.VectorSerializerUtility.VectorSerializerUtility() -> void
OpenNefia.Core.Utility.YamlHelpers
OpenNefia.Core.ViewVariables.Editors.VVPropEditorAngle
OpenNefia.Core.ViewVariables.Editors.VVPropEditorAngle.VVPropEditorAngle() -> void
OpenNefia.Core.ViewVariables.Editors.VVPropEditorColor
OpenNefia.Core.ViewVariables.Editors.VVPropEditorColor.VVPropEditorColor() -> void
OpenNefia.Core.ViewVariables.Editors.VVPropEditorEntityCoordinates
OpenNefia.Core.ViewVariables.Editors.VVPropEditorEntityCoordinates.VVPropEditorEntityCoordinates() -> void
OpenNefia.Core.ViewVariables.Editors.VVPropEditorEntityUid
OpenNefia.Core.ViewVariables.Editors.VVPropEditorEntityUid.VVPropEditorEntityUid() -> void
OpenNefia.Core.ViewVariables.Editors.VVPropEditorIPrototype<T>
OpenNefia.Core.ViewVariables.Editors.VVPropEditorIPrototype<T>.VVPropEditorIPrototype() -> void
OpenNefia.Core.ViewVariables.Editors.VVPropEditorIPrototypeId<T>
OpenNefia.Core.ViewVariables.Editors.VVPropEditorIPrototypeId<T>.VVPropEditorIPrototypeId() -> void
OpenNefia.Core.ViewVariables.Editors.VVPropEditorKeyValuePair
OpenNefia.Core.ViewVariables.Editors.VVPropEditorKeyValuePair.VVPropEditorKeyValuePair() -> void
OpenNefia.Core.ViewVariables.Editors.VVPropEditorTimeSpan
OpenNefia.Core.ViewVariables.Editors.VVPropEditorTimeSpan.VVPropEditorTimeSpan() -> void
OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2
OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType
OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType.Box2 = 0 -> OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType
OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType.Box2i = 1 -> OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType
OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType.UIBox2 = 2 -> OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType
OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType.UIBox2i = 3 -> OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType
OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.VVPropEditorUIBox2(OpenNefia.Core.ViewVariables.Editors.VVPropEditorUIBox2.BoxType type) -> void
OpenNefia.Core.ViewVariables.IViewVariablesManager
OpenNefia.Core.ViewVariables.IViewVariablesManager.OpenVV(object! obj, OpenNefia.Core.UI.Wisp.IWispLayer? layer = null) -> void
OpenNefia.Core.ViewVariables.ViewVariablesAddComponentWindow
OpenNefia.Core.ViewVariables.ViewVariablesAddComponentWindow.AddButtonPressed -> System.Action<OpenNefia.Core.ViewVariables.ViewVariablesAddComponentWindow.AddButtonPressedEventArgs!>?
OpenNefia.Core.ViewVariables.ViewVariablesAddComponentWindow.AddButtonPressedEventArgs
OpenNefia.Core.ViewVariables.ViewVariablesAddComponentWindow.AddButtonPressedEventArgs.AddButtonPressedEventArgs(string! entry) -> void
OpenNefia.Core.ViewVariables.ViewVariablesAddComponentWindow.AddButtonPressedEventArgs.Entry.get -> string!
OpenNefia.Core.ViewVariables.ViewVariablesAddComponentWindow.Populate(System.Collections.Generic.IEnumerable<OpenNefia.Core.ViewVariables.VVComponentEntry!>! entries) -> void
OpenNefia.Core.ViewVariables.ViewVariablesAddComponentWindow.ViewVariablesAddComponentWindow(System.Collections.Generic.IEnumerable<OpenNefia.Core.ViewVariables.VVComponentEntry!>! entries, OpenNefia.Core.LocaleKey title, OpenNefia.Core.GameObjects.ComponentTarget componentTarget) -> void
OpenNefia.Core.ViewVariables.ViewVariablesAddWindow
OpenNefia.Core.ViewVariables.ViewVariablesAddWindow.AddButtonPressed -> System.Action<OpenNefia.Core.ViewVariables.ViewVariablesAddWindow.AddButtonPressedEventArgs!>?
OpenNefia.Core.ViewVariables.ViewVariablesAddWindow.AddButtonPressedEventArgs
OpenNefia.Core.ViewVariables.ViewVariablesAddWindow.AddButtonPressedEventArgs.AddButtonPressedEventArgs(string! entry) -> void
OpenNefia.Core.ViewVariables.ViewVariablesAddWindow.AddButtonPressedEventArgs.Entry.get -> string!
OpenNefia.Core.ViewVariables.ViewVariablesAddWindow.Populate(System.Collections.Generic.IEnumerable<string!>! entries) -> void
OpenNefia.Core.ViewVariables.ViewVariablesAddWindow.ViewVariablesAddWindow(System.Collections.Generic.IEnumerable<string!>! entries, OpenNefia.Core.LocaleKey title) -> void
OpenNefia.Core.ViewVariables.ViewVariablesAttribute
OpenNefia.Core.ViewVariables.ViewVariablesAttribute.ViewVariablesAttribute() -> void
OpenNefia.Core.ViewVariables.ViewVariablesAttribute.ViewVariablesAttribute(OpenNefia.Core.ViewVariables.VVAccess access) -> void
OpenNefia.Core.ViewVariables.ViewVariablesBuiltinPropertyMatcher
OpenNefia.Core.ViewVariables.ViewVariablesBuiltinPropertyMatcher.ViewVariablesBuiltinPropertyMatcher() -> void
OpenNefia.Core.ViewVariables.ViewVariablesManager
OpenNefia.Core.ViewVariables.ViewVariablesManager.OpenVV(object! obj, OpenNefia.Core.UI.Wisp.IWispLayer? layer = null) -> void
OpenNefia.Core.ViewVariables.ViewVariablesManager.PropertyFor(System.Type? type) -> OpenNefia.Core.ViewVariables.VVPropEditor!
OpenNefia.Core.ViewVariables.ViewVariablesManager.TraitIdsFor(System.Type! type) -> System.Collections.Generic.ICollection<System.Type!>!
OpenNefia.Core.ViewVariables.ViewVariablesManager.ViewVariablesManager() -> void
OpenNefia.Core.ViewVariables.ViewVariablesPropertyMatcher
OpenNefia.Core.ViewVariables.ViewVariablesPropertyMatcher.ViewVariablesPropertyMatcher() -> void
OpenNefia.Core.ViewVariables.ViewVariablesUtility
OpenNefia.Core.ViewVariables.VVAccess
OpenNefia.Core.ViewVariables.VVAccess.ReadOnly = 0 -> OpenNefia.Core.ViewVariables.VVAccess
OpenNefia.Core.ViewVariables.VVAccess.ReadWrite = 1 -> OpenNefia.Core.ViewVariables.VVAccess
OpenNefia.Core.ViewVariables.VVComponentEntry
OpenNefia.Core.ViewVariables.VVComponentEntry.CompareTo(OpenNefia.Core.ViewVariables.VVComponentEntry? other) -> int
OpenNefia.Core.ViewVariables.VVComponentEntry.Name.get -> string!
OpenNefia.Core.ViewVariables.VVComponentEntry.Name.init -> void
OpenNefia.Core.ViewVariables.VVComponentEntry.Target.get -> OpenNefia.Core.GameObjects.ComponentTarget
OpenNefia.Core.ViewVariables.VVComponentEntry.Target.init -> void
OpenNefia.Core.ViewVariables.VVComponentEntry.VVComponentEntry(string! Name, OpenNefia.Core.GameObjects.ComponentTarget Target) -> void
OpenNefia.Core.ViewVariables.VVPropEditor
OpenNefia.Core.ViewVariables.VVPropEditor.Initialize(object? value, bool readOnly) -> OpenNefia.Core.UI.Wisp.WispControl!
OpenNefia.Core.ViewVariables.VVPropEditor.ReadOnly.get -> bool
OpenNefia.Core.ViewVariables.VVPropEditor.ValueChanged(object? newValue, bool reinterpretValue = false) -> void
OpenNefia.Core.ViewVariables.VVPropEditor.VVPropEditor() -> void
OpenNefia.IoCSetup
OpenNefia.IoCSetup.IoCSetup() -> void
OpenNefia.XamlInjectors.CompilerExtensions.MathParsing
override abstract OpenNefia.Core.Serialization.Markdown.DataNode<T>.Copy() -> T!
override OpenNefia.Core.Areas.AreaComponent.Name.get -> string!
override OpenNefia.Core.Areas.AreaFloorId.Equals(object? obj) -> bool
override OpenNefia.Core.Areas.AreaFloorId.GetHashCode() -> int
override OpenNefia.Core.Areas.AreaFloorId.ToString() -> string!
override OpenNefia.Core.Areas.AreaId.Equals(object? obj) -> bool
override OpenNefia.Core.Areas.AreaId.GetHashCode() -> int
override OpenNefia.Core.Areas.AreaId.ToString() -> string!
override OpenNefia.Core.Areas.GlobalAreaId.Equals(object? obj) -> bool
override OpenNefia.Core.Areas.GlobalAreaId.GetHashCode() -> int
override OpenNefia.Core.Areas.GlobalAreaId.ToString() -> string!
override OpenNefia.Core.Asynchronous.TaskRunnerLayer.Draw() -> void
override OpenNefia.Core.Asynchronous.TaskRunnerLayer.Initialize(System.Threading.Tasks.Task! task) -> void
override OpenNefia.Core.Asynchronous.TaskRunnerLayer.Update(float dt) -> void
override OpenNefia.Core.Audio.AudioSystem.Initialize() -> void
override OpenNefia.Core.Containers.Container.ContainedEntities.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.GameObjects.EntityUid>!
override OpenNefia.Core.Containers.Container.ContainerType.get -> string!
override OpenNefia.Core.Containers.Container.Contains(OpenNefia.Core.GameObjects.EntityUid contained) -> bool
override OpenNefia.Core.Containers.Container.Shutdown() -> void
override OpenNefia.Core.Containers.ContainerId.Equals(object? obj) -> bool
override OpenNefia.Core.Containers.ContainerId.GetHashCode() -> int
override OpenNefia.Core.Containers.ContainerId.ToString() -> string!
override OpenNefia.Core.Containers.ContainerManagerComponent.Initialize() -> void
override OpenNefia.Core.Containers.ContainerManagerComponent.OnRemove() -> void
override OpenNefia.Core.Containers.ContainerManagerComponent.Shutdown() -> void
override OpenNefia.Core.Containers.ContainerSlot.CanInsert(OpenNefia.Core.GameObjects.EntityUid toinsert, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
override OpenNefia.Core.Containers.ContainerSlot.ContainedEntities.get -> System.Collections.Generic.IReadOnlyList<OpenNefia.Core.GameObjects.EntityUid>!
override OpenNefia.Core.Containers.ContainerSlot.ContainerType.get -> string!
override OpenNefia.Core.Containers.ContainerSlot.Contains(OpenNefia.Core.GameObjects.EntityUid contained) -> bool
override OpenNefia.Core.Containers.ContainerSlot.InternalInsert(OpenNefia.Core.GameObjects.EntityUid toinsert, OpenNefia.Core.GameObjects.IEntityManager! entMan) -> void
override OpenNefia.Core.Containers.ContainerSlot.InternalRemove(OpenNefia.Core.GameObjects.EntityUid toremove, OpenNefia.Core.GameObjects.IEntityManager! entMan) -> void
override OpenNefia.Core.Containers.ContainerSlot.Shutdown() -> void
override OpenNefia.Core.Containers.ContainerSystem.Initialize() -> void
override OpenNefia.Core.ControlDesigner.ControlDesignerLayer.DefaultZOrder.get -> int?
override OpenNefia.Core.ControlDesigner.ControlDesignerLayer.OnQuery() -> void
override OpenNefia.Core.ControlDesigner.ControlDesignerLayer.OnQueryFinish() -> void
override OpenNefia.Core.ControlDesigner.ControlDesignerLayer.Update(float dt) -> void
override OpenNefia.Core.ControlDesigner.MeasurementPointer.Draw() -> void
override OpenNefia.Core.ControlDesigner.MeasurementPointer.Update(float dt) -> void
override OpenNefia.Core.Exceptions.TypeArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
override OpenNefia.Core.GameObjects.ChipComponent.Name.get -> string!
override OpenNefia.Core.GameObjects.EntityLookup.Initialize() -> void
override OpenNefia.Core.GameObjects.EntityStringRepresentation.ToString() -> string!
override OpenNefia.Core.GameObjects.EntityUid.Equals(object? obj) -> bool
override OpenNefia.Core.GameObjects.EntityUid.GetHashCode() -> int
override OpenNefia.Core.GameObjects.EntityUid.ToString() -> string!
override OpenNefia.Core.GameObjects.MapSaveIdComponent.Name.get -> string!
override OpenNefia.Core.GameObjects.MetaDataComponent.Name.get -> string!
override OpenNefia.Core.GameObjects.MoveableComponent.Name.get -> string!
override OpenNefia.Core.GameObjects.MoveableSystem.Initialize() -> void
override OpenNefia.Core.GameObjects.PlayerComponent.Name.get -> string!
override OpenNefia.Core.GameObjects.SlotId.Equals(object? obj) -> bool
override OpenNefia.Core.GameObjects.SlotId.GetHashCode() -> int
override OpenNefia.Core.GameObjects.SlotId.ToString() -> string!
override OpenNefia.Core.GameObjects.SlotsComponent.Name.get -> string!
override OpenNefia.Core.GameObjects.SpatialComponent.Name.get -> string!
override OpenNefia.Core.GameObjects.SpatialSystem.Initialize() -> void
override OpenNefia.Core.GameObjects.StackComponent.Name.get -> string!
override OpenNefia.Core.GameObjects.StackSystem.Initialize() -> void
override OpenNefia.Core.Graphics.LoveGraphics.JoystickAdded(Love.Joystick! joystick) -> void
override OpenNefia.Core.Graphics.LoveGraphics.JoystickGamepadAxis(Love.Joystick! joystick, Love.GamepadAxis axis, float value) -> void
override OpenNefia.Core.Graphics.LoveGraphics.JoystickGamepadPressed(Love.Joystick! joystick, Love.GamepadButton button) -> void
override OpenNefia.Core.Graphics.LoveGraphics.JoystickGamepadReleased(Love.Joystick! joystick, Love.GamepadButton button) -> void
override OpenNefia.Core.Graphics.LoveGraphics.JoystickRemoved(Love.Joystick! joystick) -> void
override OpenNefia.Core.Graphics.LoveGraphics.KeyPressed(Love.KeyConstant key, Love.Scancode scancode, bool isRepeat) -> void
override OpenNefia.Core.Graphics.LoveGraphics.KeyReleased(Love.KeyConstant key, Love.Scancode scancode) -> void
override OpenNefia.Core.Graphics.LoveGraphics.MouseMoved(float x, float y, float dx, float dy, bool isTouch) -> void
override OpenNefia.Core.Graphics.LoveGraphics.MousePressed(float x, float y, int button, bool isTouch) -> void
override OpenNefia.Core.Graphics.LoveGraphics.MouseReleased(float x, float y, int button, bool isTouch) -> void
override OpenNefia.Core.Graphics.LoveGraphics.Quit() -> bool
override OpenNefia.Core.Graphics.LoveGraphics.TextEditing(string! text, int start, int end) -> void
override OpenNefia.Core.Graphics.LoveGraphics.TextInput(string! text) -> void
override OpenNefia.Core.Graphics.LoveGraphics.WheelMoved(int x, int y) -> void
override OpenNefia.Core.Graphics.LoveGraphics.WindowFocus(bool focus) -> void
override OpenNefia.Core.Graphics.LoveGraphics.WindowResize(int w, int h) -> void
override OpenNefia.Core.Input.Binding.PointerInputCmdHandler.HandleCmdMessage(OpenNefia.Core.Game.IGameSessionManager? session, OpenNefia.Core.Input.InputCmdMessage! message) -> OpenNefia.Core.GameObjects.TurnResult?
override OpenNefia.Core.Input.Binding.PointerStateInputCmdHandler.HandleCmdMessage(OpenNefia.Core.Game.IGameSessionManager? session, OpenNefia.Core.Input.InputCmdMessage! message) -> OpenNefia.Core.GameObjects.TurnResult?
override OpenNefia.Core.Input.BoundKeyFunction.Equals(object? obj) -> bool
override OpenNefia.Core.Input.BoundKeyFunction.GetHashCode() -> int
override OpenNefia.Core.Input.BoundKeyFunction.ToString() -> string!
override OpenNefia.Core.Input.Client.LoveInputManager.MouseScreenPosition.get -> OpenNefia.Core.Maps.ScreenCoordinates
override OpenNefia.Core.Input.InputCmdMessage.ToString() -> string!
override OpenNefia.Core.Input.KeyFunctionId.Equals(object? obj) -> bool
override OpenNefia.Core.Input.KeyFunctionId.GetHashCode() -> int
override OpenNefia.Core.Input.KeyFunctionId.ToString() -> string!
override OpenNefia.Core.IoC.Exceptions.ImplementationConstructorException.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
override OpenNefia.Core.IoC.Exceptions.InvalidImplementationException.Message.get -> string!
override OpenNefia.Core.IoC.Exceptions.UnregisteredDependencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
override OpenNefia.Core.IoC.Exceptions.UnregisteredTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
override OpenNefia.Core.LocaleKey.ToString() -> string!
override OpenNefia.Core.Maps.EntityCoordinates.Equals(object? obj) -> bool
override OpenNefia.Core.Maps.EntityCoordinates.GetHashCode() -> int
override OpenNefia.Core.Maps.EntityCoordinates.ToString() -> string!
override OpenNefia.Core.Maps.MapComponent.Name.get -> string!
override OpenNefia.Core.Maps.MapCoordinates.Equals(object? obj) -> bool
override OpenNefia.Core.Maps.MapCoordinates.GetHashCode() -> int
override OpenNefia.Core.Maps.MapCoordinates.ToString() -> string!
override OpenNefia.Core.Maps.MapEntityLookupComponent.Name.get -> string!
override OpenNefia.Core.Maps.MapId.Equals(object? obj) -> bool
override OpenNefia.Core.Maps.MapId.GetHashCode() -> int
override OpenNefia.Core.Maps.MapId.ToString() -> string!
override OpenNefia.Core.Maps.ScreenCoordinates.Equals(object? obj) -> bool
override OpenNefia.Core.Maps.ScreenCoordinates.GetHashCode() -> int
override OpenNefia.Core.Maps.ScreenCoordinates.ToString() -> string!
override OpenNefia.Core.Maps.Tile.Equals(object? obj) -> bool
override OpenNefia.Core.Maps.Tile.GetHashCode() -> int
override OpenNefia.Core.Maps.TileRef.Equals(object? obj) -> bool
override OpenNefia.Core.Maps.TileRef.GetHashCode() -> int
override OpenNefia.Core.Maps.TileRef.ToString() -> string!
override OpenNefia.Core.Maths.Angle.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Angle.GetHashCode() -> int
override OpenNefia.Core.Maths.Angle.ToString() -> string!
override OpenNefia.Core.Maths.Box2.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Box2.GetHashCode() -> int
override OpenNefia.Core.Maths.Box2.ToString() -> string!
override OpenNefia.Core.Maths.Box2i.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Box2i.GetHashCode() -> int
override OpenNefia.Core.Maths.Box2i.ToString() -> string!
override OpenNefia.Core.Maths.Color.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Color.GetHashCode() -> int
override OpenNefia.Core.Maths.Color.ToString() -> string!
override OpenNefia.Core.Maths.IntRange.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.IntRange.GetHashCode() -> int
override OpenNefia.Core.Maths.IntRange.ToString() -> string!
override OpenNefia.Core.Maths.Matrix3.GetHashCode() -> int
override OpenNefia.Core.Maths.Matrix3.ToString() -> string!
override OpenNefia.Core.Maths.Matrix4.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Matrix4.GetHashCode() -> int
override OpenNefia.Core.Maths.Matrix4.ToString() -> string!
override OpenNefia.Core.Maths.Quaternion.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Quaternion.GetHashCode() -> int
override OpenNefia.Core.Maths.Quaternion.ToString() -> string!
override OpenNefia.Core.Maths.Thickness.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Thickness.GetHashCode() -> int
override OpenNefia.Core.Maths.Thickness.ToString() -> string!
override OpenNefia.Core.Maths.UIBox2.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.UIBox2.GetHashCode() -> int
override OpenNefia.Core.Maths.UIBox2.ToString() -> string!
override OpenNefia.Core.Maths.UIBox2i.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.UIBox2i.GetHashCode() -> int
override OpenNefia.Core.Maths.UIBox2i.ToString() -> string!
override OpenNefia.Core.Maths.Vector2.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Vector2.GetHashCode() -> int
override OpenNefia.Core.Maths.Vector2.ToString() -> string!
override OpenNefia.Core.Maths.Vector2i.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Vector2i.GetHashCode() -> int
override OpenNefia.Core.Maths.Vector2i.ToString() -> string!
override OpenNefia.Core.Maths.Vector3.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Vector3.GetHashCode() -> int
override OpenNefia.Core.Maths.Vector3.ToString() -> string!
override OpenNefia.Core.Maths.Vector4.Equals(object? obj) -> bool
override OpenNefia.Core.Maths.Vector4.GetHashCode() -> int
override OpenNefia.Core.Maths.Vector4.ToString() -> string!
override OpenNefia.Core.Prototypes.EntityPrototype.ToString() -> string!
override OpenNefia.Core.Prototypes.PrototypeId<T>.Equals(object? obj) -> bool
override OpenNefia.Core.Prototypes.PrototypeId<T>.GetHashCode() -> int
override OpenNefia.Core.Prototypes.PrototypeId<T>.ToString() -> string!
override OpenNefia.Core.Prototypes.PrototypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
override OpenNefia.Core.Prototypes.PrototypeLoadException.Message.get -> string!
override OpenNefia.Core.Prototypes.UnknownPrototypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
override OpenNefia.Core.Prototypes.UnknownPrototypeException.Message.get -> string!
override OpenNefia.Core.Rendering.AssetDrawable.Draw() -> void
override OpenNefia.Core.Rendering.AssetDrawable.GetPreferredSize(out OpenNefia.Core.Maths.Vector2 size) -> void
override OpenNefia.Core.Rendering.AssetDrawable.Update(float dt) -> void
override OpenNefia.Core.Rendering.AssetInstance.AssetBatchPart.ToString() -> string!
override OpenNefia.Core.Rendering.EntityDrawablesComponent.Name.get -> string!
override OpenNefia.Core.Rendering.GlobalDrawablesManager.Draw() -> void
override OpenNefia.Core.Rendering.GlobalDrawablesManager.Update(float dt) -> void
override OpenNefia.Core.Rendering.MapDrawablesManager.Draw() -> void
override OpenNefia.Core.Rendering.MapDrawablesManager.Update(float dt) -> void
override OpenNefia.Core.Rendering.MapRenderer.Dispose() -> void
override OpenNefia.Core.Rendering.MapRenderer.Draw() -> void
override OpenNefia.Core.Rendering.MapRenderer.SetPosition(float x, float y) -> void
override OpenNefia.Core.Rendering.MapRenderer.SetSize(float width, float height) -> void
override OpenNefia.Core.Rendering.MapRenderer.Update(float dt) -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.Draw() -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.Initialize() -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.OnThemeSwitched() -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.RedrawAll() -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.RedrawDirtyTiles(System.Collections.Generic.HashSet<OpenNefia.Core.Maths.Vector2i>! dirtyTilesThisTurn) -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.SetMap(OpenNefia.Core.Maps.IMap! map) -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.SetPosition(float x, float y) -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.SetSize(float width, float height) -> void
override OpenNefia.Core.Rendering.TileDrawLayers.TileAndChipTileLayer.Update(float dt) -> void
override OpenNefia.Core.Rendering.WallTileShadows.Draw() -> void
override OpenNefia.Core.Rendering.WallTileShadows.Update(float dt) -> void
override OpenNefia.Core.ResourceManagement.LoveFileDataResource.Fallback.get -> OpenNefia.Core.Utility.ResourcePath?
override OpenNefia.Core.ResourceManagement.LoveFileDataResource.Load(OpenNefia.Core.ResourceManagement.IResourceCache! cache, OpenNefia.Core.Utility.ResourcePath! path) -> void
override OpenNefia.Core.ResourceManagement.LoveFileDataResource.Reload(OpenNefia.Core.ResourceManagement.IResourceCache! cache, OpenNefia.Core.Utility.ResourcePath! path, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> void
override OpenNefia.Core.ResourceManagement.LoveImageResource.Fallback.get -> OpenNefia.Core.Utility.ResourcePath!
override OpenNefia.Core.ResourceManagement.LoveImageResource.Load(OpenNefia.Core.ResourceManagement.IResourceCache! cache, OpenNefia.Core.Utility.ResourcePath! path) -> void
override OpenNefia.Core.ResourceManagement.LoveImageResource.Reload(OpenNefia.Core.ResourceManagement.IResourceCache! cache, OpenNefia.Core.Utility.ResourcePath! path, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> void
override OpenNefia.Core.Serialization.Manager.Result.DeserializedArray.CallAfterDeserializationHook() -> void
override OpenNefia.Core.Serialization.Manager.Result.DeserializedArray.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedArray.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedArray.RawValue.get -> object!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.CallAfterDeserializationHook() -> void
override OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.RawValue.get -> object!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedCollection<TCollection, TElement>.Value.get -> TCollection
override OpenNefia.Core.Serialization.Manager.Result.DeserializedComponentRegistry.CallAfterDeserializationHook() -> void
override OpenNefia.Core.Serialization.Manager.Result.DeserializedComponentRegistry.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedComponentRegistry.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedComponentRegistry.RawValue.get -> object!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedComponentRegistry.Value.get -> OpenNefia.Core.Prototypes.EntityPrototype.ComponentRegistry!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>.CallAfterDeserializationHook() -> void
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>.RawValue.get -> object!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDefinition<T>.Value.get -> T
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.CallAfterDeserializationHook() -> void
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.RawValue.get -> object!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedDictionary<TDict, TKey, TValue>.Value.get -> TDict
override OpenNefia.Core.Serialization.Manager.Result.DeserializedHspIds<TValue>.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedHspIds<TValue>.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedHspIds<TValue>.RawValue.get -> object!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue.CallAfterDeserializationHook() -> void
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue.RawValue.get -> object?
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue<T>.CallAfterDeserializationHook() -> void
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue<T>.Copy() -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue<T>.PushInheritanceFrom(OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! source) -> OpenNefia.Core.Serialization.Manager.Result.DeserializationResult!
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue<T>.RawValue.get -> object?
override OpenNefia.Core.Serialization.Manager.Result.DeserializedValue<T>.Value.get -> T
override OpenNefia.Core.Serialization.Manager.Result.InvalidDeserializedResultTypeException<TExpected>.Message.get -> string!
override OpenNefia.Core.Serialization.Markdown.DataNode<T>.Except(OpenNefia.Core.Serialization.Markdown.DataNode! node) -> OpenNefia.Core.Serialization.Markdown.DataNode?
override OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Copy() -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
override OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.Except(OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! node) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode?
override OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode.GetHashCode() -> int
override OpenNefia.Core.Serialization.Markdown.NodeMark.Equals(object? obj) -> bool
override OpenNefia.Core.Serialization.Markdown.NodeMark.GetHashCode() -> int
override OpenNefia.Core.Serialization.Markdown.NodeMark.ToString() -> string!
override OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.Copy() -> OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode!
override OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.Except(OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode! node) -> OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode?
override OpenNefia.Core.Serialization.Markdown.Sequence.SequenceDataNode.GetHashCode() -> int
override OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.Equals(object? obj) -> bool
override OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.GetErrors() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode!>!
override OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.GetHashCode() -> int
override OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.Valid.get -> bool
override OpenNefia.Core.Serialization.Markdown.Validation.InconclusiveNode.GetErrors() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode!>!
override OpenNefia.Core.Serialization.Markdown.Validation.InconclusiveNode.ToString() -> string?
override OpenNefia.Core.Serialization.Markdown.Validation.InconclusiveNode.Valid.get -> bool
override OpenNefia.Core.Serialization.Markdown.Validation.ValidatedMappingNode.GetErrors() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode!>!
override OpenNefia.Core.Serialization.Markdown.Validation.ValidatedMappingNode.Valid.get -> bool
override OpenNefia.Core.Serialization.Markdown.Validation.ValidatedSequenceNode.GetErrors() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode!>!
override OpenNefia.Core.Serialization.Markdown.Validation.ValidatedSequenceNode.Valid.get -> bool
override OpenNefia.Core.Serialization.Markdown.Validation.ValidatedValueNode.GetErrors() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode!>!
override OpenNefia.Core.Serialization.Markdown.Validation.ValidatedValueNode.ToString() -> string?
override OpenNefia.Core.Serialization.Markdown.Validation.ValidatedValueNode.Valid.get -> bool
override OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.Copy() -> OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode!
override OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.Equals(object? obj) -> bool
override OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.Except(OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode! node) -> OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode?
override OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.GetHashCode() -> int
override OpenNefia.Core.Serialization.Markdown.Value.ValueDataNode.ToString() -> string!
override OpenNefia.Core.Stats.Serialization.StatSerializerFull<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Stats.Stat<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
override OpenNefia.Core.Stats.Serialization.StatSerializerPartial<T>.Write(OpenNefia.Core.Serialization.Manager.ISerializationManager! serializationManager, OpenNefia.Core.Stats.Stat<T>! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> OpenNefia.Core.Serialization.Markdown.DataNode!
override OpenNefia.Core.Stats.Stat<T>.Equals(object? other) -> bool
override OpenNefia.Core.Stats.Stat<T>.GetHashCode() -> int
override OpenNefia.Core.Stats.Stat<T>.ToString() -> string!
override OpenNefia.Core.UI.Element.UiElement.Dispose() -> void
override OpenNefia.Core.UI.Element.UiElement.Draw() -> void
override OpenNefia.Core.UI.Element.UiElement.SetSize(float width, float height) -> void
override OpenNefia.Core.UI.Element.UiElement.UIScale.get -> float
override OpenNefia.Core.UI.Element.UiElement.Update(float dt) -> void
override OpenNefia.Core.UI.Layer.MinimalProgressBarLayer.Dispose() -> void
override OpenNefia.Core.UI.Layer.MinimalProgressBarLayer.Draw() -> void
override OpenNefia.Core.UI.Layer.MinimalProgressBarLayer.GetPreferredBounds(out OpenNefia.Core.Maths.UIBox2 bounds) -> void
override OpenNefia.Core.UI.Layer.MinimalProgressBarLayer.Initialize(OpenNefia.Core.UI.IProgressableJob! job) -> void
override OpenNefia.Core.UI.Layer.MinimalProgressBarLayer.OnQuery() -> void
override OpenNefia.Core.UI.Layer.MinimalProgressBarLayer.Update(float dt) -> void
override OpenNefia.Core.UI.Layer.UiLayer.GrabFocus() -> void
override OpenNefia.Core.UI.Layer.UiLayer.KeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Layer.UiLayer.KeyBindUp(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Layer.UiLayer.Root.get -> OpenNefia.Core.UI.Layer.UiLayer?
override OpenNefia.Core.UI.Layer.UiLayer.UIScale.get -> float
override OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.Localize(OpenNefia.Core.LocaleKey key) -> void
override OpenNefia.Core.UI.UiResult<T>.Cancelled.ToString() -> string!
override OpenNefia.Core.UI.UiResult<T>.Error.ToString() -> string!
override OpenNefia.Core.UI.UiResult<T>.Finished.ToString() -> string!
override OpenNefia.Core.UI.Wisp.Controls.BaseButton.ControlFocusExited() -> void
override OpenNefia.Core.UI.Wisp.Controls.BaseButton.KeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.BaseButton.KeyBindUp(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.BaseButton.MouseEntered() -> void
override OpenNefia.Core.UI.Wisp.Controls.BaseButton.MouseExited() -> void
override OpenNefia.Core.UI.Wisp.Controls.BoxContainer.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.BoxContainer.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.Button.StylePropertiesChanged() -> void
override OpenNefia.Core.UI.Wisp.Controls.CheckBox.DrawModeChanged() -> void
override OpenNefia.Core.UI.Wisp.Controls.ChipView.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.ChipView.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.ContainerButton.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.ContainerButton.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.ContainerButton.DrawModeChanged() -> void
override OpenNefia.Core.UI.Wisp.Controls.ContainerButton.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.GridContainer.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.GridContainer.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.ItemList.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.ItemList.KeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.ItemList.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.ItemList.MouseMove(OpenNefia.Core.UI.Element.GUIMouseMoveEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.ItemList.MouseWheel(OpenNefia.Core.UI.Element.GUIMouseWheelEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.ItemList.Resized() -> void
override OpenNefia.Core.UI.Wisp.Controls.ItemList.UIScaleChanged(OpenNefia.Core.UI.Element.GUIScaleChangedEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.Label.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.Label.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.Label.StylePropertiesChanged() -> void
override OpenNefia.Core.UI.Wisp.Controls.Label.UIScaleChanged(OpenNefia.Core.UI.Element.GUIScaleChangedEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.KeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.KeyBindUp(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.KeyboardFocusEntered() -> void
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.KeyboardFocusExited() -> void
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.MouseMove(OpenNefia.Core.UI.Element.GUIMouseMoveEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.TextEntered(OpenNefia.Core.UI.Element.GUITextEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.LineEdit.Update(float dt) -> void
override OpenNefia.Core.UI.Wisp.Controls.OptionButton.ExitedTree() -> void
override OpenNefia.Core.UI.Wisp.Controls.PanelContainer.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.PanelContainer.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.PanelContainer.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.Popup.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.Popup.ModalRemoved() -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.KeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.KeyBindUp(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.MouseExited() -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.MouseMove(OpenNefia.Core.UI.Element.GUIMouseMoveEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.Update(float dt) -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.Value.get -> float
override OpenNefia.Core.UI.Wisp.Controls.ScrollBar.Value.set -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.ChildAdded(OpenNefia.Core.UI.Element.UiElement! newChild) -> void
override OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.ScrollContainer.MouseWheel(OpenNefia.Core.UI.Element.GUIMouseWheelEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.TabContainer.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.TabContainer.ChildAdded(OpenNefia.Core.UI.Element.UiElement! newChild) -> void
override OpenNefia.Core.UI.Wisp.Controls.TabContainer.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.TabContainer.KeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.Controls.TabContainer.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.TextureButton.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.TextureButton.DrawModeChanged() -> void
override OpenNefia.Core.UI.Wisp.Controls.TextureButton.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.TextureRect.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.TextureRect.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.Controls.TileView.Draw() -> void
override OpenNefia.Core.UI.Wisp.Controls.TileView.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.KeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.KeyBindUp(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.MouseExited() -> void
override OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.MouseMove(OpenNefia.Core.UI.Element.GUIMouseMoveEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.Dispose(bool disposing) -> void
override OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.GetDragModeFor(OpenNefia.Core.Maths.Vector2 relativeMousePos) -> OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
override OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.Update(float dt) -> void
override OpenNefia.Core.UI.Wisp.Styling.SelectorChild.CalculateSpecificity() -> OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity
override OpenNefia.Core.UI.Wisp.Styling.SelectorChild.Matches(OpenNefia.Core.UI.Wisp.WispControl! control) -> bool
override OpenNefia.Core.UI.Wisp.Styling.SelectorChild.ToString() -> string!
override OpenNefia.Core.UI.Wisp.Styling.SelectorElement.CalculateSpecificity() -> OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity
override OpenNefia.Core.UI.Wisp.Styling.SelectorElement.Matches(OpenNefia.Core.UI.Wisp.WispControl! control) -> bool
override OpenNefia.Core.UI.Wisp.Styling.SelectorElement.ToString() -> string!
override OpenNefia.Core.UI.Wisp.Styling.StyleProperty.ToString() -> string!
override OpenNefia.Core.UI.Wisp.Styling.StyleRule.ToString() -> string!
override OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.ToString() -> string!
override OpenNefia.Core.UI.Wisp.WispControl.ChildAdded(OpenNefia.Core.UI.Element.UiElement! newChild) -> void
override OpenNefia.Core.UI.Wisp.WispControl.ChildRemoved(OpenNefia.Core.UI.Element.UiElement! child) -> void
override OpenNefia.Core.UI.Wisp.WispControl.ContainsPoint(OpenNefia.Core.Maths.Vector2 point) -> bool
override OpenNefia.Core.UI.Wisp.WispControl.ExactSize.get -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.WispControl.ExactSize.set -> void
override OpenNefia.Core.UI.Wisp.WispControl.GlobalPixelPosition.get -> OpenNefia.Core.Maths.Vector2i
override OpenNefia.Core.UI.Wisp.WispControl.GlobalPosition.get -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.WispControl.MaxSize.get -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.WispControl.MaxSize.set -> void
override OpenNefia.Core.UI.Wisp.WispControl.MinSize.get -> OpenNefia.Core.Maths.Vector2
override OpenNefia.Core.UI.Wisp.WispControl.MinSize.set -> void
override OpenNefia.Core.UI.Wisp.WispControl.Parented(OpenNefia.Core.UI.Element.UiElement! newParent) -> void
override OpenNefia.Core.UI.Wisp.WispControl.SetSize(float width, float height) -> void
override OpenNefia.Core.UI.Wisp.WispControl.UIScaleChanged(OpenNefia.Core.UI.Element.GUIScaleChangedEventArgs! args) -> void
override OpenNefia.Core.UI.Wisp.WispControl.Visible.get -> bool
override OpenNefia.Core.UI.Wisp.WispControl.Visible.set -> void
override OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.Draw() -> void
override OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.OnQuery() -> void
override OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.OnQueryFinish() -> void
override OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.SetSize(float width, float height) -> void
override OpenNefia.Core.UI.Wisp.WispLayerWithResult<TArgs, TResult>.Update(float dt) -> void
override OpenNefia.Core.Utility.FormattedMessage.TagColor.ToString() -> string!
override OpenNefia.Core.Utility.FormattedMessage.TagPop.ToString() -> string!
override OpenNefia.Core.Utility.FormattedMessage.TagText.ToString() -> string!
override OpenNefia.Core.Utility.FormattedMessage.ToString() -> string!
override OpenNefia.Core.Utility.ResourcePath.Equals(object? obj) -> bool
override OpenNefia.Core.Utility.ResourcePath.GetHashCode() -> int
override OpenNefia.Core.Utility.ResourcePath.ToString() -> string!
override OpenNefia.Core.Utility.StructMultiKey<T1, T2>.Equals(object? obj) -> bool
override OpenNefia.Core.Utility.StructMultiKey<T1, T2>.GetHashCode() -> int
override OpenNefia.Core.ViewVariables.ViewVariablesBuiltinPropertyMatcher.PropEditorFor(System.Type! type) -> OpenNefia.Core.ViewVariables.VVPropEditor?
override sealed OpenNefia.Core.Containers.ContainerManagerComponent.Name.get -> string!
override sealed OpenNefia.Core.UI.Layer.UiLayer.GetPreferredSize(out OpenNefia.Core.Maths.Vector2 size) -> void
override sealed OpenNefia.Core.UI.Wisp.WispControl.GetPreferredSize(out OpenNefia.Core.Maths.Vector2 size) -> void
readonly OpenNefia.Core.Containers.ContainerAttemptEventBase.Container -> OpenNefia.Core.Containers.IContainer!
readonly OpenNefia.Core.Containers.ContainerAttemptEventBase.EntityUid -> OpenNefia.Core.GameObjects.EntityUid
readonly OpenNefia.Core.ContentPack.BaseModLoader.Mods -> System.Collections.Generic.List<OpenNefia.Core.ContentPack.BaseModLoader.ModInfo!>!
readonly OpenNefia.Core.ContentPack.BaseModLoader.ReflectionManager -> OpenNefia.Core.Reflection.IReflectionManager!
readonly OpenNefia.Core.Exceptions.TypeArgumentException.TypeArgumentName -> string?
readonly OpenNefia.Core.GameObjects.AfterMoveEventArgs.NewPosition -> OpenNefia.Core.Maps.MapCoordinates
readonly OpenNefia.Core.GameObjects.AfterMoveEventArgs.OldPosition -> OpenNefia.Core.Maps.MapCoordinates
readonly OpenNefia.Core.GameObjects.BeforeMoveEventArgs.DesiredPosition -> OpenNefia.Core.Maps.MapCoordinates
readonly OpenNefia.Core.GameObjects.BeforeMoveEventArgs.OldPosition -> OpenNefia.Core.Maps.MapCoordinates
readonly OpenNefia.Core.GameObjects.ComponentDependencyAttribute.OnAddMethodName -> string?
readonly OpenNefia.Core.GameObjects.ComponentDependencyAttribute.OnRemoveMethodName -> string?
readonly OpenNefia.Core.GameObjects.ComponentDependencyInvalidMethodNameException.Field -> System.Reflection.FieldInfo!
readonly OpenNefia.Core.GameObjects.ComponentDependencyInvalidMethodNameException.MethodTarget -> string!
readonly OpenNefia.Core.GameObjects.ComponentDependencyNotNullableException.ComponentType -> System.Type!
readonly OpenNefia.Core.GameObjects.ComponentDependencyNotNullableException.Field -> System.Reflection.FieldInfo!
readonly OpenNefia.Core.GameObjects.ComponentDependencyValueTypeException.ComponentType -> System.Type!
readonly OpenNefia.Core.GameObjects.ComponentDependencyValueTypeException.FieldInfo -> System.Reflection.FieldInfo!
readonly OpenNefia.Core.GameObjects.EntityLivenessChangedEvent.EntityUid -> OpenNefia.Core.GameObjects.EntityUid
readonly OpenNefia.Core.GameObjects.EntityLivenessChangedEvent.NewLiveness -> OpenNefia.Core.GameObjects.EntityGameLiveness
readonly OpenNefia.Core.GameObjects.EntityLivenessChangedEvent.OldLiveness -> OpenNefia.Core.GameObjects.EntityGameLiveness
readonly OpenNefia.Core.GameObjects.EntityPositionChangedEvent.Component -> OpenNefia.Core.GameObjects.SpatialComponent!
readonly OpenNefia.Core.GameObjects.EntityPositionChangedEvent.NewPosition -> OpenNefia.Core.Maps.EntityCoordinates
readonly OpenNefia.Core.GameObjects.EntityPositionChangedEvent.OldPosition -> OpenNefia.Core.Maps.EntityCoordinates
readonly OpenNefia.Core.GameObjects.EntitySystem.EntityManager -> OpenNefia.Core.GameObjects.IEntityManager!
readonly OpenNefia.Core.GameObjects.GetVerbsEventArgs.Source -> OpenNefia.Core.GameObjects.EntityUid
readonly OpenNefia.Core.GameObjects.GetVerbsEventArgs.Target -> OpenNefia.Core.GameObjects.EntityUid
readonly OpenNefia.Core.GameObjects.GetVerbsEventArgs.Verbs -> System.Collections.Generic.SortedSet<OpenNefia.Core.Logic.Verb!>!
readonly OpenNefia.Core.GameObjects.MoveEventArgs.NewPosition -> OpenNefia.Core.Maps.MapCoordinates
readonly OpenNefia.Core.GameObjects.MoveEventArgs.OldPosition -> OpenNefia.Core.Maps.MapCoordinates
readonly OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs.Coordinates -> OpenNefia.Core.Maps.EntityCoordinates
readonly OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs.EntityUid -> OpenNefia.Core.GameObjects.EntityUid?
readonly OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs.OriginalMessage -> OpenNefia.Core.Input.FullInputCmdMessage!
readonly OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs.ScreenCoordinates -> OpenNefia.Core.Maps.ScreenCoordinates
readonly OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs.Session -> OpenNefia.Core.Game.IGameSessionManager?
readonly OpenNefia.Core.Input.Binding.PointerInputCmdHandler.PointerInputCmdArgs.State -> OpenNefia.Core.Input.BoundKeyState
readonly OpenNefia.Core.Input.BoundKeyFunction.FunctionName -> string!
readonly OpenNefia.Core.Input.GuiRawKeyEvent.Action -> OpenNefia.Core.Input.RawKeyAction
readonly OpenNefia.Core.Input.GuiRawKeyEvent.Key -> OpenNefia.Core.Input.Keyboard.Key
readonly OpenNefia.Core.Input.GuiRawKeyEvent.MouseRelative -> OpenNefia.Core.Maths.Vector2i
readonly OpenNefia.Core.Input.GuiRawKeyEvent.ScanCode -> Love.Scancode
readonly OpenNefia.Core.IoC.Exceptions.ImplementationConstructorException.typeName -> string?
readonly OpenNefia.Core.IoC.Exceptions.UnregisteredDependencyException.FieldName -> string?
readonly OpenNefia.Core.IoC.Exceptions.UnregisteredDependencyException.OwnerType -> string?
readonly OpenNefia.Core.IoC.Exceptions.UnregisteredDependencyException.TargetType -> string?
readonly OpenNefia.Core.IoC.Exceptions.UnregisteredTypeException.TypeName -> string?
readonly OpenNefia.Core.Locale.LocalizeAttribute.Required -> bool
readonly OpenNefia.Core.Logic.Verb.Act -> OpenNefia.Core.Logic.VerbAction!
readonly OpenNefia.Core.Logic.Verb.VerbType -> string!
readonly OpenNefia.Core.Logic.VerbRequest.VerbType -> string!
readonly OpenNefia.Core.Maps.EntityCoordinates.EntityId -> OpenNefia.Core.GameObjects.EntityUid
readonly OpenNefia.Core.Maps.EntityCoordinates.Position -> OpenNefia.Core.Maths.Vector2i
readonly OpenNefia.Core.Maps.MapCoordinates.MapId -> OpenNefia.Core.Maps.MapId
readonly OpenNefia.Core.Maps.MapCoordinates.Position -> OpenNefia.Core.Maths.Vector2i
readonly OpenNefia.Core.Maps.MapMetadata.Author -> string!
readonly OpenNefia.Core.Maps.MapMetadata.Name -> string!
readonly OpenNefia.Core.Maps.ScreenCoordinates.Position -> OpenNefia.Core.Maths.Vector2
readonly OpenNefia.Core.Maps.Tile.Type -> int
readonly OpenNefia.Core.Maps.TileDefinitionManager.TileDefs -> System.Collections.Generic.List<OpenNefia.Core.Maps.TilePrototype!>!
readonly OpenNefia.Core.Maps.TileRef.MapId -> OpenNefia.Core.Maps.MapId
readonly OpenNefia.Core.Maps.TileRef.Position -> OpenNefia.Core.Maths.Vector2i
readonly OpenNefia.Core.Maps.TileRef.Tile -> OpenNefia.Core.Maps.Tile
readonly OpenNefia.Core.Maths.Angle.Theta -> double
readonly OpenNefia.Core.Prototypes.PrototypeAttribute.LoadPriority -> int
readonly OpenNefia.Core.Prototypes.PrototypeLoadException.Filename -> string?
readonly OpenNefia.Core.Prototypes.PrototypeLoadException.Node -> YamlDotNet.RepresentationModel.YamlNode?
readonly OpenNefia.Core.Prototypes.UnknownPrototypeException.Prototype -> string?
readonly OpenNefia.Core.Prototypes.UnknownPrototypeException.Type -> System.Type?
readonly OpenNefia.Core.Reflection.ReflectionUpdateEventArgs.ReflectionManager -> OpenNefia.Core.Reflection.IReflectionManager!
readonly OpenNefia.Core.Rendering.RegisterTileLayerAttribute.EnabledAtStartup -> bool
readonly OpenNefia.Core.Rendering.RegisterTileLayerAttribute.RenderAfter -> System.Type![]!
readonly OpenNefia.Core.Rendering.RegisterTileLayerAttribute.RenderBefore -> System.Type![]!
readonly OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.Assets -> OpenNefia.Core.Rendering.IAssetManager!
readonly OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.EntityManager -> OpenNefia.Core.GameObjects.IEntityManager!
readonly OpenNefia.Core.Serialization.Manager.Attributes.DataFieldAttribute.CustomTypeSerializer -> System.Type?
readonly OpenNefia.Core.Serialization.Manager.Attributes.DataFieldAttribute.NoCompare -> bool
readonly OpenNefia.Core.Serialization.Manager.Attributes.DataFieldAttribute.Priority -> int
readonly OpenNefia.Core.Serialization.Manager.Attributes.DataFieldAttribute.ReadOnly -> bool
readonly OpenNefia.Core.Serialization.Manager.Attributes.DataFieldAttribute.Required -> bool
readonly OpenNefia.Core.Serialization.Manager.Attributes.DataFieldAttribute.Tag -> string?
readonly OpenNefia.Core.Serialization.Manager.Result.InvalidDeserializedResultTypeException<TExpected>.ReceivedType -> System.Type!
readonly OpenNefia.Core.UI.Element.ControlChildMovedEventArgs.Control -> OpenNefia.Core.UI.Element.UiElement!
readonly OpenNefia.Core.UI.Element.ControlChildMovedEventArgs.NewIndex -> int
readonly OpenNefia.Core.UI.Element.ControlChildMovedEventArgs.OldIndex -> int
readonly OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.ClassSelectors -> int
readonly OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.IdSelectors -> int
readonly OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.TypeSelectors -> int
readonly OpenNefia.Core.Utility.StructMultiKey<T1, T2>.Value1 -> T1
readonly OpenNefia.Core.Utility.StructMultiKey<T1, T2>.Value2 -> T2
readonly OpenNefia.Core.Utility.TopologicalSort.GraphNode<T>.Dependant -> System.Collections.Generic.List<OpenNefia.Core.Utility.TopologicalSort.GraphNode<T>!>!
readonly OpenNefia.Core.Utility.TopologicalSort.GraphNode<T>.Value -> T
readonly OpenNefia.Core.ViewVariables.ViewVariablesAttribute.Access -> OpenNefia.Core.ViewVariables.VVAccess
static OpenNefia.Core.Areas.AreaFloorId.explicit operator string!(OpenNefia.Core.Areas.AreaFloorId self) -> string!
static OpenNefia.Core.Areas.AreaFloorId.operator !=(OpenNefia.Core.Areas.AreaFloorId a, OpenNefia.Core.Areas.AreaFloorId b) -> bool
static OpenNefia.Core.Areas.AreaFloorId.operator ==(OpenNefia.Core.Areas.AreaFloorId a, OpenNefia.Core.Areas.AreaFloorId b) -> bool
static OpenNefia.Core.Areas.AreaId.explicit operator int(OpenNefia.Core.Areas.AreaId self) -> int
static OpenNefia.Core.Areas.AreaId.operator !=(OpenNefia.Core.Areas.AreaId a, OpenNefia.Core.Areas.AreaId b) -> bool
static OpenNefia.Core.Areas.AreaId.operator ==(OpenNefia.Core.Areas.AreaId a, OpenNefia.Core.Areas.AreaId b) -> bool
static OpenNefia.Core.Areas.GlobalAreaId.explicit operator string!(OpenNefia.Core.Areas.GlobalAreaId self) -> string!
static OpenNefia.Core.Areas.GlobalAreaId.operator !=(OpenNefia.Core.Areas.GlobalAreaId a, OpenNefia.Core.Areas.GlobalAreaId b) -> bool
static OpenNefia.Core.Areas.GlobalAreaId.operator ==(OpenNefia.Core.Areas.GlobalAreaId a, OpenNefia.Core.Areas.GlobalAreaId b) -> bool
static OpenNefia.Core.Asynchronous.RobustTaskScheduler.Execute(object? o) -> void
static OpenNefia.Core.Audio.Music.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.MusicPrototype!> prototype) -> void
static OpenNefia.Core.Audio.Music.Stop() -> void
static OpenNefia.Core.Audio.Sounds.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> prototype, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
static OpenNefia.Core.Audio.Sounds.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> prototype, OpenNefia.Core.GameObjects.EntityUid entityUid, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
static OpenNefia.Core.Audio.Sounds.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> prototype, OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
static OpenNefia.Core.Audio.Sounds.Play(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Audio.SoundPrototype!> prototype, OpenNefia.Core.Maths.Vector2i screenPosition, OpenNefia.Core.Audio.AudioParams? audioParams = null) -> void
static OpenNefia.Core.Configuration.CVarDef.Create<T>(string! name, T defaultValue, OpenNefia.Core.Configuration.CVar flag = OpenNefia.Core.Configuration.CVar.None, string? desc = null) -> OpenNefia.Core.Configuration.CVarDef<T>!
static OpenNefia.Core.Configuration.EnvironmentVariables.GetEnvironmentCVars() -> System.Collections.Generic.IEnumerable<(string!, string!)>!
static OpenNefia.Core.Containers.ContainerHelpers.AttachParentToContainerOrGrid(OpenNefia.Core.GameObjects.SpatialComponent! transform) -> void
static OpenNefia.Core.Containers.ContainerHelpers.EnsureContainer<T>(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id) -> T
static OpenNefia.Core.Containers.ContainerHelpers.EnsureContainer<T>(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.Containers.ContainerId id, out bool alreadyExisted) -> T
static OpenNefia.Core.Containers.ContainerHelpers.RemoveEntity(OpenNefia.Core.GameObjects.EntityUid uid, OpenNefia.Core.GameObjects.EntityUid containedUid, bool force = false, OpenNefia.Core.Containers.ContainerManagerComponent? containerManager = null) -> bool
static OpenNefia.Core.Containers.ContainerHelpers.TryGetContainerMan(OpenNefia.Core.GameObjects.EntityUid entity, out OpenNefia.Core.Containers.ContainerManagerComponent? manager) -> bool
static OpenNefia.Core.Containers.ContainerId.explicit operator string!(OpenNefia.Core.Containers.ContainerId self) -> string!
static OpenNefia.Core.Containers.ContainerId.operator !=(OpenNefia.Core.Containers.ContainerId a, OpenNefia.Core.Containers.ContainerId b) -> bool
static OpenNefia.Core.Containers.ContainerId.operator ==(OpenNefia.Core.Containers.ContainerId a, OpenNefia.Core.Containers.ContainerId b) -> bool
static OpenNefia.Core.ContentPack.AppDomainExt.GetAssemblyByName(this System.AppDomain! domain, string! name) -> System.Reflection.Assembly!
static OpenNefia.Core.ContentPack.ModLoaderExt.IsContentType(this OpenNefia.Core.ContentPack.IModLoader! modLoader, System.Type! type) -> bool
static OpenNefia.Core.ContentPack.ModLoaderExt.IsContentTypeAccessAllowed(this OpenNefia.Core.ContentPack.IModLoader! modLoader, System.Type! type) -> bool
static OpenNefia.Core.ContentPack.ResourceManagerExt.ContentFileReadOrNull(this OpenNefia.Core.ContentPack.IResourceManager! res, OpenNefia.Core.Utility.ResourcePath! path) -> System.IO.Stream?
static OpenNefia.Core.ContentPack.WritableDirProviderExt.AppendAllText(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path, System.ReadOnlySpan<char> content) -> void
static OpenNefia.Core.ContentPack.WritableDirProviderExt.OpenRead(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> System.IO.Stream!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.OpenText(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> System.IO.StreamReader!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.OpenTextCompressed(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> System.IO.StreamReader!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.OpenWrite(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> System.IO.Stream!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.OpenWriteText(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> System.IO.StreamWriter!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.OpenWriteTextCompressed(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path, System.IO.Compression.CompressionLevel compressionLevel = System.IO.Compression.CompressionLevel.Optimal) -> System.IO.StreamWriter!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.ReadAllBytes(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> byte[]!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.ReadAllLoveFileData(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> Love.FileData!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.ReadAllText(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> string!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.ReadAllYaml(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path) -> YamlDotNet.RepresentationModel.YamlStream!
static OpenNefia.Core.ContentPack.WritableDirProviderExt.ReadSerializedData<T>(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path, OpenNefia.Core.Serialization.Manager.ISerializationManager! serMan, bool skipHook = false) -> T?
static OpenNefia.Core.ContentPack.WritableDirProviderExt.TryReadAllText(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path, out string? text) -> bool
static OpenNefia.Core.ContentPack.WritableDirProviderExt.WriteAllBytes(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path, System.ReadOnlySpan<byte> content) -> void
static OpenNefia.Core.ContentPack.WritableDirProviderExt.WriteAllText(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path, System.ReadOnlySpan<char> content) -> void
static OpenNefia.Core.ContentPack.WritableDirProviderExt.WriteAllYaml(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path, YamlDotNet.RepresentationModel.YamlNode! node) -> void
static OpenNefia.Core.ContentPack.WritableDirProviderExt.WriteSerializedData<T>(this OpenNefia.Core.ContentPack.IWritableDirProvider! provider, OpenNefia.Core.Utility.ResourcePath! path, T data, OpenNefia.Core.Serialization.Manager.ISerializationManager! serMan, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> void
static OpenNefia.Core.Directions.DirectionUtility.DirectionTowards(this OpenNefia.Core.Maths.Vector2i from, OpenNefia.Core.Maths.Vector2i to) -> OpenNefia.Core.Maths.Direction
static OpenNefia.Core.Directions.DirectionUtility.Offset(this OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.Maths.Direction direction) -> OpenNefia.Core.Maps.EntityCoordinates
static OpenNefia.Core.Directions.DirectionUtility.Offset(this OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.Maths.Direction direction) -> OpenNefia.Core.Maps.MapCoordinates
static OpenNefia.Core.Directions.DirectionUtility.RandomCardinalDirections() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Maths.Direction>!
static OpenNefia.Core.Directions.DirectionUtility.RandomDirections() -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Maths.Direction>!
static OpenNefia.Core.Directions.DirectionUtility.TryDirectionTowards(this OpenNefia.Core.Maps.MapCoordinates from, OpenNefia.Core.Maps.MapCoordinates to, out OpenNefia.Core.Maths.Direction dir) -> bool
static OpenNefia.Core.Engine.Version.get -> System.Version!
static OpenNefia.Core.Game.GameSession.ActiveMap.get -> OpenNefia.Core.Maps.IMap?
static OpenNefia.Core.Game.GameSession.Coords.get -> OpenNefia.Core.Rendering.ICoords!
static OpenNefia.Core.Game.GameSession.Player.get -> OpenNefia.Core.GameObjects.EntityUid
static OpenNefia.Core.GameObjects.EntityManagerExt.GetComponentOrNull<T>(this OpenNefia.Core.GameObjects.IEntityManager! entityManager, OpenNefia.Core.GameObjects.EntityUid entityUid) -> T?
static OpenNefia.Core.GameObjects.EntityManagerExt.GetComponentOrNull<T>(this OpenNefia.Core.GameObjects.IEntityManager! entityManager, OpenNefia.Core.GameObjects.EntityUid? entityUid) -> T?
static OpenNefia.Core.GameObjects.EntityStringRepresentation.implicit operator string!(OpenNefia.Core.GameObjects.EntityStringRepresentation rep) -> string!
static OpenNefia.Core.GameObjects.EntitySystem.Get(System.Type! type) -> OpenNefia.Core.GameObjects.IEntitySystem!
static OpenNefia.Core.GameObjects.EntitySystem.Get<T>() -> T
static OpenNefia.Core.GameObjects.EntitySystem.InjectDependencies<T>(T obj) -> T
static OpenNefia.Core.GameObjects.EntitySystem.TryGet(System.Type! type, out OpenNefia.Core.GameObjects.IEntitySystem? entitySystem) -> bool
static OpenNefia.Core.GameObjects.EntitySystem.TryGet<T>(out T? entitySystem) -> bool
static OpenNefia.Core.GameObjects.EntityUid.explicit operator int(OpenNefia.Core.GameObjects.EntityUid self) -> int
static OpenNefia.Core.GameObjects.EntityUid.operator !=(OpenNefia.Core.GameObjects.EntityUid a, OpenNefia.Core.GameObjects.EntityUid b) -> bool
static OpenNefia.Core.GameObjects.EntityUid.operator ==(OpenNefia.Core.GameObjects.EntityUid a, OpenNefia.Core.GameObjects.EntityUid b) -> bool
static OpenNefia.Core.GameObjects.EntityUid.Parse(System.ReadOnlySpan<char> uid) -> OpenNefia.Core.GameObjects.EntityUid
static OpenNefia.Core.GameObjects.EntityUid.TryParse(System.ReadOnlySpan<char> uid, out OpenNefia.Core.GameObjects.EntityUid entityUid) -> bool
static OpenNefia.Core.GameObjects.MapInitExt.RunMapInit(OpenNefia.Core.GameObjects.EntityUid entity) -> void
static OpenNefia.Core.GameObjects.SlotId.explicit operator int(OpenNefia.Core.GameObjects.SlotId self) -> int
static OpenNefia.Core.GameObjects.SlotId.operator !=(OpenNefia.Core.GameObjects.SlotId a, OpenNefia.Core.GameObjects.SlotId b) -> bool
static OpenNefia.Core.GameObjects.SlotId.operator ==(OpenNefia.Core.GameObjects.SlotId a, OpenNefia.Core.GameObjects.SlotId b) -> bool
static OpenNefia.Core.GameObjects.SpatialComponentExt.GetScreenPos(this OpenNefia.Core.GameObjects.SpatialComponent! spatial) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Graphics.FullscreenMode.implicit operator OpenNefia.Core.Graphics.FullscreenMode(OpenNefia.Core.Maths.Vector2i vector) -> OpenNefia.Core.Graphics.FullscreenMode
static OpenNefia.Core.Graphics.FullscreenMode.implicit operator OpenNefia.Core.Maths.Vector2i(OpenNefia.Core.Graphics.FullscreenMode mode) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder.Create() -> OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder!
static OpenNefia.Core.Input.Binding.CommandBinds.Builder.get -> OpenNefia.Core.Input.Binding.CommandBinds.BindingsBuilder!
static OpenNefia.Core.Input.Binding.CommandBinds.Unregister<TOwner>() -> void
static OpenNefia.Core.Input.Binding.CommandBinds.Unregister<TOwner>(OpenNefia.Core.Input.Binding.ICommandBindRegistry! bindRegistry) -> void
static OpenNefia.Core.Input.Binding.InputCmdHandler.FromDelegate(OpenNefia.Core.Input.Binding.StateInputCmdDelegate? enabled = null, OpenNefia.Core.Input.Binding.StateInputCmdDelegate? disabled = null) -> OpenNefia.Core.Input.Binding.InputCmdHandler!
static OpenNefia.Core.Input.BoundKeyFunction.implicit operator OpenNefia.Core.Input.BoundKeyFunction(string! name) -> OpenNefia.Core.Input.BoundKeyFunction
static OpenNefia.Core.Input.BoundKeyFunction.operator !=(OpenNefia.Core.Input.BoundKeyFunction a, OpenNefia.Core.Input.BoundKeyFunction b) -> bool
static OpenNefia.Core.Input.BoundKeyFunction.operator ==(OpenNefia.Core.Input.BoundKeyFunction a, OpenNefia.Core.Input.BoundKeyFunction b) -> bool
static OpenNefia.Core.Input.BoundKeyFunctionExt.TryToDirection(this OpenNefia.Core.Input.BoundKeyFunction func, out OpenNefia.Core.Maths.Direction dir) -> bool
static OpenNefia.Core.Input.Gamepad.GamepadAxisToKey(OpenNefia.Core.Input.Gamepad.Axis axis, float value) -> OpenNefia.Core.Input.Keyboard.Key
static OpenNefia.Core.Input.Gamepad.GamepadButtonToKey(OpenNefia.Core.Input.Gamepad.Button button) -> OpenNefia.Core.Input.Keyboard.Key
static OpenNefia.Core.Input.Keyboard.IsMouseKey(this OpenNefia.Core.Input.Keyboard.Key key) -> bool
static OpenNefia.Core.Input.KeyFunctionId.explicit operator int(OpenNefia.Core.Input.KeyFunctionId funcId) -> int
static OpenNefia.Core.Input.KeyFunctionId.operator !=(OpenNefia.Core.Input.KeyFunctionId left, OpenNefia.Core.Input.KeyFunctionId right) -> bool
static OpenNefia.Core.Input.KeyFunctionId.operator ==(OpenNefia.Core.Input.KeyFunctionId left, OpenNefia.Core.Input.KeyFunctionId right) -> bool
static OpenNefia.Core.Input.Mouse.MouseButtonToKey(OpenNefia.Core.Input.Mouse.Button button) -> OpenNefia.Core.Input.Keyboard.Key
static OpenNefia.Core.IoC.DynamicTypeFactoryExt.CreateInstance<T>(this OpenNefia.Core.IoC.IDynamicTypeFactory! dynamicTypeFactory, System.Type! type) -> T
static OpenNefia.Core.IoC.DynamicTypeFactoryExt.CreateInstance<T>(this OpenNefia.Core.IoC.IDynamicTypeFactory! dynamicTypeFactory, System.Type! type, object![]! args) -> T
static OpenNefia.Core.IoC.IoCManager.BuildGraph() -> void
static OpenNefia.Core.IoC.IoCManager.Clear() -> void
static OpenNefia.Core.IoC.IoCManager.InitThread() -> void
static OpenNefia.Core.IoC.IoCManager.InitThread(OpenNefia.Core.IoC.IDependencyCollection! collection, bool replaceExisting = false) -> void
static OpenNefia.Core.IoC.IoCManager.InjectDependencies<T>(T obj) -> T
static OpenNefia.Core.IoC.IoCManager.Instance.get -> OpenNefia.Core.IoC.IDependencyCollection?
static OpenNefia.Core.IoC.IoCManager.Register<T>(bool overwrite = false) -> void
static OpenNefia.Core.IoC.IoCManager.Register<TInterface, TImplementation>(bool overwrite = false) -> void
static OpenNefia.Core.IoC.IoCManager.Register<TInterface, TImplementation>(OpenNefia.Core.IoC.DependencyFactoryDelegate<TImplementation!>! factory, bool overwrite = false) -> void
static OpenNefia.Core.IoC.IoCManager.RegisterInstance<TInterface>(object! implementation, bool overwrite = false, bool deferInject = false) -> void
static OpenNefia.Core.IoC.IoCManager.Resolve<T>() -> T
static OpenNefia.Core.IoC.IoCManager.Resolve<T>(ref T? instance) -> void
static OpenNefia.Core.IoC.IoCManager.ResolveType(System.Type! type) -> object!
static OpenNefia.Core.Locale.Loc.Capitalize(string! text) -> string!
static OpenNefia.Core.Locale.Loc.GetLocalizationData(string! prototypeId) -> OpenNefia.Core.Locale.EntityLocData!
static OpenNefia.Core.Locale.Loc.GetPrototypeString<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> protoId, OpenNefia.Core.LocaleKey keySuffix, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
static OpenNefia.Core.Locale.Loc.GetPrototypeString<T>(T! proto, OpenNefia.Core.LocaleKey keySuffix, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
static OpenNefia.Core.Locale.Loc.GetPrototypeStringRaw(System.Type! prototypeType, string! prototypeID, OpenNefia.Core.LocaleKey keySuffix, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
static OpenNefia.Core.Locale.Loc.GetString(OpenNefia.Core.LocaleKey key, params OpenNefia.Core.Locale.LocaleArg[]! args) -> string!
static OpenNefia.Core.Locale.Loc.HasString(OpenNefia.Core.LocaleKey key) -> bool
static OpenNefia.Core.Locale.Loc.IsFullwidth() -> bool
static OpenNefia.Core.Locale.Loc.Language.get -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!>
static OpenNefia.Core.Locale.Loc.MakeScope() -> OpenNefia.Core.Locale.LocaleScope!
static OpenNefia.Core.Locale.Loc.MakeScope(OpenNefia.Core.LocaleKey keyPrefix) -> OpenNefia.Core.Locale.LocaleScope!
static OpenNefia.Core.Locale.Loc.Space() -> string!
static OpenNefia.Core.Locale.Loc.TryGetPrototypeString<T>(OpenNefia.Core.Prototypes.PrototypeId<T!> protoId, OpenNefia.Core.LocaleKey key, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
static OpenNefia.Core.Locale.Loc.TryGetPrototypeString<T>(T! proto, OpenNefia.Core.LocaleKey keySuffix, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
static OpenNefia.Core.Locale.Loc.TryGetPrototypeStringRaw(System.Type! prototypeType, string! prototypeID, OpenNefia.Core.LocaleKey keySuffix, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
static OpenNefia.Core.Locale.Loc.TryGetString(OpenNefia.Core.LocaleKey key, out string? str, params OpenNefia.Core.Locale.LocaleArg[]! args) -> bool
static OpenNefia.Core.Locale.LocaleArg.implicit operator OpenNefia.Core.Locale.LocaleArg((string!, object?) tuple) -> OpenNefia.Core.Locale.LocaleArg
static OpenNefia.Core.Locale.LocaleHelpers.GetBaseLocaleKey(this System.Type! type) -> OpenNefia.Core.LocaleKey
static OpenNefia.Core.Locale.LocaleHelpers.GetLocalizableFields(this System.Type! type) -> System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo!>!
static OpenNefia.Core.Locale.LuaHelpers.GetStringOrEmpty(this NLua.LuaTable! table, string! key) -> string!
static OpenNefia.Core.Locale.LuaHelpers.GetStringOrNull(this NLua.LuaTable! table, string! key) -> string?
static OpenNefia.Core.Locale.LuaHelpers.TryGetString(this NLua.LuaTable! table, string! key, out string? str) -> bool
static OpenNefia.Core.Locale.LuaHelpers.TryGetTable(this NLua.LuaTable! table, string! key, out NLua.LuaTable? resultTable) -> bool
static OpenNefia.Core.Locale.LuaHelpers.TryGetValue(this NLua.LuaTable! table, int key, out object? obj) -> bool
static OpenNefia.Core.Locale.LuaHelpers.TryGetValue(this NLua.LuaTable! table, string! key, out object? obj) -> bool
static OpenNefia.Core.LocaleKey.implicit operator OpenNefia.Core.LocaleKey(string! key) -> OpenNefia.Core.LocaleKey
static OpenNefia.Core.LocaleKey.implicit operator string!(OpenNefia.Core.LocaleKey key) -> string!
static OpenNefia.Core.Log.ConsoleLogHandler.TryDetachFromConsoleWindow() -> void
static OpenNefia.Core.Log.LogExt.ToRobust(this Serilog.Events.LogEventLevel level) -> OpenNefia.Core.Log.LogLevel
static OpenNefia.Core.Log.LogExt.ToSerilog(this OpenNefia.Core.Log.LogLevel level) -> Serilog.Events.LogEventLevel
static OpenNefia.Core.Log.Logger.Debug(string! message) -> void
static OpenNefia.Core.Log.Logger.Debug(string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.DebugS(string! sawmill, string! message) -> void
static OpenNefia.Core.Log.Logger.DebugS(string! sawmill, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.Error(string! message) -> void
static OpenNefia.Core.Log.Logger.Error(string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.ErrorS(string! sawmill, string! message) -> void
static OpenNefia.Core.Log.Logger.ErrorS(string! sawmill, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.ErrorS(string! sawmill, System.Exception! exception, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.Fatal(string! message) -> void
static OpenNefia.Core.Log.Logger.Fatal(string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.FatalS(string! sawmill, string! message) -> void
static OpenNefia.Core.Log.Logger.FatalS(string! sawmill, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.GetSawmill(string! name) -> OpenNefia.Core.Log.ISawmill!
static OpenNefia.Core.Log.Logger.Info(string! message) -> void
static OpenNefia.Core.Log.Logger.Info(string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.InfoS(string! sawmill, string! message) -> void
static OpenNefia.Core.Log.Logger.InfoS(string! sawmill, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.Log(OpenNefia.Core.Log.LogLevel logLevel, string! message) -> void
static OpenNefia.Core.Log.Logger.Log(OpenNefia.Core.Log.LogLevel logLevel, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.Log(OpenNefia.Core.Log.LogLevel logLevel, System.Exception! exception, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.LogS(OpenNefia.Core.Log.LogLevel logLevel, string! sawmillname, string! message) -> void
static OpenNefia.Core.Log.Logger.LogS(OpenNefia.Core.Log.LogLevel logLevel, string! sawmillname, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.LogS(OpenNefia.Core.Log.LogLevel logLevel, string! sawmillname, System.Exception? exception, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.Warning(string! message) -> void
static OpenNefia.Core.Log.Logger.Warning(string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.Logger.WarningS(string! sawmill, string! message) -> void
static OpenNefia.Core.Log.Logger.WarningS(string! sawmill, string! message, params object?[]! args) -> void
static OpenNefia.Core.Log.LogMessage.LogLevelToName(OpenNefia.Core.Log.LogLevel level) -> string!
static OpenNefia.Core.Maps.EntityCoordinates.FromMap(OpenNefia.Core.GameObjects.IEntityManager! entityManager, OpenNefia.Core.GameObjects.EntityUid entityUid, OpenNefia.Core.Maps.MapCoordinates coordinates) -> OpenNefia.Core.Maps.EntityCoordinates
static OpenNefia.Core.Maps.EntityCoordinates.FromMap(OpenNefia.Core.Maps.IMapManager! mapManager, OpenNefia.Core.Maps.MapCoordinates coordinates) -> OpenNefia.Core.Maps.EntityCoordinates
static OpenNefia.Core.Maps.EntityCoordinates.operator !=(OpenNefia.Core.Maps.EntityCoordinates left, OpenNefia.Core.Maps.EntityCoordinates right) -> bool
static OpenNefia.Core.Maps.EntityCoordinates.operator *(OpenNefia.Core.Maps.EntityCoordinates left, int right) -> OpenNefia.Core.Maps.EntityCoordinates
static OpenNefia.Core.Maps.EntityCoordinates.operator *(OpenNefia.Core.Maps.EntityCoordinates left, OpenNefia.Core.Maps.EntityCoordinates right) -> OpenNefia.Core.Maps.EntityCoordinates
static OpenNefia.Core.Maps.EntityCoordinates.operator +(OpenNefia.Core.Maps.EntityCoordinates left, OpenNefia.Core.Maps.EntityCoordinates right) -> OpenNefia.Core.Maps.EntityCoordinates
static OpenNefia.Core.Maps.EntityCoordinates.operator -(OpenNefia.Core.Maps.EntityCoordinates left, OpenNefia.Core.Maps.EntityCoordinates right) -> OpenNefia.Core.Maps.EntityCoordinates
static OpenNefia.Core.Maps.EntityCoordinates.operator ==(OpenNefia.Core.Maps.EntityCoordinates left, OpenNefia.Core.Maps.EntityCoordinates right) -> bool
static OpenNefia.Core.Maps.ITileDefinitionManagerExt.GetPrototype(this OpenNefia.Core.Maps.ITileDefinitionManager! tileDefs, OpenNefia.Core.Maps.Tile tile) -> OpenNefia.Core.Maps.TilePrototype!
static OpenNefia.Core.Maps.ITileDefinitionManagerExt.GetPrototype(this OpenNefia.Core.Maps.ITileDefinitionManager! tileDefs, OpenNefia.Core.Maps.TileRef tileRef) -> OpenNefia.Core.Maps.TilePrototype!
static OpenNefia.Core.Maps.ITileDefinitionManagerExt.GetPrototypeID(this OpenNefia.Core.Maps.ITileDefinitionManager! tileDefs, OpenNefia.Core.Maps.Tile tile) -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>
static OpenNefia.Core.Maps.ITileDefinitionManagerExt.GetPrototypeID(this OpenNefia.Core.Maps.ITileDefinitionManager! tileDefs, OpenNefia.Core.Maps.TileRef tileRef) -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>
static OpenNefia.Core.Maps.MapCoordinates.operator !=(OpenNefia.Core.Maps.MapCoordinates a, OpenNefia.Core.Maps.MapCoordinates b) -> bool
static OpenNefia.Core.Maps.MapCoordinates.operator ==(OpenNefia.Core.Maps.MapCoordinates a, OpenNefia.Core.Maps.MapCoordinates b) -> bool
static OpenNefia.Core.Maps.MapExtensions.GetTileID(this OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maths.Vector2i pos) -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>?
static OpenNefia.Core.Maps.MapExtensions.GetTilePrototype(this OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maths.Vector2i pos) -> OpenNefia.Core.Maps.TilePrototype?
static OpenNefia.Core.Maps.MapExtensions.IsFloor(this OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maps.MapCoordinates coords) -> bool
static OpenNefia.Core.Maps.MapExtensions.IsFloor(this OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maths.Vector2i pos) -> bool
static OpenNefia.Core.Maps.MapExtensions.TryGetTileID(this OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maths.Vector2i pos, out OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>? id) -> bool
static OpenNefia.Core.Maps.MapExtensions.TryGetTilePrototype(this OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maths.Vector2i pos, out OpenNefia.Core.Maps.TilePrototype? proto) -> bool
static OpenNefia.Core.Maps.MapId.explicit operator int(OpenNefia.Core.Maps.MapId self) -> int
static OpenNefia.Core.Maps.MapId.operator !=(OpenNefia.Core.Maps.MapId a, OpenNefia.Core.Maps.MapId b) -> bool
static OpenNefia.Core.Maps.MapId.operator ==(OpenNefia.Core.Maps.MapId a, OpenNefia.Core.Maps.MapId b) -> bool
static OpenNefia.Core.Maps.MapLoader.GetMapFilePath(OpenNefia.Core.Maps.MapId mapId) -> OpenNefia.Core.Utility.ResourcePath!
static OpenNefia.Core.Maps.ScreenCoordinates.operator !=(OpenNefia.Core.Maps.ScreenCoordinates a, OpenNefia.Core.Maps.ScreenCoordinates b) -> bool
static OpenNefia.Core.Maps.ScreenCoordinates.operator ==(OpenNefia.Core.Maps.ScreenCoordinates a, OpenNefia.Core.Maps.ScreenCoordinates b) -> bool
static OpenNefia.Core.Maps.Tile.EmptyID -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>
static OpenNefia.Core.Maps.Tile.operator !=(OpenNefia.Core.Maps.Tile a, OpenNefia.Core.Maps.Tile b) -> bool
static OpenNefia.Core.Maps.Tile.operator ==(OpenNefia.Core.Maps.Tile a, OpenNefia.Core.Maps.Tile b) -> bool
static OpenNefia.Core.Maps.TileRef.Empty.get -> OpenNefia.Core.Maps.TileRef
static OpenNefia.Core.Maps.TileRef.operator !=(OpenNefia.Core.Maps.TileRef a, OpenNefia.Core.Maps.TileRef b) -> bool
static OpenNefia.Core.Maps.TileRef.operator ==(OpenNefia.Core.Maps.TileRef a, OpenNefia.Core.Maps.TileRef b) -> bool
static OpenNefia.Core.Maps.YamlGridSerializer.BuildProtoToRuneTileMap(OpenNefia.Core.Maps.IMap! map, OpenNefia.Core.Maps.ITileDefinitionManager! tileDefs) -> System.Collections.Generic.Dictionary<OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>, string!>!
static OpenNefia.Core.Maps.YamlGridSerializer.DeserializeGrid(string! gridString, System.Collections.Generic.Dictionary<string!, OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>>! tileMap, OpenNefia.Core.Maps.ITileDefinitionManager! tileDefs, out OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Maps.Tile[,]!
static OpenNefia.Core.Maps.YamlGridSerializer.DeserializeInSight(string! base64, OpenNefia.Core.Maths.Vector2i size) -> uint[,]!
static OpenNefia.Core.Maps.YamlGridSerializer.SerializeGrid(OpenNefia.Core.Maps.Tile[,]! tiles, OpenNefia.Core.Maths.Vector2i size, System.Collections.Generic.Dictionary<OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Maps.TilePrototype!>, string!>! protoToRune, OpenNefia.Core.Maps.ITileDefinitionManager! tileDefinitionManager) -> string!
static OpenNefia.Core.Maps.YamlGridSerializer.SerializeInSight(uint[,]! inSight, OpenNefia.Core.Maths.Vector2i size) -> string!
static OpenNefia.Core.Maths.Angle.BetweenPoints(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.FromDegrees(double degrees) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.FromWorldVec(OpenNefia.Core.Maths.Vector2 dir) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.implicit operator double(OpenNefia.Core.Maths.Angle angle) -> double
static OpenNefia.Core.Maths.Angle.implicit operator float(OpenNefia.Core.Maths.Angle angle) -> float
static OpenNefia.Core.Maths.Angle.implicit operator OpenNefia.Core.Maths.Angle(double theta) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.implicit operator OpenNefia.Core.Maths.Angle(float theta) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.Lerp(in OpenNefia.Core.Maths.Angle a, in OpenNefia.Core.Maths.Angle b, float factor) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.operator !=(OpenNefia.Core.Maths.Angle a, OpenNefia.Core.Maths.Angle b) -> bool
static OpenNefia.Core.Maths.Angle.operator +(OpenNefia.Core.Maths.Angle a, OpenNefia.Core.Maths.Angle b) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.operator -(OpenNefia.Core.Maths.Angle a, OpenNefia.Core.Maths.Angle b) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.operator -(OpenNefia.Core.Maths.Angle orig) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Angle.operator ==(OpenNefia.Core.Maths.Angle a, OpenNefia.Core.Maths.Angle b) -> bool
static OpenNefia.Core.Maths.Angle.Zero.get -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.Box2.Area(in OpenNefia.Core.Maths.Box2 box) -> float
static OpenNefia.Core.Maths.Box2.CenteredAround(OpenNefia.Core.Maths.Vector2 center, OpenNefia.Core.Maths.Vector2 size) -> OpenNefia.Core.Maths.Box2
static OpenNefia.Core.Maths.Box2.CentredAroundZero(OpenNefia.Core.Maths.Vector2 size) -> OpenNefia.Core.Maths.Box2
static OpenNefia.Core.Maths.Box2.FromDimensions(float left, float bottom, float width, float height) -> OpenNefia.Core.Maths.Box2
static OpenNefia.Core.Maths.Box2.FromDimensions(OpenNefia.Core.Maths.Vector2 bottomLeft, OpenNefia.Core.Maths.Vector2 size) -> OpenNefia.Core.Maths.Box2
static OpenNefia.Core.Maths.Box2.operator !=(OpenNefia.Core.Maths.Box2 a, OpenNefia.Core.Maths.Box2 b) -> bool
static OpenNefia.Core.Maths.Box2.operator ==(OpenNefia.Core.Maths.Box2 a, OpenNefia.Core.Maths.Box2 b) -> bool
static OpenNefia.Core.Maths.Box2.Perimeter(in OpenNefia.Core.Maths.Box2 box) -> float
static OpenNefia.Core.Maths.Box2.Union(in OpenNefia.Core.Maths.Vector2 a, in OpenNefia.Core.Maths.Vector2 b) -> OpenNefia.Core.Maths.Box2
static OpenNefia.Core.Maths.Box2i.explicit operator OpenNefia.Core.Maths.Box2i(OpenNefia.Core.Maths.Box2 box) -> OpenNefia.Core.Maths.Box2i
static OpenNefia.Core.Maths.Box2i.FromDimensions(int left, int bottom, int width, int height) -> OpenNefia.Core.Maths.Box2i
static OpenNefia.Core.Maths.Box2i.FromDimensions(OpenNefia.Core.Maths.Vector2i position, OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Maths.Box2i
static OpenNefia.Core.Maths.Box2i.implicit operator OpenNefia.Core.Maths.Box2(OpenNefia.Core.Maths.Box2i box) -> OpenNefia.Core.Maths.Box2
static OpenNefia.Core.Maths.Color.AliceBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.AntiqueWhite.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Aqua.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Aquamarine.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Azure.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Beige.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Bisque.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Black.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.BlanchedAlmond.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Blend(OpenNefia.Core.Maths.Color dstColor, OpenNefia.Core.Maths.Color srcColor, OpenNefia.Core.Maths.Color.BlendFactor dstFactor, OpenNefia.Core.Maths.Color.BlendFactor srcFactor) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Blue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.BlueViolet.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Brown.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.BurlyWood.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.CadetBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Chartreuse.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Chocolate.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Coral.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.CornflowerBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Cornsilk.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Crimson.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Cyan.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkCyan.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkGoldenrod.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkGray.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkKhaki.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkMagenta.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkOliveGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkOrange.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkOrchid.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkRed.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkSalmon.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkSeaGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkSlateBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkSlateGray.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkTurquoise.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DarkViolet.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DeepPink.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DeepSkyBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DimGray.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.DodgerBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.explicit operator System.Drawing.Color(OpenNefia.Core.Maths.Color color) -> System.Drawing.Color
static OpenNefia.Core.Maths.Color.Firebrick.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FloralWhite.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.ForestGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromCmyk(OpenNefia.Core.Maths.Vector4 cmyk) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromHcy(OpenNefia.Core.Maths.Vector4 hcy) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromHex(System.ReadOnlySpan<char> hexColor, OpenNefia.Core.Maths.Color? fallback = null) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromHsl(OpenNefia.Core.Maths.Vector4 hsl) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromHsv(OpenNefia.Core.Maths.Vector4 hsv) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromName(string! colorname) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromSrgb(OpenNefia.Core.Maths.Color srgb) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromXaml(string! name) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromXyz(OpenNefia.Core.Maths.Vector4 xyz) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.FromYcbcr(OpenNefia.Core.Maths.Vector4 ycbcr) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Fuchsia.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Gainsboro.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.GetAllDefaultColors() -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, OpenNefia.Core.Maths.Color>>!
static OpenNefia.Core.Maths.Color.GhostWhite.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Gold.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Goldenrod.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Gray.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Green.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.GreenYellow.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Honeydew.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.HotPink.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.implicit operator Love.Color(OpenNefia.Core.Maths.Color color) -> Love.Color
static OpenNefia.Core.Maths.Color.implicit operator OpenNefia.Core.Maths.Color((float r, float g, float b) tuple) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.implicit operator OpenNefia.Core.Maths.Color((float r, float g, float b, float a) tuple) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.implicit operator OpenNefia.Core.Maths.Color(Love.Color color) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.implicit operator OpenNefia.Core.Maths.Color(System.Drawing.Color color) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.IndianRed.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Indigo.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.InterpolateBetween(OpenNefia.Core.Maths.Color α, OpenNefia.Core.Maths.Color β, float λ) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Ivory.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Khaki.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Lavender.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LavenderBlush.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LawnGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LemonChiffon.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightCoral.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightCyan.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightGoldenrodYellow.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightGray.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightPink.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightSalmon.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightSeaGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightSkyBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightSlateGray.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightSteelBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LightYellow.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Lime.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.LimeGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Linen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Magenta.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Maroon.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumAquamarine.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumOrchid.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumPurple.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumSeaGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumSlateBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumSpringGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumTurquoise.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MediumVioletRed.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MidnightBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MintCream.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.MistyRose.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Moccasin.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.NavajoWhite.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Navy.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.OldLace.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Olive.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.OliveDrab.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.operator !=(OpenNefia.Core.Maths.Color left, OpenNefia.Core.Maths.Color right) -> bool
static OpenNefia.Core.Maths.Color.operator *(OpenNefia.Core.Maths.Color a, OpenNefia.Core.Maths.Color b) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.operator ==(OpenNefia.Core.Maths.Color left, OpenNefia.Core.Maths.Color right) -> bool
static OpenNefia.Core.Maths.Color.Orange.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.OrangeRed.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Orchid.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.PaleGoldenrod.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.PaleGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.PaleTurquoise.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.PaleVioletRed.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.PapayaWhip.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.PeachPuff.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Peru.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Pink.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Plum.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.PowderBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Purple.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.RebeccaPurple.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Red.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.RosyBrown.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.RoyalBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SaddleBrown.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Salmon.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SandyBrown.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SeaGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SeaShell.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Sienna.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Silver.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SkyBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SlateBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SlateGray.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Snow.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SpringGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.SteelBlue.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Tan.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Teal.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Thistle.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.ToCmyk(OpenNefia.Core.Maths.Color rgb) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Color.ToHcy(OpenNefia.Core.Maths.Color rgb) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Color.ToHsl(OpenNefia.Core.Maths.Color rgb) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Color.ToHsv(OpenNefia.Core.Maths.Color rgb) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Color.Tomato.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.ToSrgb(OpenNefia.Core.Maths.Color rgb) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.ToXyz(OpenNefia.Core.Maths.Color rgb) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Color.ToYcbcr(OpenNefia.Core.Maths.Color rgb) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Color.Transparent.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.TryFromHex(System.ReadOnlySpan<char> hexColor) -> OpenNefia.Core.Maths.Color?
static OpenNefia.Core.Maths.Color.TryFromName(string! colorName, out OpenNefia.Core.Maths.Color color) -> bool
static OpenNefia.Core.Maths.Color.Turquoise.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Violet.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Wheat.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.White.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.WhiteSmoke.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.Yellow.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.Color.YellowGreen.get -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Maths.DirectionExtensions.AsDir(this OpenNefia.Core.Maths.DirectionFlag directionFlag) -> OpenNefia.Core.Maths.Direction
static OpenNefia.Core.Maths.DirectionExtensions.AsFlag(this OpenNefia.Core.Maths.Direction direction) -> OpenNefia.Core.Maths.DirectionFlag
static OpenNefia.Core.Maths.DirectionExtensions.GetCardinalDir(this OpenNefia.Core.Maths.Vector2i vec) -> OpenNefia.Core.Maths.Direction
static OpenNefia.Core.Maths.DirectionExtensions.GetClockwise90Degrees(this OpenNefia.Core.Maths.Direction direction) -> OpenNefia.Core.Maths.Direction
static OpenNefia.Core.Maths.DirectionExtensions.GetDir(this OpenNefia.Core.Maths.Vector2 vec) -> OpenNefia.Core.Maths.Direction
static OpenNefia.Core.Maths.DirectionExtensions.GetDir(this OpenNefia.Core.Maths.Vector2i vec) -> OpenNefia.Core.Maths.Direction
static OpenNefia.Core.Maths.DirectionExtensions.GetOpposite(this OpenNefia.Core.Maths.Direction direction) -> OpenNefia.Core.Maths.Direction
static OpenNefia.Core.Maths.DirectionExtensions.IsCardinal(this OpenNefia.Core.Maths.Direction direction) -> bool
static OpenNefia.Core.Maths.DirectionExtensions.Offset(this OpenNefia.Core.Maths.Vector2i vec, OpenNefia.Core.Maths.Direction dir) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.DirectionExtensions.ToAngle(this OpenNefia.Core.Maths.Direction dir) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.DirectionExtensions.ToAngle(this OpenNefia.Core.Maths.Vector2 vec) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.DirectionExtensions.ToIntVec(this OpenNefia.Core.Maths.Direction dir) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.DirectionExtensions.ToVec(this OpenNefia.Core.Maths.Direction dir) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.DirectionExtensions.ToWorldAngle(this OpenNefia.Core.Maths.Vector2 vec) -> OpenNefia.Core.Maths.Angle
static OpenNefia.Core.Maths.IntRange.operator !=(OpenNefia.Core.Maths.IntRange lhs, OpenNefia.Core.Maths.IntRange rhs) -> bool
static OpenNefia.Core.Maths.IntRange.operator ==(OpenNefia.Core.Maths.IntRange lhs, OpenNefia.Core.Maths.IntRange rhs) -> bool
static OpenNefia.Core.Maths.MathHelper.BinomialCoefficient(int n, int k) -> long
static OpenNefia.Core.Maths.MathHelper.Clamp(byte val, byte min, byte max) -> byte
static OpenNefia.Core.Maths.MathHelper.Clamp(double val, double min, double max) -> double
static OpenNefia.Core.Maths.MathHelper.Clamp(float val, float min, float max) -> float
static OpenNefia.Core.Maths.MathHelper.Clamp(int val, int min, int max) -> int
static OpenNefia.Core.Maths.MathHelper.Clamp(long val, long min, long max) -> long
static OpenNefia.Core.Maths.MathHelper.Clamp(sbyte val, sbyte min, sbyte max) -> sbyte
static OpenNefia.Core.Maths.MathHelper.Clamp(short val, short min, short max) -> short
static OpenNefia.Core.Maths.MathHelper.Clamp(uint val, uint min, uint max) -> uint
static OpenNefia.Core.Maths.MathHelper.Clamp(ulong val, ulong min, ulong max) -> ulong
static OpenNefia.Core.Maths.MathHelper.Clamp(ushort val, ushort min, ushort max) -> ushort
static OpenNefia.Core.Maths.MathHelper.Clamp01(float val) -> float
static OpenNefia.Core.Maths.MathHelper.Clamp<T>(T val, T min, T max) -> T
static OpenNefia.Core.Maths.MathHelper.CloseTo(double a, double b, double tolerance = 1E-07) -> bool
static OpenNefia.Core.Maths.MathHelper.CloseTo(float a, float b, float tolerance = 1E-07) -> bool
static OpenNefia.Core.Maths.MathHelper.CloseToPercent(double a, double b, double percentage = 1E-05) -> bool
static OpenNefia.Core.Maths.MathHelper.CloseToPercent(double a, float b, double percentage = 1E-05) -> bool
static OpenNefia.Core.Maths.MathHelper.CloseToPercent(float a, double b, double percentage = 1E-05) -> bool
static OpenNefia.Core.Maths.MathHelper.CloseToPercent(float a, float b, double percentage = 1E-05) -> bool
static OpenNefia.Core.Maths.MathHelper.DegreesToRadians(double degrees) -> double
static OpenNefia.Core.Maths.MathHelper.DegreesToRadians(float degrees) -> float
static OpenNefia.Core.Maths.MathHelper.Factorial(int n) -> long
static OpenNefia.Core.Maths.MathHelper.InterpolateCubic(double preA, double a, double b, double postB, double t) -> double
static OpenNefia.Core.Maths.MathHelper.InterpolateCubic(float preA, float a, float b, float postB, float t) -> float
static OpenNefia.Core.Maths.MathHelper.Lerp(double a, double b, double blend) -> double
static OpenNefia.Core.Maths.MathHelper.Lerp(float a, float b, float blend) -> float
static OpenNefia.Core.Maths.MathHelper.Max(float a, float b, float c, float d) -> float
static OpenNefia.Core.Maths.MathHelper.Median(float a, float b, float c) -> float
static OpenNefia.Core.Maths.MathHelper.Min(float a, float b, float c, float d) -> float
static OpenNefia.Core.Maths.MathHelper.Mod(double n, double d) -> double
static OpenNefia.Core.Maths.MathHelper.Mod(float n, float d) -> float
static OpenNefia.Core.Maths.MathHelper.Mod(int n, int d) -> int
static OpenNefia.Core.Maths.MathHelper.NextMultipleOf(double value, double of) -> double
static OpenNefia.Core.Maths.MathHelper.NextMultipleOf(float value, float of) -> float
static OpenNefia.Core.Maths.MathHelper.NextMultipleOf(int value, int of) -> int
static OpenNefia.Core.Maths.MathHelper.NextMultipleOf(long value, long of) -> long
static OpenNefia.Core.Maths.MathHelper.NextPowerOfTwo(double n) -> double
static OpenNefia.Core.Maths.MathHelper.NextPowerOfTwo(float n) -> float
static OpenNefia.Core.Maths.MathHelper.NextPowerOfTwo(int n) -> int
static OpenNefia.Core.Maths.MathHelper.NextPowerOfTwo(long n) -> long
static OpenNefia.Core.Maths.MathHelper.RadiansToDegrees(double radians) -> double
static OpenNefia.Core.Maths.MathHelper.RadiansToDegrees(float radians) -> float
static OpenNefia.Core.Maths.MathHelper.Swap(ref double a, ref double b) -> void
static OpenNefia.Core.Maths.MathHelper.Swap(ref float a, ref float b) -> void
static OpenNefia.Core.Maths.MathHelper.Wrap(int n, int lowerBound, int upperBound) -> int
static OpenNefia.Core.Maths.Matrix3.Add(ref OpenNefia.Core.Maths.Matrix3 left, ref OpenNefia.Core.Maths.Matrix3 right, out OpenNefia.Core.Maths.Matrix3 result) -> void
static OpenNefia.Core.Maths.Matrix3.CreateRotation(float angle) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.CreateRotation(OpenNefia.Core.Maths.Angle angle) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.CreateScale(float x, float y) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.CreateScale(in OpenNefia.Core.Maths.Vector2 scale) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.CreateTransform(in OpenNefia.Core.Maths.Vector2 position, in OpenNefia.Core.Maths.Angle rotation) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.CreateTransform(in OpenNefia.Core.Maths.Vector2 position, in OpenNefia.Core.Maths.Angle rotation, in OpenNefia.Core.Maths.Vector2 scale) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.CreateTranslation(float x, float y) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.CreateTranslation(OpenNefia.Core.Maths.Vector2 vector) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.Equals(ref OpenNefia.Core.Maths.Matrix3 left, ref OpenNefia.Core.Maths.Matrix3 right) -> bool
static OpenNefia.Core.Maths.Matrix3.EqualsApprox(ref OpenNefia.Core.Maths.Matrix3 left, ref OpenNefia.Core.Maths.Matrix3 right, float tolerance) -> bool
static OpenNefia.Core.Maths.Matrix3.explicit operator float[]!(OpenNefia.Core.Maths.Matrix3 matrix) -> float[]!
static OpenNefia.Core.Maths.Matrix3.Invert(OpenNefia.Core.Maths.Matrix3 mat) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.Multiply(ref OpenNefia.Core.Maths.Matrix3 left, ref OpenNefia.Core.Maths.Matrix3 right, out OpenNefia.Core.Maths.Matrix3 result) -> void
static OpenNefia.Core.Maths.Matrix3.Multiply(ref OpenNefia.Core.Maths.Matrix3 matrix, float scalar, out OpenNefia.Core.Maths.Matrix3 result) -> void
static OpenNefia.Core.Maths.Matrix3.operator *(in OpenNefia.Core.Maths.Matrix3 matrix, in OpenNefia.Core.Maths.Vector2 vector) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Matrix3.operator *(in OpenNefia.Core.Maths.Matrix3 matrix, in OpenNefia.Core.Maths.Vector3 vector) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Matrix3.operator *(in OpenNefia.Core.Maths.Vector2 vector, in OpenNefia.Core.Maths.Matrix3 matrix) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Matrix3.operator *(in OpenNefia.Core.Maths.Vector3 vector, in OpenNefia.Core.Maths.Matrix3 matrix) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Matrix3.operator *(OpenNefia.Core.Maths.Matrix3 left, OpenNefia.Core.Maths.Matrix3 right) -> OpenNefia.Core.Maths.Matrix3
static OpenNefia.Core.Maths.Matrix3.Rotate(ref OpenNefia.Core.Maths.Matrix3 matrix, float angle, out OpenNefia.Core.Maths.Matrix3 result) -> void
static OpenNefia.Core.Maths.Matrix3.RotateMatrix(float angle, out OpenNefia.Core.Maths.Matrix3 result) -> void
static OpenNefia.Core.Maths.Matrix3.Subtract(ref OpenNefia.Core.Maths.Matrix3 left, ref OpenNefia.Core.Maths.Matrix3 right, out OpenNefia.Core.Maths.Matrix3 result) -> void
static OpenNefia.Core.Maths.Matrix3.Transform(in OpenNefia.Core.Maths.Matrix3 matrix, in OpenNefia.Core.Maths.Vector2 vector, out OpenNefia.Core.Maths.Vector2 result) -> void
static OpenNefia.Core.Maths.Matrix3.Transform(in OpenNefia.Core.Maths.Matrix3 matrix, in OpenNefia.Core.Maths.Vector3 vector, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Matrix3.Transform(in OpenNefia.Core.Maths.Matrix3 matrix, OpenNefia.Core.Maths.Vector2 vector) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Matrix3.Transform(in OpenNefia.Core.Maths.Matrix3 matrix, ref OpenNefia.Core.Maths.Vector2 vector) -> void
static OpenNefia.Core.Maths.Matrix3.Transform(in OpenNefia.Core.Maths.Matrix3 matrix, ref OpenNefia.Core.Maths.Vector3 vector) -> void
static OpenNefia.Core.Maths.Matrix3.Transform(in OpenNefia.Core.Maths.Vector2 vector, in OpenNefia.Core.Maths.Matrix3 matrix, out OpenNefia.Core.Maths.Vector2 result) -> void
static OpenNefia.Core.Maths.Matrix3.Transform(in OpenNefia.Core.Maths.Vector3 vector, in OpenNefia.Core.Maths.Matrix3 matrix, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Matrix3.Transpose(ref OpenNefia.Core.Maths.Matrix3 matrix, out OpenNefia.Core.Maths.Matrix3 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreateFromAxisAngle(OpenNefia.Core.Maths.Vector3 axis, float angle) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreateFromAxisAngle(OpenNefia.Core.Maths.Vector3 axis, float angle, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreateOrthographic(float width, float height, float zNear, float zFar) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreateOrthographic(float width, float height, float zNear, float zFar, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNear, float zFar) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreateOrthographicOffCenter(float left, float right, float bottom, float top, float zNear, float zFar, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreatePerspectiveFieldOfView(float fovy, float aspect, float zNear, float zFar) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreatePerspectiveFieldOfView(float fovy, float aspect, float zNear, float zFar, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float zNear, float zFar) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreatePerspectiveOffCenter(float left, float right, float bottom, float top, float zNear, float zFar, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreateRotationX(float angle) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreateRotationX(float angle, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreateRotationY(float angle) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreateRotationY(float angle, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreateRotationZ(float angle) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreateRotationZ(float angle, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreateTranslation(float x, float y, float z) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreateTranslation(float x, float y, float z, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.CreateTranslation(OpenNefia.Core.Maths.Vector3 vector) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.CreateTranslation(ref OpenNefia.Core.Maths.Vector3 vector, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.Invert(OpenNefia.Core.Maths.Matrix4 mat) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.LookAt(float eyeX, float eyeY, float eyeZ, float targetX, float targetY, float targetZ, float upX, float upY, float upZ) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.LookAt(OpenNefia.Core.Maths.Vector3 eye, OpenNefia.Core.Maths.Vector3 target, OpenNefia.Core.Maths.Vector3 up) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.Mult(OpenNefia.Core.Maths.Matrix4 left, OpenNefia.Core.Maths.Matrix4 right) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.Mult(ref OpenNefia.Core.Maths.Matrix4 left, ref OpenNefia.Core.Maths.Matrix4 right, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Matrix4.operator !=(OpenNefia.Core.Maths.Matrix4 left, OpenNefia.Core.Maths.Matrix4 right) -> bool
static OpenNefia.Core.Maths.Matrix4.operator *(OpenNefia.Core.Maths.Matrix4 left, OpenNefia.Core.Maths.Matrix4 right) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.operator ==(OpenNefia.Core.Maths.Matrix4 left, OpenNefia.Core.Maths.Matrix4 right) -> bool
static OpenNefia.Core.Maths.Matrix4.Rotate(OpenNefia.Core.Maths.Quaternion q) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.Scale(float scale) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.Scale(float x, float y, float z) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.Scale(OpenNefia.Core.Maths.Vector3 scale) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.Transpose(OpenNefia.Core.Maths.Matrix4 mat) -> OpenNefia.Core.Maths.Matrix4
static OpenNefia.Core.Maths.Matrix4.Transpose(ref OpenNefia.Core.Maths.Matrix4 mat, out OpenNefia.Core.Maths.Matrix4 result) -> void
static OpenNefia.Core.Maths.Quaternion.Add(OpenNefia.Core.Maths.Quaternion left, OpenNefia.Core.Maths.Quaternion right) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Add(ref OpenNefia.Core.Maths.Quaternion left, ref OpenNefia.Core.Maths.Quaternion right, out OpenNefia.Core.Maths.Quaternion result) -> void
static OpenNefia.Core.Maths.Quaternion.Angle(OpenNefia.Core.Maths.Quaternion a, OpenNefia.Core.Maths.Quaternion b) -> float
static OpenNefia.Core.Maths.Quaternion.Conjugate(OpenNefia.Core.Maths.Quaternion q) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Conjugate(ref OpenNefia.Core.Maths.Quaternion q, out OpenNefia.Core.Maths.Quaternion result) -> void
static OpenNefia.Core.Maths.Quaternion.Dot(OpenNefia.Core.Maths.Quaternion a, OpenNefia.Core.Maths.Quaternion b) -> float
static OpenNefia.Core.Maths.Quaternion.FromAxisAngle(OpenNefia.Core.Maths.Vector3 axis, float angle) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Invert(OpenNefia.Core.Maths.Quaternion q) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Invert(ref OpenNefia.Core.Maths.Quaternion q, out OpenNefia.Core.Maths.Quaternion result) -> void
static OpenNefia.Core.Maths.Quaternion.LookRotation(ref OpenNefia.Core.Maths.Vector3 forward, ref OpenNefia.Core.Maths.Vector3 up) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Multiply(OpenNefia.Core.Maths.Quaternion left, OpenNefia.Core.Maths.Quaternion right) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Multiply(OpenNefia.Core.Maths.Quaternion quaternion, float scale) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Multiply(ref OpenNefia.Core.Maths.Quaternion left, ref OpenNefia.Core.Maths.Quaternion right, out OpenNefia.Core.Maths.Quaternion result) -> void
static OpenNefia.Core.Maths.Quaternion.Multiply(ref OpenNefia.Core.Maths.Quaternion quaternion, float scale, out OpenNefia.Core.Maths.Quaternion result) -> void
static OpenNefia.Core.Maths.Quaternion.Normalize(OpenNefia.Core.Maths.Quaternion q) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Normalize(ref OpenNefia.Core.Maths.Quaternion q, out OpenNefia.Core.Maths.Quaternion result) -> void
static OpenNefia.Core.Maths.Quaternion.operator !=(OpenNefia.Core.Maths.Quaternion left, OpenNefia.Core.Maths.Quaternion right) -> bool
static OpenNefia.Core.Maths.Quaternion.operator *(float scale, OpenNefia.Core.Maths.Quaternion quaternion) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.operator *(OpenNefia.Core.Maths.Quaternion left, OpenNefia.Core.Maths.Quaternion right) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.operator *(OpenNefia.Core.Maths.Quaternion quaternion, float scale) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.operator +(OpenNefia.Core.Maths.Quaternion left, OpenNefia.Core.Maths.Quaternion right) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.operator -(OpenNefia.Core.Maths.Quaternion left, OpenNefia.Core.Maths.Quaternion right) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.operator ==(OpenNefia.Core.Maths.Quaternion left, OpenNefia.Core.Maths.Quaternion right) -> bool
static OpenNefia.Core.Maths.Quaternion.RotateTowards(OpenNefia.Core.Maths.Quaternion from, OpenNefia.Core.Maths.Quaternion to, float maxDegreesDelta) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Slerp(OpenNefia.Core.Maths.Quaternion q1, OpenNefia.Core.Maths.Quaternion q2, float blend) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Sub(OpenNefia.Core.Maths.Quaternion left, OpenNefia.Core.Maths.Quaternion right) -> OpenNefia.Core.Maths.Quaternion
static OpenNefia.Core.Maths.Quaternion.Sub(ref OpenNefia.Core.Maths.Quaternion left, ref OpenNefia.Core.Maths.Quaternion right, out OpenNefia.Core.Maths.Quaternion result) -> void
static OpenNefia.Core.Maths.Quaternion.ToEulerRad(OpenNefia.Core.Maths.Quaternion rotation) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Thickness.operator !=(in OpenNefia.Core.Maths.Thickness left, in OpenNefia.Core.Maths.Thickness right) -> bool
static OpenNefia.Core.Maths.Thickness.operator ==(in OpenNefia.Core.Maths.Thickness left, in OpenNefia.Core.Maths.Thickness right) -> bool
static OpenNefia.Core.Maths.UIBox2.explicit operator OpenNefia.Core.Maths.UIBox2i(OpenNefia.Core.Maths.UIBox2 box) -> OpenNefia.Core.Maths.UIBox2i
static OpenNefia.Core.Maths.UIBox2.FromDimensions(float left, float top, float width, float height) -> OpenNefia.Core.Maths.UIBox2
static OpenNefia.Core.Maths.UIBox2.FromDimensions(OpenNefia.Core.Maths.Vector2 leftTopPosition, OpenNefia.Core.Maths.Vector2 size) -> OpenNefia.Core.Maths.UIBox2
static OpenNefia.Core.Maths.UIBox2.implicit operator Love.RectangleF(OpenNefia.Core.Maths.UIBox2 box) -> Love.RectangleF
static OpenNefia.Core.Maths.UIBox2.operator !=(OpenNefia.Core.Maths.UIBox2 a, OpenNefia.Core.Maths.UIBox2 b) -> bool
static OpenNefia.Core.Maths.UIBox2.operator +(OpenNefia.Core.Maths.UIBox2 box, (float lo, float to, float ro, float bo) offsets) -> OpenNefia.Core.Maths.UIBox2
static OpenNefia.Core.Maths.UIBox2.operator ==(OpenNefia.Core.Maths.UIBox2 a, OpenNefia.Core.Maths.UIBox2 b) -> bool
static OpenNefia.Core.Maths.UIBox2i.FromDimensions(int left, int top, int width, int height) -> OpenNefia.Core.Maths.UIBox2i
static OpenNefia.Core.Maths.UIBox2i.FromDimensions(OpenNefia.Core.Maths.Vector2i position, OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Maths.UIBox2i
static OpenNefia.Core.Maths.UIBox2i.implicit operator Love.Rectangle(OpenNefia.Core.Maths.UIBox2i box) -> Love.Rectangle
static OpenNefia.Core.Maths.UIBox2i.implicit operator OpenNefia.Core.Maths.UIBox2(OpenNefia.Core.Maths.UIBox2i box) -> OpenNefia.Core.Maths.UIBox2
static OpenNefia.Core.Maths.UIBox2i.operator !=(OpenNefia.Core.Maths.UIBox2i left, OpenNefia.Core.Maths.UIBox2i right) -> bool
static OpenNefia.Core.Maths.UIBox2i.operator +(OpenNefia.Core.Maths.UIBox2i box, (int lo, int to, int ro, int bo) offsets) -> OpenNefia.Core.Maths.UIBox2i
static OpenNefia.Core.Maths.UIBox2i.operator ==(OpenNefia.Core.Maths.UIBox2i left, OpenNefia.Core.Maths.UIBox2i right) -> bool
static OpenNefia.Core.Maths.Vector2.Abs(in OpenNefia.Core.Maths.Vector2 a) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.Clamp(OpenNefia.Core.Maths.Vector2 vector, OpenNefia.Core.Maths.Vector2 min, OpenNefia.Core.Maths.Vector2 max) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.ComponentMax(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.ComponentMin(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.Cross(float s, in OpenNefia.Core.Maths.Vector2 a) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.Cross(in OpenNefia.Core.Maths.Vector2 a, float s) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.Cross(in OpenNefia.Core.Maths.Vector2 a, in OpenNefia.Core.Maths.Vector2 b) -> float
static OpenNefia.Core.Maths.Vector2.Dot(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> float
static OpenNefia.Core.Maths.Vector2.implicit operator Love.SizeF(OpenNefia.Core.Maths.Vector2 vector) -> Love.SizeF
static OpenNefia.Core.Maths.Vector2.implicit operator Love.Vector2(OpenNefia.Core.Maths.Vector2 vector) -> Love.Vector2
static OpenNefia.Core.Maths.Vector2.implicit operator OpenNefia.Core.Maths.Vector2((float x, float y) tuple) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.implicit operator OpenNefia.Core.Maths.Vector2(Love.SizeF loveVector) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.implicit operator OpenNefia.Core.Maths.Vector2(Love.Vector2 loveVector) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.InterpolateCubic(OpenNefia.Core.Maths.Vector2 preA, OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b, OpenNefia.Core.Maths.Vector2 postB, float t) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.Lerp(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b, float factor) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.LerpClamped(in OpenNefia.Core.Maths.Vector2 a, in OpenNefia.Core.Maths.Vector2 b, float factor) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.MagnitudeMax(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.MagnitudeMin(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator !=(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> bool
static OpenNefia.Core.Maths.Vector2.operator *(OpenNefia.Core.Maths.Vector2 vec, float scale) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator *(OpenNefia.Core.Maths.Vector2 vec, OpenNefia.Core.Maths.Vector2 scale) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator +(OpenNefia.Core.Maths.Vector2 a, float b) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator +(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator -(OpenNefia.Core.Maths.Vector2 a, float b) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator -(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator -(OpenNefia.Core.Maths.Vector2 vec) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator /(OpenNefia.Core.Maths.Vector2 vec, float scale) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator /(OpenNefia.Core.Maths.Vector2 vec, OpenNefia.Core.Maths.Vector2 scale) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2.operator ==(OpenNefia.Core.Maths.Vector2 a, OpenNefia.Core.Maths.Vector2 b) -> bool
static OpenNefia.Core.Maths.Vector2i.ComponentMax(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.ComponentMin(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.explicit operator Love.Vector2(OpenNefia.Core.Maths.Vector2i vector) -> Love.Vector2
static OpenNefia.Core.Maths.Vector2i.explicit operator OpenNefia.Core.Maths.Vector2i(Love.Vector2 vector) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.explicit operator OpenNefia.Core.Maths.Vector2i(OpenNefia.Core.Maths.Vector2 vector) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.implicit operator Love.Point(OpenNefia.Core.Maths.Vector2i vector) -> Love.Point
static OpenNefia.Core.Maths.Vector2i.implicit operator Love.Size(OpenNefia.Core.Maths.Vector2i vector) -> Love.Size
static OpenNefia.Core.Maths.Vector2i.implicit operator OpenNefia.Core.Maths.Vector2(OpenNefia.Core.Maths.Vector2i vector) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2i.implicit operator OpenNefia.Core.Maths.Vector2i((int x, int y) tuple) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.implicit operator OpenNefia.Core.Maths.Vector2i(Love.Point point) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.implicit operator OpenNefia.Core.Maths.Vector2i(Love.Size size) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator !=(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> bool
static OpenNefia.Core.Maths.Vector2i.operator *(OpenNefia.Core.Maths.Vector2i a, float scale) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2i.operator *(OpenNefia.Core.Maths.Vector2i a, int scale) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator *(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator +(OpenNefia.Core.Maths.Vector2i a, int b) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator +(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator -(OpenNefia.Core.Maths.Vector2i a) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator -(OpenNefia.Core.Maths.Vector2i a, int b) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator -(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator /(OpenNefia.Core.Maths.Vector2i a, float scale) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Maths.Vector2i.operator /(OpenNefia.Core.Maths.Vector2i a, int scale) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator /(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Maths.Vector2i.operator ==(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> bool
static OpenNefia.Core.Maths.Vector3.Add(OpenNefia.Core.Maths.Vector3 a, OpenNefia.Core.Maths.Vector3 b) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Add(ref OpenNefia.Core.Maths.Vector3 a, ref OpenNefia.Core.Maths.Vector3 b, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.BaryCentric(OpenNefia.Core.Maths.Vector3 a, OpenNefia.Core.Maths.Vector3 b, OpenNefia.Core.Maths.Vector3 c, float u, float v) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.BaryCentric(ref OpenNefia.Core.Maths.Vector3 a, ref OpenNefia.Core.Maths.Vector3 b, ref OpenNefia.Core.Maths.Vector3 c, float u, float v, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.CalculateAngle(OpenNefia.Core.Maths.Vector3 first, OpenNefia.Core.Maths.Vector3 second) -> float
static OpenNefia.Core.Maths.Vector3.CalculateAngle(ref OpenNefia.Core.Maths.Vector3 first, ref OpenNefia.Core.Maths.Vector3 second, out float result) -> void
static OpenNefia.Core.Maths.Vector3.Clamp(OpenNefia.Core.Maths.Vector3 vec, OpenNefia.Core.Maths.Vector3 min, OpenNefia.Core.Maths.Vector3 max) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Clamp(ref OpenNefia.Core.Maths.Vector3 vec, ref OpenNefia.Core.Maths.Vector3 min, ref OpenNefia.Core.Maths.Vector3 max, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.ComponentMax(OpenNefia.Core.Maths.Vector3 a, OpenNefia.Core.Maths.Vector3 b) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.ComponentMax(ref OpenNefia.Core.Maths.Vector3 a, ref OpenNefia.Core.Maths.Vector3 b, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.ComponentMin(OpenNefia.Core.Maths.Vector3 a, OpenNefia.Core.Maths.Vector3 b) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.ComponentMin(ref OpenNefia.Core.Maths.Vector3 a, ref OpenNefia.Core.Maths.Vector3 b, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Cross(OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Cross(ref OpenNefia.Core.Maths.Vector3 left, ref OpenNefia.Core.Maths.Vector3 right, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Divide(OpenNefia.Core.Maths.Vector3 vector, float scale) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Divide(OpenNefia.Core.Maths.Vector3 vector, OpenNefia.Core.Maths.Vector3 scale) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Divide(ref OpenNefia.Core.Maths.Vector3 vector, float scale, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Divide(ref OpenNefia.Core.Maths.Vector3 vector, ref OpenNefia.Core.Maths.Vector3 scale, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Dot(OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right) -> float
static OpenNefia.Core.Maths.Vector3.Dot(ref OpenNefia.Core.Maths.Vector3 left, ref OpenNefia.Core.Maths.Vector3 right, out float result) -> void
static OpenNefia.Core.Maths.Vector3.InterpolateCubic(OpenNefia.Core.Maths.Vector3 preA, OpenNefia.Core.Maths.Vector3 a, OpenNefia.Core.Maths.Vector3 b, OpenNefia.Core.Maths.Vector3 postB, float t) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Lerp(OpenNefia.Core.Maths.Vector3 a, OpenNefia.Core.Maths.Vector3 b, float blend) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Lerp(ref OpenNefia.Core.Maths.Vector3 a, ref OpenNefia.Core.Maths.Vector3 b, float blend, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Max(OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Min(OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Multiply(OpenNefia.Core.Maths.Vector3 vector, float scale) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Multiply(OpenNefia.Core.Maths.Vector3 vector, OpenNefia.Core.Maths.Vector3 scale) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Multiply(ref OpenNefia.Core.Maths.Vector3 vector, float scale, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Multiply(ref OpenNefia.Core.Maths.Vector3 vector, ref OpenNefia.Core.Maths.Vector3 scale, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Normalize(OpenNefia.Core.Maths.Vector3 vec) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Normalize(ref OpenNefia.Core.Maths.Vector3 vec, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.operator !=(OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right) -> bool
static OpenNefia.Core.Maths.Vector3.operator *(float scale, OpenNefia.Core.Maths.Vector3 vec) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.operator *(OpenNefia.Core.Maths.Vector3 a, OpenNefia.Core.Maths.Vector3 b) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.operator *(OpenNefia.Core.Maths.Vector3 vec, float scale) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.operator +(OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.operator -(OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.operator -(OpenNefia.Core.Maths.Vector3 vec) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.operator /(OpenNefia.Core.Maths.Vector3 vec, float scale) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.operator ==(OpenNefia.Core.Maths.Vector3 left, OpenNefia.Core.Maths.Vector3 right) -> bool
static OpenNefia.Core.Maths.Vector3.Subtract(OpenNefia.Core.Maths.Vector3 a, OpenNefia.Core.Maths.Vector3 b) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Subtract(ref OpenNefia.Core.Maths.Vector3 a, ref OpenNefia.Core.Maths.Vector3 b, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Transform(OpenNefia.Core.Maths.Vector3 vec, OpenNefia.Core.Maths.Matrix4 mat) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Transform(OpenNefia.Core.Maths.Vector3 vec, OpenNefia.Core.Maths.Quaternion quat) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.Transform(ref OpenNefia.Core.Maths.Vector3 vec, ref OpenNefia.Core.Maths.Matrix4 mat, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.Transform(ref OpenNefia.Core.Maths.Vector3 vec, ref OpenNefia.Core.Maths.Matrix4 mat, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector3.Transform(ref OpenNefia.Core.Maths.Vector3 vec, ref OpenNefia.Core.Maths.Quaternion quat, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.TransformNormal(OpenNefia.Core.Maths.Vector3 norm, OpenNefia.Core.Maths.Matrix4 mat) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.TransformNormal(ref OpenNefia.Core.Maths.Vector3 norm, ref OpenNefia.Core.Maths.Matrix4 mat, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.TransformNormalInverse(OpenNefia.Core.Maths.Vector3 norm, OpenNefia.Core.Maths.Matrix4 invMat) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.TransformNormalInverse(ref OpenNefia.Core.Maths.Vector3 norm, ref OpenNefia.Core.Maths.Matrix4 invMat, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.TransformPerspective(OpenNefia.Core.Maths.Vector3 vec, OpenNefia.Core.Maths.Matrix4 mat) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.TransformPerspective(ref OpenNefia.Core.Maths.Vector3 vec, ref OpenNefia.Core.Maths.Matrix4 mat, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.TransformPosition(OpenNefia.Core.Maths.Vector3 pos, OpenNefia.Core.Maths.Matrix4 mat) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.TransformPosition(ref OpenNefia.Core.Maths.Vector3 pos, ref OpenNefia.Core.Maths.Matrix4 mat, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector3.TransformVector(OpenNefia.Core.Maths.Vector3 vec, OpenNefia.Core.Maths.Matrix4 mat) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Maths.Vector3.TransformVector(ref OpenNefia.Core.Maths.Vector3 vec, ref OpenNefia.Core.Maths.Matrix4 mat, out OpenNefia.Core.Maths.Vector3 result) -> void
static OpenNefia.Core.Maths.Vector4.Add(OpenNefia.Core.Maths.Vector4 a, OpenNefia.Core.Maths.Vector4 b) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Add(ref OpenNefia.Core.Maths.Vector4 a, ref OpenNefia.Core.Maths.Vector4 b, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.BaryCentric(OpenNefia.Core.Maths.Vector4 a, OpenNefia.Core.Maths.Vector4 b, OpenNefia.Core.Maths.Vector4 c, float u, float v) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.BaryCentric(ref OpenNefia.Core.Maths.Vector4 a, ref OpenNefia.Core.Maths.Vector4 b, ref OpenNefia.Core.Maths.Vector4 c, float u, float v, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Clamp(OpenNefia.Core.Maths.Vector4 vec, OpenNefia.Core.Maths.Vector4 min, OpenNefia.Core.Maths.Vector4 max) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Clamp(ref OpenNefia.Core.Maths.Vector4 vec, ref OpenNefia.Core.Maths.Vector4 min, ref OpenNefia.Core.Maths.Vector4 max, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Divide(OpenNefia.Core.Maths.Vector4 vector, float scale) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Divide(OpenNefia.Core.Maths.Vector4 vector, OpenNefia.Core.Maths.Vector4 scale) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Divide(ref OpenNefia.Core.Maths.Vector4 vector, float scale, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Divide(ref OpenNefia.Core.Maths.Vector4 vector, ref OpenNefia.Core.Maths.Vector4 scale, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Dot(OpenNefia.Core.Maths.Vector4 left, OpenNefia.Core.Maths.Vector4 right) -> float
static OpenNefia.Core.Maths.Vector4.Dot(ref OpenNefia.Core.Maths.Vector4 left, ref OpenNefia.Core.Maths.Vector4 right, out float result) -> void
static OpenNefia.Core.Maths.Vector4.implicit operator OpenNefia.Core.Maths.Vector4((float x, float y, float z, float w) tuple) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.InterpolateCubic(OpenNefia.Core.Maths.Vector4 preA, OpenNefia.Core.Maths.Vector4 a, OpenNefia.Core.Maths.Vector4 b, OpenNefia.Core.Maths.Vector4 postB, float t) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Lerp(OpenNefia.Core.Maths.Vector4 a, OpenNefia.Core.Maths.Vector4 b, float blend) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Lerp(ref OpenNefia.Core.Maths.Vector4 a, ref OpenNefia.Core.Maths.Vector4 b, float blend, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Max(OpenNefia.Core.Maths.Vector4 a, OpenNefia.Core.Maths.Vector4 b) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Max(ref OpenNefia.Core.Maths.Vector4 a, ref OpenNefia.Core.Maths.Vector4 b, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Min(OpenNefia.Core.Maths.Vector4 a, OpenNefia.Core.Maths.Vector4 b) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Min(ref OpenNefia.Core.Maths.Vector4 a, ref OpenNefia.Core.Maths.Vector4 b, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Multiply(OpenNefia.Core.Maths.Vector4 vector, float scale) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Multiply(OpenNefia.Core.Maths.Vector4 vector, OpenNefia.Core.Maths.Vector4 scale) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Multiply(ref OpenNefia.Core.Maths.Vector4 vector, float scale, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Multiply(ref OpenNefia.Core.Maths.Vector4 vector, ref OpenNefia.Core.Maths.Vector4 scale, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Normalize(OpenNefia.Core.Maths.Vector4 vec) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Normalize(ref OpenNefia.Core.Maths.Vector4 vec, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.operator !=(OpenNefia.Core.Maths.Vector4 left, OpenNefia.Core.Maths.Vector4 right) -> bool
static OpenNefia.Core.Maths.Vector4.operator *(float scale, OpenNefia.Core.Maths.Vector4 vec) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.operator *(OpenNefia.Core.Maths.Vector4 vec, float scale) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.operator +(OpenNefia.Core.Maths.Vector4 left, OpenNefia.Core.Maths.Vector4 right) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.operator -(OpenNefia.Core.Maths.Vector4 left, OpenNefia.Core.Maths.Vector4 right) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.operator -(OpenNefia.Core.Maths.Vector4 vec) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.operator /(OpenNefia.Core.Maths.Vector4 vec, float scale) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.operator ==(OpenNefia.Core.Maths.Vector4 left, OpenNefia.Core.Maths.Vector4 right) -> bool
static OpenNefia.Core.Maths.Vector4.Subtract(OpenNefia.Core.Maths.Vector4 a, OpenNefia.Core.Maths.Vector4 b) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Subtract(ref OpenNefia.Core.Maths.Vector4 a, ref OpenNefia.Core.Maths.Vector4 b, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Transform(OpenNefia.Core.Maths.Vector4 vec, OpenNefia.Core.Maths.Matrix4 mat) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Transform(OpenNefia.Core.Maths.Vector4 vec, OpenNefia.Core.Maths.Quaternion quat) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Maths.Vector4.Transform(ref OpenNefia.Core.Maths.Vector4 vec, ref OpenNefia.Core.Maths.Matrix4 mat, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Maths.Vector4.Transform(ref OpenNefia.Core.Maths.Vector4 vec, ref OpenNefia.Core.Maths.Quaternion quat, out OpenNefia.Core.Maths.Vector4 result) -> void
static OpenNefia.Core.Prototypes.HspIds<T>.From122(T id) -> OpenNefia.Core.Prototypes.HspIds<T>!
static OpenNefia.Core.Prototypes.HspIds<T>.FromCanonical(string! origin, T id) -> OpenNefia.Core.Prototypes.HspIds<T>!
static OpenNefia.Core.Prototypes.PrototypeExt.GetStrongID<T>(this T! proto) -> OpenNefia.Core.Prototypes.PrototypeId<T!>
static OpenNefia.Core.Prototypes.PrototypeId<T>.explicit operator string!(OpenNefia.Core.Prototypes.PrototypeId<T!> self) -> string!
static OpenNefia.Core.Prototypes.PrototypeId<T>.operator !=(OpenNefia.Core.Prototypes.PrototypeId<T!> a, OpenNefia.Core.Prototypes.PrototypeId<T!> b) -> bool
static OpenNefia.Core.Prototypes.PrototypeId<T>.operator ==(OpenNefia.Core.Prototypes.PrototypeId<T!> a, OpenNefia.Core.Prototypes.PrototypeId<T!> b) -> bool
static OpenNefia.Core.Prototypes.PrototypeIdExt.ResolvePrototype<T>(this OpenNefia.Core.Prototypes.PrototypeId<T!> id) -> T!
static OpenNefia.Core.Random.RandomExtensions.NextFloat(this OpenNefia.Core.Random.IRandom! random) -> float
static OpenNefia.Core.Random.RandomExtensions.NextFloat(this System.Random! random) -> float
static OpenNefia.Core.Random.RandomExtensions.NextGaussian(this OpenNefia.Core.Random.IRandom! random, double μ = 0, double σ = 1) -> double
static OpenNefia.Core.Random.RandomExtensions.NextVec2iInBounds(this OpenNefia.Core.Random.IRandom! random, OpenNefia.Core.Maths.UIBox2i bounds) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Random.RandomExtensions.NextVec2iInRadius(this OpenNefia.Core.Random.IRandom! random, float radius) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Random.RandomExtensions.NextVec2iInVec(this OpenNefia.Core.Random.IRandom! random, int boundX, int boundY) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Random.RandomExtensions.NextVec2iInVec(this OpenNefia.Core.Random.IRandom! random, OpenNefia.Core.Maths.Vector2i bounds) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Random.RandomExtensions.NextVec2InRadius(this OpenNefia.Core.Random.IRandom! random, float radius) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Random.RandomExtensions.OneIn(this OpenNefia.Core.Random.IRandom! random, int chance) -> bool
static OpenNefia.Core.Random.RandomExtensions.Pick<T>(this OpenNefia.Core.Random.IRandom! random, System.Collections.Generic.IReadOnlyCollection<T>! collection) -> T
static OpenNefia.Core.Random.RandomExtensions.Pick<T>(this OpenNefia.Core.Random.IRandom! random, System.Collections.Generic.IReadOnlyList<T>! list) -> T
static OpenNefia.Core.Random.RandomExtensions.PickAndTake<T>(this OpenNefia.Core.Random.IRandom! random, System.Collections.Generic.IList<T>! list) -> T
static OpenNefia.Core.Random.RandomExtensions.PickOrDefault<T>(this OpenNefia.Core.Random.IRandom! random, System.Collections.Generic.IReadOnlyList<T>! list) -> T?
static OpenNefia.Core.Random.RandomExtensions.Prob(this OpenNefia.Core.Random.IRandom! random, float chance) -> bool
static OpenNefia.Core.Random.RandomExtensions.Shuffle<T>(this OpenNefia.Core.Random.IRandom! random, System.Collections.Generic.IList<T>! list) -> void
static OpenNefia.Core.Rendering.Assets.Get(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> id) -> OpenNefia.Core.Rendering.IAssetInstance!
static OpenNefia.Core.Rendering.Assets.GetSized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Rendering.AssetPrototype!> id, OpenNefia.Core.Maths.Vector2i size) -> OpenNefia.Core.Rendering.IAssetInstance!
static OpenNefia.Core.Rendering.FovRadius.Get(int fovMax) -> int[,]!
static OpenNefia.Core.Rendering.GraphicsEx.DrawImage(Love.Quad! quad, Love.Texture! image, float x = 0, float y = 0, float width = 0, float height = 0, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
static OpenNefia.Core.Rendering.GraphicsEx.DrawImage(Love.Texture! image, float x = 0, float y = 0, float width = 0, float height = 0, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
static OpenNefia.Core.Rendering.GraphicsEx.DrawImageRegion(Love.Image! image, Love.Quad! quad, float x = 0, float y = 0, float width = 0, float height = 0, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
static OpenNefia.Core.Rendering.GraphicsEx.DrawImageS(float uiScale, Love.Texture! image, float x, float y, float? width = null, float? height = null, bool centered = false, float rotation = 0, OpenNefia.Core.Maths.Vector2 originOffset = default(OpenNefia.Core.Maths.Vector2)) -> void
static OpenNefia.Core.Rendering.GraphicsEx.DrawSpriteBatchS(float uiScale, Love.SpriteBatch! batch, float x, float y, float? width = null, float? height = null, float rotation = 0) -> void
static OpenNefia.Core.Rendering.GraphicsEx.GetDefaultFilter() -> OpenNefia.Core.Rendering.ImageFilter!
static OpenNefia.Core.Rendering.GraphicsEx.Rectangle(Love.DrawMode fill, OpenNefia.Core.Maths.UIBox2 box) -> void
static OpenNefia.Core.Rendering.GraphicsEx.SetColor(int r, int g, int b, int a = 255) -> void
static OpenNefia.Core.Rendering.GraphicsEx.SetColor(Love.Color color) -> void
static OpenNefia.Core.Rendering.GraphicsEx.SetColor(OpenNefia.Core.Maths.Color color) -> void
static OpenNefia.Core.Rendering.GraphicsEx.SetDefaultFilter(OpenNefia.Core.Rendering.ImageFilter! filter) -> void
static OpenNefia.Core.Rendering.GraphicsEx.SetFont(OpenNefia.Core.Rendering.FontSpec! spec) -> void
static OpenNefia.Core.Rendering.GraphicsEx.WithCanvas(Love.Canvas! canvas, System.Action! callback) -> void
static OpenNefia.Core.Rendering.GraphicsS.DrawS(float uiScale, Love.Drawable! drawable, float vx, float vy, float angle = 0, float vsx = 1, float vsy = 1, float vox = 0, float voy = 0, float vkx = 0, float vky = 0) -> void
static OpenNefia.Core.Rendering.GraphicsS.GetAscentV(this Love.Font! font, float uiScale) -> float
static OpenNefia.Core.Rendering.GraphicsS.GetDescentV(this Love.Font! font, float uiScale) -> float
static OpenNefia.Core.Rendering.GraphicsS.GetHeightV(this Love.Font! font, float uiScale) -> float
static OpenNefia.Core.Rendering.GraphicsS.GetHeightV(this Love.Text! text, float uiScale) -> float
static OpenNefia.Core.Rendering.GraphicsS.GetWidthV(this Love.Font! font, float uiScale, string! text) -> float
static OpenNefia.Core.Rendering.GraphicsS.GetWidthV(this Love.Text! text, float uiScale) -> float
static OpenNefia.Core.Rendering.GraphicsS.GetWrapS(this Love.Font! font, float uiScale, string! text, float maxWidth) -> System.Tuple<int, string![]!>!
static OpenNefia.Core.Rendering.GraphicsS.LineS(float uiScale, float vx1, float vy1, float vx2, float vy2) -> void
static OpenNefia.Core.Rendering.GraphicsS.PrintS(float uiScale, string! text, float vx, float vy) -> void
static OpenNefia.Core.Rendering.GraphicsS.RectangleS(float uiScale, Love.DrawMode drawMode, float vx, float vy, float vw, float vh) -> void
static OpenNefia.Core.Rendering.GraphicsS.RectangleS(float uiScale, Love.DrawMode drawMode, OpenNefia.Core.Maths.UIBox2 box) -> void
static OpenNefia.Core.Rendering.GraphicsS.SetColorTinted(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.Maths.Color color) -> void
static OpenNefia.Core.Rendering.GraphicsS.TranslateS(float uiScale, float vx, float vy) -> void
static OpenNefia.Core.Rendering.ImageLoader.NewImageData(Love.FileData! fileData, OpenNefia.Core.ResourceManagement.ImageLoadParameters loadParams) -> Love.ImageData!
static OpenNefia.Core.Rendering.LoveExtensions.GetGlyphData(this Love.Rasterizer! rasterizer, System.Text.Rune rune) -> Love.GlyphData!
static OpenNefia.Core.Rendering.LoveExtensions.Set(this Love.Text! text, string! str, Love.Color? color = null) -> void
static OpenNefia.Core.ResourceManagement.ImageLoadParameters.FromYaml(YamlDotNet.RepresentationModel.YamlMappingNode! yaml) -> OpenNefia.Core.ResourceManagement.ImageLoadParameters
static OpenNefia.Core.ResourceManagement.LoveFileDataResource.implicit operator Love.FileData!(OpenNefia.Core.ResourceManagement.LoveFileDataResource! res) -> Love.FileData!
static OpenNefia.Core.ResourceManagement.LoveImageResource.implicit operator Love.Image!(OpenNefia.Core.ResourceManagement.LoveImageResource! res) -> Love.Image!
static OpenNefia.Core.ResourceManagement.LoveImageResource.implicit operator Love.ImageData!(OpenNefia.Core.ResourceManagement.LoveImageResource! res) -> Love.ImageData!
static OpenNefia.Core.SaveGames.AssemblyMetaData.FromAssembly(System.Reflection.Assembly! assembly) -> OpenNefia.Core.SaveGames.AssemblyMetaData!
static OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions.ReadValueOrThrow(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> object!
static OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions.ReadValueOrThrow<T>(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T
static OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions.ReadValueOrThrow<T>(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T
static OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions.ReadWithValue(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> (OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! result, object? value)
static OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions.ReadWithValue<T>(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> (OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! result, T? value)
static OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions.ReadWithValueCast<T>(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> (OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! result, T? value)
static OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions.ReadWithValueOrThrow<T>(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> (T value, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! result)
static OpenNefia.Core.Serialization.Manager.SerializationManagerReadExtensions.ReadWithValueOrThrow<T>(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, System.Type! type, OpenNefia.Core.Serialization.Markdown.DataNode! node, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> (T value, OpenNefia.Core.Serialization.Manager.Result.DeserializationResult! result)
static OpenNefia.Core.Serialization.Manager.SerializationManagerWriteExtensions.WriteValueAs<T>(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, object! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> T!
static OpenNefia.Core.Serialization.Manager.SerializationManagerWriteExtensions.WriteValueAs<T>(this OpenNefia.Core.Serialization.Manager.ISerializationManager! manager, System.Type! type, object! value, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> T!
static OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNodeExtensions.Add(this OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! mapping, string! key, OpenNefia.Core.Serialization.Markdown.DataNode! node) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
static OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNodeExtensions.Add(this OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! mapping, string! key, string! value) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
static OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNodeExtensions.Add(this OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! mapping, string! key, System.Collections.Generic.List<string!>! sequence) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
static OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNodeExtensions.Insert(this OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! mapping, int index, string! key, OpenNefia.Core.Serialization.Markdown.DataNode! node) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
static OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNodeExtensions.Insert(this OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! mapping, int index, string! key, string! value) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
static OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNodeExtensions.Insert(this OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode! mapping, int index, string! key, System.Collections.Generic.List<string!>! sequence) -> OpenNefia.Core.Serialization.Markdown.Mapping.MappingDataNode!
static OpenNefia.Core.Serialization.Markdown.NodeMark.implicit operator OpenNefia.Core.Serialization.Markdown.NodeMark(YamlDotNet.Core.Mark! mark) -> OpenNefia.Core.Serialization.Markdown.NodeMark
static OpenNefia.Core.Serialization.Markdown.NodeMark.Invalid.get -> OpenNefia.Core.Serialization.Markdown.NodeMark
static OpenNefia.Core.Serialization.Markdown.NodeMark.operator !=(OpenNefia.Core.Serialization.Markdown.NodeMark left, OpenNefia.Core.Serialization.Markdown.NodeMark right) -> bool
static OpenNefia.Core.Serialization.Markdown.NodeMark.operator <(OpenNefia.Core.Serialization.Markdown.NodeMark? left, OpenNefia.Core.Serialization.Markdown.NodeMark? right) -> bool
static OpenNefia.Core.Serialization.Markdown.NodeMark.operator ==(OpenNefia.Core.Serialization.Markdown.NodeMark left, OpenNefia.Core.Serialization.Markdown.NodeMark right) -> bool
static OpenNefia.Core.Serialization.Markdown.NodeMark.operator >(OpenNefia.Core.Serialization.Markdown.NodeMark? left, OpenNefia.Core.Serialization.Markdown.NodeMark? right) -> bool
static OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.operator !=(OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode? left, OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode? right) -> bool
static OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode.operator ==(OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode? left, OpenNefia.Core.Serialization.Markdown.Validation.ErrorNode? right) -> bool
static OpenNefia.Core.Serialization.Markdown.YamlNodeHelpers.ToDataNode(this YamlDotNet.RepresentationModel.YamlNode! node) -> OpenNefia.Core.Serialization.Markdown.DataNode!
static OpenNefia.Core.Serialization.Markdown.YamlNodeHelpers.ToDataNodeCast<T>(this YamlDotNet.RepresentationModel.YamlNode! node) -> T!
static OpenNefia.Core.Serialization.Markdown.YamlNodeHelpers.ToYamlNode(this OpenNefia.Core.Serialization.Markdown.DataNode! node) -> YamlDotNet.RepresentationModel.YamlNode!
static OpenNefia.Core.Stats.Stat<T>.operator !=(OpenNefia.Core.Stats.Stat<T>? left, OpenNefia.Core.Stats.Stat<T>? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator !=(OpenNefia.Core.Stats.Stat<T>? left, T? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator <(OpenNefia.Core.Stats.Stat<T>? left, OpenNefia.Core.Stats.Stat<T>? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator <(OpenNefia.Core.Stats.Stat<T>? left, T? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator <=(OpenNefia.Core.Stats.Stat<T>? left, OpenNefia.Core.Stats.Stat<T>? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator <=(OpenNefia.Core.Stats.Stat<T>? left, T? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator ==(OpenNefia.Core.Stats.Stat<T>? left, OpenNefia.Core.Stats.Stat<T>? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator ==(OpenNefia.Core.Stats.Stat<T>? left, T? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator >(OpenNefia.Core.Stats.Stat<T>? left, OpenNefia.Core.Stats.Stat<T>? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator >(OpenNefia.Core.Stats.Stat<T>? left, T? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator >=(OpenNefia.Core.Stats.Stat<T>? left, OpenNefia.Core.Stats.Stat<T>? right) -> bool
static OpenNefia.Core.Stats.Stat<T>.operator >=(OpenNefia.Core.Stats.Stat<T>? left, T? right) -> bool
static OpenNefia.Core.Timing.Timer.Delay(int milliseconds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static OpenNefia.Core.Timing.Timer.Delay(System.TimeSpan duration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static OpenNefia.Core.Timing.Timer.Spawn(int milliseconds, System.Action! onFired, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static OpenNefia.Core.Timing.Timer.Spawn(System.TimeSpan duration, System.Action! onFired, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> void
static OpenNefia.Core.Timing.Timer.SpawnRepeating(int milliseconds, System.Action! onFired, System.Threading.CancellationToken cancellationToken) -> void
static OpenNefia.Core.Timing.Timer.SpawnRepeating(System.TimeSpan duration, System.Action! onFired, System.Threading.CancellationToken cancellationToken) -> void
static OpenNefia.Core.UI.UiHelpers.AddChildrenFromAttributesRecursive(OpenNefia.Core.UI.Element.UiElement! parent) -> void
static OpenNefia.Core.UI.UiHelpers.AddChildrenRecursive(this OpenNefia.Core.UI.Element.UiElement! parent, OpenNefia.Core.UI.Element.UiElement! child) -> void
static OpenNefia.Core.UI.UiHelpers.DrawPercentageBar(float uiScale, OpenNefia.Core.UI.UiHelpers.UiBarDrawableState! entry, OpenNefia.Core.Maths.Vector2 pos, float barWidth, OpenNefia.Core.Maths.Vector2 drawSize = default(OpenNefia.Core.Maths.Vector2)) -> void
static OpenNefia.Core.UI.UiHelpers.FormatPowerText(int grade, bool noBrackets = false) -> string!
static OpenNefia.Core.UI.UiHelpers.SplitString(string! str, OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!> lang) -> string![]!
static OpenNefia.Core.UI.Wisp.AttachedProperty.Create(string! name, System.Type! owningType, System.Type! propertyType, object? defaultValue = null, System.Func<object?, bool>? validate = null, OpenNefia.Core.UI.Wisp.AttachedPropertyChangedCallback? changed = null) -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static OpenNefia.Core.UI.Wisp.AttachedProperty<T>.Create(string! name, System.Type! owningType, T defaultValue = default(T), System.Func<T, bool>? validate = null, OpenNefia.Core.UI.Wisp.AttachedPropertyChangedCallback<T>? changed = null) -> OpenNefia.Core.UI.Wisp.AttachedProperty<T>!
static OpenNefia.Core.UI.Wisp.AttachedProperty<T>.CreateNull(string! name, System.Type! owningType, T defaultValue = default(T), System.Func<T, bool>? validate = null, OpenNefia.Core.UI.Wisp.AttachedPropertyChangedCallback<T>? changed = null) -> OpenNefia.Core.UI.Wisp.AttachedProperty<T>!
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetAnchorAndMarginPreset(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset preset, OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode mode = OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode.MinSize, int margin = 0) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetAnchorBottom(OpenNefia.Core.UI.Wisp.WispControl! control, float value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetAnchorLeft(OpenNefia.Core.UI.Wisp.WispControl! control, float value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetAnchorPreset(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset preset, bool keepMargin = false) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetAnchorRight(OpenNefia.Core.UI.Wisp.WispControl! control, float value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetAnchorTop(OpenNefia.Core.UI.Wisp.WispControl! control, float value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetGrowHorizontal(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetGrowVertical(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowDirection value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetMarginBottom(OpenNefia.Core.UI.Wisp.WispControl! control, float value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetMarginLeft(OpenNefia.Core.UI.Wisp.WispControl! control, float value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetMarginRight(OpenNefia.Core.UI.Wisp.WispControl! control, float value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetMarginsPreset(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPreset preset, OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode resizeMode = OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.LayoutPresetMode.MinSize, int margin = 0) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetMarginTop(OpenNefia.Core.UI.Wisp.WispControl! control, float value) -> void
static OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.SetPosition(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.Maths.Vector2 position) -> void
static OpenNefia.Core.UI.Wisp.Controls.PopupContainer.GetAltOrigin(OpenNefia.Core.UI.Wisp.WispControl! control) -> OpenNefia.Core.Maths.Vector2?
static OpenNefia.Core.UI.Wisp.Controls.PopupContainer.GetPopupOrigin(OpenNefia.Core.UI.Wisp.WispControl! control) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.UI.Wisp.Controls.PopupContainer.SetAltOrigin(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.Maths.Vector2? origin) -> void
static OpenNefia.Core.UI.Wisp.Controls.PopupContainer.SetPopupOrigin(OpenNefia.Core.UI.Wisp.WispControl! control, OpenNefia.Core.Maths.Vector2 origin) -> void
static OpenNefia.Core.UI.Wisp.Controls.TabContainer.GetTabTitle(OpenNefia.Core.UI.Wisp.WispControl! control) -> string?
static OpenNefia.Core.UI.Wisp.Controls.TabContainer.GetTabVisible(OpenNefia.Core.UI.Wisp.WispControl! control) -> bool
static OpenNefia.Core.UI.Wisp.Controls.TabContainer.SetTabTitle(OpenNefia.Core.UI.Wisp.WispControl! control, string! title) -> void
static OpenNefia.Core.UI.Wisp.Controls.TabContainer.SetTabVisible(OpenNefia.Core.UI.Wisp.WispControl! control, bool visible) -> void
static OpenNefia.Core.UI.Wisp.IWispLayerExtensions.OpenWindow(this OpenNefia.Core.UI.Wisp.IWispLayer! layer, OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow! window) -> void
static OpenNefia.Core.UI.Wisp.IWispLayerExtensions.OpenWindowAt(this OpenNefia.Core.UI.Wisp.IWispLayer! layer, OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow! window, OpenNefia.Core.Maths.Vector2 pos) -> void
static OpenNefia.Core.UI.Wisp.IWispLayerExtensions.OpenWindowCentered(this OpenNefia.Core.UI.Wisp.IWispLayer! layer, OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow! window) -> void
static OpenNefia.Core.UI.Wisp.IWispLayerExtensions.OpenWindowToLeft(this OpenNefia.Core.UI.Wisp.IWispLayer! layer, OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow! window) -> void
static OpenNefia.Core.UI.Wisp.Styling.MutableSelector.implicit operator OpenNefia.Core.UI.Wisp.Styling.Selector!(OpenNefia.Core.UI.Wisp.Styling.MutableSelector! elem) -> OpenNefia.Core.UI.Wisp.Styling.Selector!
static OpenNefia.Core.UI.Wisp.Styling.MutableSelector.implicit operator OpenNefia.Core.UI.Wisp.Styling.StyleRule!(OpenNefia.Core.UI.Wisp.Styling.MutableSelector! elem) -> OpenNefia.Core.UI.Wisp.Styling.StyleRule!
static OpenNefia.Core.UI.Wisp.Styling.SelectorElement.Class(params string![]! classes) -> OpenNefia.Core.UI.Wisp.Styling.SelectorElement!
static OpenNefia.Core.UI.Wisp.Styling.SelectorElement.Id(string! id) -> OpenNefia.Core.UI.Wisp.Styling.SelectorElement!
static OpenNefia.Core.UI.Wisp.Styling.SelectorElement.Type(System.Type! elementType) -> OpenNefia.Core.UI.Wisp.Styling.SelectorElement!
static OpenNefia.Core.UI.Wisp.Styling.StylesheetHelpers.Child() -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorChild!
static OpenNefia.Core.UI.Wisp.Styling.StylesheetHelpers.Element() -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement!
static OpenNefia.Core.UI.Wisp.Styling.StylesheetHelpers.Element<T>() -> OpenNefia.Core.UI.Wisp.Styling.MutableSelectorElement!
static OpenNefia.Core.UI.Wisp.Styling.StylesheetUtilities.GetAssetInstance(string! id) -> OpenNefia.Core.Rendering.IAssetInstance!
static OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity.operator +(OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity a, OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity b) -> OpenNefia.Core.UI.Wisp.Styling.StyleSpecificity
static OpenNefia.Core.UserInterface.LogicalExtensions.GetSelfAndLogicalAncestors(this OpenNefia.Core.UI.Element.UiElement! control) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.UI.Element.UiElement!>!
static OpenNefia.Core.UserInterface.XAML.OpenNefiaXamlLoader.Load(object! obj) -> void
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.AcceptsNull(System.Type! type) -> bool
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.AcceptsNull<T>() -> bool
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.CanCast<T>(object! value) -> bool
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.ConvertImplicit<T>(object! value) -> T
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.ConvertImplicitOrDefault(object! value, System.Type! type) -> object?
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.ConvertOrDefault(object! value, System.Type! type, System.Globalization.CultureInfo! culture) -> object?
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.Default(System.Type! type) -> object?
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.IsNumeric(System.Type! type) -> bool
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.TryConvert(System.Type! to, object! value, System.Globalization.CultureInfo! culture, out object? result) -> bool
static OpenNefia.Core.UserInterface.XAML.TypeUtilities.TryConvertImplicit(System.Type! to, object! value, out object? result) -> bool
static OpenNefia.Core.UserInterface.XAML.XNamespace.StaticExtension.ProvideValue() -> object!
static OpenNefia.Core.Utility.ByteArrayHelpers.ToHexString(this byte[]! data) -> string!
static OpenNefia.Core.Utility.CommandParsing.Escape(string! text) -> string!
static OpenNefia.Core.Utility.CommandParsing.ParseArguments(System.ReadOnlySpan<char> text, System.Collections.Generic.List<string!>! args) -> void
static OpenNefia.Core.Utility.ComparisonUtils.EvaluateComparison<T>(T a, T b, OpenNefia.Core.Utility.ComparisonType comparison) -> bool
static OpenNefia.Core.Utility.DebugTools.Assert(bool condition) -> void
static OpenNefia.Core.Utility.DebugTools.Assert(bool condition, string! message) -> void
static OpenNefia.Core.Utility.DebugTools.Assert(string! message) -> void
static OpenNefia.Core.Utility.DebugTools.AssertNotNull(object? arg) -> void
static OpenNefia.Core.Utility.DebugTools.AssertNull(object? arg) -> void
static OpenNefia.Core.Utility.DebugTools.Break() -> void
static OpenNefia.Core.Utility.EnumHelpers.Clamp<T>(T val, T min, T max) -> T
static OpenNefia.Core.Utility.EnumHelpers.EnumerateValues<T>() -> System.Collections.Generic.IEnumerable<T>!
static OpenNefia.Core.Utility.EnumHelpers.EnumerateValuesWithFlag<T>(this System.Enum! flag) -> System.Collections.Generic.IEnumerable<T>!
static OpenNefia.Core.Utility.EnumHelpers.HasAllFlags<T>(this System.Enum! value, T request) -> bool
static OpenNefia.Core.Utility.EnumHelpers.MaxValue(System.Type! enumType) -> object!
static OpenNefia.Core.Utility.EnumHelpers.MaxValue<T>() -> T
static OpenNefia.Core.Utility.EnumHelpers.MinValue(System.Type! enumType) -> object!
static OpenNefia.Core.Utility.EnumHelpers.MinValue<T>() -> T
static OpenNefia.Core.Utility.ExceptionHelpers.ToStringWithLoaderExceptions(this System.Exception! exception) -> string!
static OpenNefia.Core.Utility.Extensions.AddRange<T>(this System.Collections.Generic.ICollection<T>! collection, System.Collections.Generic.IEnumerable<T>! items) -> void
static OpenNefia.Core.Utility.Extensions.AddRange<T>(this System.Collections.Generic.IList<T>! list, System.Collections.Generic.IEnumerable<T>! items) -> void
static OpenNefia.Core.Utility.Extensions.AsNullable<T>(this System.Collections.Generic.IEnumerable<T>! source) -> System.Collections.Generic.IEnumerable<T?>!
static OpenNefia.Core.Utility.Extensions.Clone<T>(this System.Collections.Generic.IList<T>! listToClone) -> System.Collections.Generic.IList<T>!
static OpenNefia.Core.Utility.Extensions.FindIndex<T>(this System.Collections.Generic.IList<T>! list, int startIndex, int count, System.Predicate<T>! match) -> int
static OpenNefia.Core.Utility.Extensions.FindIndex<T>(this System.Collections.Generic.IList<T>! list, int startIndex, System.Predicate<T>! match) -> int
static OpenNefia.Core.Utility.Extensions.FindIndex<T>(this System.Collections.Generic.IList<T>! list, System.Predicate<T>! match) -> int
static OpenNefia.Core.Utility.Extensions.FirstOrNull<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source) -> TSource?
static OpenNefia.Core.Utility.Extensions.FirstOrNull<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate) -> TSource?
static OpenNefia.Core.Utility.Extensions.GetCumulativeLengths(this System.Array! arr) -> long[]!
static OpenNefia.Core.Utility.Extensions.GetLongLengths(this System.Array! array) -> long[]!
static OpenNefia.Core.Utility.Extensions.GetOrNew<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue>! dict, TKey key) -> TValue
static OpenNefia.Core.Utility.Extensions.GetValueOr<TKey, TValue>(this System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>! self, TKey key, TValue defaultValue) -> TValue
static OpenNefia.Core.Utility.Extensions.GetValueOrInsert<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue>! self, TKey key) -> TValue
static OpenNefia.Core.Utility.Extensions.GetValueOrInsert<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue>! self, TKey key, System.Func<TValue>! instantiator) -> TValue
static OpenNefia.Core.Utility.Extensions.Invert<TKey, TValue>(this System.Collections.Generic.IDictionary<TKey, TValue>! dict) -> System.Collections.Generic.Dictionary<TValue, TKey>!
static OpenNefia.Core.Utility.Extensions.MoveElement<T>(this System.Collections.Generic.IList<T>! list, int oldIndex, int newIndex) -> void
static OpenNefia.Core.Utility.Extensions.MoveElementWhere<T>(this System.Collections.Generic.IList<T>! list, System.Predicate<T>! pred, int newIndex) -> void
static OpenNefia.Core.Utility.Extensions.Pop<T>(this System.Collections.Generic.IList<T>! list) -> T
static OpenNefia.Core.Utility.Extensions.RemoveSwap<T>(this System.Collections.Generic.IList<T>! list, int index) -> T
static OpenNefia.Core.Utility.Extensions.ShallowClone<T>(this System.Collections.Generic.List<T>! self) -> System.Collections.Generic.List<T>!
static OpenNefia.Core.Utility.Extensions.ShallowClone<TKey, TValue>(this System.Collections.Generic.Dictionary<TKey, TValue>! self) -> System.Collections.Generic.Dictionary<TKey, TValue>!
static OpenNefia.Core.Utility.Extensions.ToArray<TKey, TValue>(this System.Collections.Generic.Dictionary<TKey, TValue>! dict) -> System.Collections.Generic.KeyValuePair<TKey, TValue>[]!
static OpenNefia.Core.Utility.Extensions.TryCastValue<T, TKey, TValue>(this System.Collections.Generic.Dictionary<TKey, TValue>! dict, TKey key, out T? value) -> bool
static OpenNefia.Core.Utility.Extensions.TryFirstOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource!>! source, System.Func<TSource!, bool>! predicate, out TSource? element) -> bool
static OpenNefia.Core.Utility.Extensions.TryFirstOrNull<TSource>(this System.Collections.Generic.IEnumerable<TSource>! source, System.Func<TSource, bool>! predicate, out TSource? element) -> bool
static OpenNefia.Core.Utility.Extensions.TryGetValue<T>(this System.Collections.Generic.IList<T>! list, int index, out T value) -> bool
static OpenNefia.Core.Utility.Extensions.WhereAssignable<TFrom, TTo>(this System.Collections.Generic.IEnumerable<TFrom>! iterator) -> System.Collections.Generic.IEnumerable<TTo>!
static OpenNefia.Core.Utility.Extensions.WhereNotNull<T>(this System.Collections.Generic.IEnumerable<T?>! iterator) -> System.Collections.Generic.IEnumerable<T>!
static OpenNefia.Core.Utility.Extensions.WithIndex<T>(this System.Collections.Generic.IEnumerable<T>! ie) -> System.Collections.Generic.IEnumerable<(T, int)>!
static OpenNefia.Core.Utility.FormattedMessage.EscapeText(string! text) -> string!
static OpenNefia.Core.Utility.FormattedMessage.FromMarkup(string! markup) -> OpenNefia.Core.Utility.FormattedMessage!
static OpenNefia.Core.Utility.FormattedMessage.FromMarkupPermissive(string! markup) -> OpenNefia.Core.Utility.FormattedMessage!
static OpenNefia.Core.Utility.FormattedMessage.RemoveMarkup(string! text) -> string!
static OpenNefia.Core.Utility.FormattedMessage.ValidMarkup(string! markup) -> bool
static OpenNefia.Core.Utility.ILGeneratorExt.GetRobustGen(this System.Reflection.Emit.DynamicMethod! dynamicMethod) -> OpenNefia.Core.Utility.RobustILGenerator!
static OpenNefia.Core.Utility.ILGeneratorExt.GetRobustGen(this System.Reflection.Emit.ILGenerator! generator) -> OpenNefia.Core.Utility.RobustILGenerator!
static OpenNefia.Core.Utility.NullableHelper.EnsureNotNullableType(this System.Type! type) -> System.Type!
static OpenNefia.Core.Utility.NullableHelper.EnsureNullableType(this System.Type! type) -> System.Type!
static OpenNefia.Core.Utility.NullableHelper.IsMarkedAsNullable(System.Reflection.FieldInfo! field) -> bool
static OpenNefia.Core.Utility.NullableHelper.IsNullable(this System.Type! type) -> bool
static OpenNefia.Core.Utility.NullableHelper.IsNullable(this System.Type! type, out System.Type? underlyingType) -> bool
static OpenNefia.Core.Utility.PosHelpers.Distance(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> double
static OpenNefia.Core.Utility.PosHelpers.EnumerateLine(OpenNefia.Core.Maps.MapCoordinates a, OpenNefia.Core.Maps.MapCoordinates b) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Maps.MapCoordinates>!
static OpenNefia.Core.Utility.PosHelpers.EnumerateLine(OpenNefia.Core.Maths.Vector2i a, OpenNefia.Core.Maths.Vector2i b) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Maths.Vector2i>!
static OpenNefia.Core.Utility.PosHelpers.GetSurroundingCoords(OpenNefia.Core.Maps.MapCoordinates coords) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Maps.MapCoordinates>!
static OpenNefia.Core.Utility.PrettyPrint.PrintFieldSignature(this System.Reflection.FieldInfo! field, bool modifiers = false) -> string!
static OpenNefia.Core.Utility.PrettyPrint.PrintMethodSignature(this System.Reflection.MethodInfo! method, bool modifiers = false, bool arguments = true, bool returnType = true, bool name = true) -> string!
static OpenNefia.Core.Utility.PrettyPrint.PrintParameterSignature(this System.Reflection.ParameterInfo! parameter) -> string!
static OpenNefia.Core.Utility.PrettyPrint.PrintPropertySignature(this System.Reflection.PropertyInfo! property, bool modifiers = false, bool accessors = false) -> string!
static OpenNefia.Core.Utility.PrettyPrint.PrintTypeSignature(this System.Type! type) -> string!
static OpenNefia.Core.Utility.PrettyPrint.PrintUserFacing(object? value) -> string?
static OpenNefia.Core.Utility.PrettyPrint.PrintUserFacingWithType(object? value, out string! typeRep) -> string!
static OpenNefia.Core.Utility.ResourcePath.FromRelativeSystemPath(string! path, string! newSeparator = "/") -> OpenNefia.Core.Utility.ResourcePath!
static OpenNefia.Core.Utility.ResourcePath.operator !=(OpenNefia.Core.Utility.ResourcePath? a, OpenNefia.Core.Utility.ResourcePath? b) -> bool
static OpenNefia.Core.Utility.ResourcePath.operator /(OpenNefia.Core.Utility.ResourcePath! a, OpenNefia.Core.Utility.ResourcePath! b) -> OpenNefia.Core.Utility.ResourcePath!
static OpenNefia.Core.Utility.ResourcePath.operator /(OpenNefia.Core.Utility.ResourcePath! path, string! b) -> OpenNefia.Core.Utility.ResourcePath!
static OpenNefia.Core.Utility.ResourcePath.operator ==(OpenNefia.Core.Utility.ResourcePath? a, OpenNefia.Core.Utility.ResourcePath? b) -> bool
static OpenNefia.Core.Utility.SerializationHelpers.Deserialize<T>(OpenNefia.Core.Utility.ResourcePath! file, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null, bool skipHook = false) -> T?
static OpenNefia.Core.Utility.SerializationHelpers.Serialize<T>(OpenNefia.Core.Utility.ResourcePath! file, T! obj, bool alwaysWrite = false, OpenNefia.Core.Serialization.Manager.ISerializationContext? context = null) -> void
static OpenNefia.Core.Utility.StreamExt.CopyToArray(this System.IO.Stream! stream) -> byte[]!
static OpenNefia.Core.Utility.StreamExt.ReadExact(this System.IO.Stream! stream, int amount) -> byte[]!
static OpenNefia.Core.Utility.StreamExt.ReadExact(this System.IO.Stream! stream, System.Span<byte> buffer) -> void
static OpenNefia.Core.Utility.StreamExt.ReadLines(this System.IO.StreamReader! reader) -> System.Collections.Generic.IEnumerable<string!>!
static OpenNefia.Core.Utility.StreamExt.ReadToEnd(this System.IO.Stream! stream, byte[]! buffer) -> int
static OpenNefia.Core.Utility.StreamExt.ReadToEnd(this System.IO.Stream! stream, System.Span<byte> buffer) -> int
static OpenNefia.Core.Utility.StringHelpers.FirstCharToUpper(this string! input) -> string!
static OpenNefia.Core.Utility.StringHelpers.GetWideLength(this string! str) -> int
static OpenNefia.Core.Utility.StringHelpers.GetWideWidth(this System.Text.Rune rune) -> int
static OpenNefia.Core.Utility.StringHelpers.HashStringToInteger(string! str) -> int
static OpenNefia.Core.Utility.StringHelpers.RemovePrefix(this string! str, string! prefix, System.StringComparison comparisonType = System.StringComparison.InvariantCulture) -> string!
static OpenNefia.Core.Utility.StringHelpers.ToLowerCamelCase(this string! s) -> string!
static OpenNefia.Core.Utility.StringHelpers.WidePadRight(this string! str, int totalWideWidth, char paddingChar = ' ') -> string!
static OpenNefia.Core.Utility.StringHelpers.WideSubstring(this string! str, int? startIndex = null, int? length = null) -> string!
static OpenNefia.Core.Utility.TopologicalSort.FromBeforeAfter<TDatum, TKey, TValue>(System.Collections.Generic.IEnumerable<TDatum>! data, System.Func<TDatum, TKey>! keySelector, System.Func<TDatum, TValue>! valueSelector, System.Func<TDatum, System.Collections.Generic.IEnumerable<TKey>!>! beforeSelector, System.Func<TDatum, System.Collections.Generic.IEnumerable<TKey>!>! afterSelector, bool allowMissing = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.TopologicalSort.GraphNode<TValue>!>!
static OpenNefia.Core.Utility.TopologicalSort.FromBeforeAfter<TDatum, TValue>(System.Collections.Generic.IEnumerable<TDatum>! data, System.Func<TDatum, TValue>! keySelector, System.Func<TDatum, System.Collections.Generic.IEnumerable<TValue>!>! beforeSelector, System.Func<TDatum, System.Collections.Generic.IEnumerable<TValue>!>! afterSelector, bool allowMissing = false) -> System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.TopologicalSort.GraphNode<TValue>!>!
static OpenNefia.Core.Utility.TopologicalSort.Sort<T>(System.Collections.Generic.IEnumerable<OpenNefia.Core.Utility.TopologicalSort.GraphNode<T>!>! nodes) -> System.Collections.Generic.IEnumerable<T>!
static OpenNefia.Core.Utility.TypeAbbreviation.Abbreviate(string! name) -> string!
static OpenNefia.Core.Utility.TypeAbbreviation.Abbreviate(System.Type! type) -> string!
static OpenNefia.Core.Utility.TypeHelpers.GetAllFields(this System.Type! t) -> System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo!>!
static OpenNefia.Core.Utility.TypeHelpers.GetAllNestedTypes(this System.Type! t) -> System.Collections.Generic.IEnumerable<System.Type!>!
static OpenNefia.Core.Utility.TypeHelpers.GetAllProperties(this System.Type! t) -> System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo!>!
static OpenNefia.Core.Utility.TypeHelpers.GetClassHierarchy(this System.Type! t) -> System.Collections.Generic.IEnumerable<System.Type!>!
static OpenNefia.Core.Utility.TypeHelpers.HasBackingField(this System.Type! type, string! propertyName) -> bool
static OpenNefia.Core.Utility.TypeHelpers.HasCustomAttribute<T>(this System.Reflection.MemberInfo! memberInfo) -> bool
static OpenNefia.Core.Utility.TypeHelpers.IsBackingField(this System.Reflection.MemberInfo! memberInfo) -> bool
static OpenNefia.Core.Utility.TypeHelpers.IsBasePropertyDefinition(this System.Reflection.PropertyInfo! propertyInfo) -> bool
static OpenNefia.Core.Utility.TypeHelpers.SelectCommonType(System.Type! type1, System.Type! type2) -> System.Type?
static OpenNefia.Core.Utility.TypeHelpers.TryGetCustomAttribute<T>(this System.Reflection.MemberInfo! memberInfo, out T? attribute) -> bool
static OpenNefia.Core.Utility.UnicodeWidth.GetWidth(string! text) -> int
static OpenNefia.Core.Utility.UnicodeWidth.GetWidth(System.Text.Rune rune) -> int
static OpenNefia.Core.Utility.UnicodeWidth.GetWidthCJK(string! text) -> int
static OpenNefia.Core.Utility.UnicodeWidth.GetWidthCJK(System.Text.Rune charactor) -> int
static OpenNefia.Core.Utility.VectorSerializerUtility.TryParseArgs(string! value, int count, out string![]? args) -> bool
static OpenNefia.Core.Utility.YamlHelpers.AsBool(this YamlDotNet.RepresentationModel.YamlNode! node) -> bool
static OpenNefia.Core.Utility.YamlHelpers.AsColor(this YamlDotNet.RepresentationModel.YamlNode! node, OpenNefia.Core.Maths.Color? fallback = null) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Utility.YamlHelpers.AsEnum<T>(this YamlDotNet.RepresentationModel.YamlNode! node) -> T
static OpenNefia.Core.Utility.YamlHelpers.AsFloat(this YamlDotNet.RepresentationModel.YamlNode! node) -> float
static OpenNefia.Core.Utility.YamlHelpers.AsHexColor(this YamlDotNet.RepresentationModel.YamlNode! node, OpenNefia.Core.Maths.Color? fallback = null) -> OpenNefia.Core.Maths.Color
static OpenNefia.Core.Utility.YamlHelpers.AsInt(this YamlDotNet.RepresentationModel.YamlNode! node) -> int
static OpenNefia.Core.Utility.YamlHelpers.AsResourcePath(this YamlDotNet.RepresentationModel.YamlNode! node) -> OpenNefia.Core.Utility.ResourcePath!
static OpenNefia.Core.Utility.YamlHelpers.AsString(this YamlDotNet.RepresentationModel.YamlNode! node) -> string!
static OpenNefia.Core.Utility.YamlHelpers.AsUInt(this YamlDotNet.RepresentationModel.YamlNode! node) -> uint
static OpenNefia.Core.Utility.YamlHelpers.AsVector2(this YamlDotNet.RepresentationModel.YamlNode! node) -> OpenNefia.Core.Maths.Vector2
static OpenNefia.Core.Utility.YamlHelpers.AsVector2i(this YamlDotNet.RepresentationModel.YamlNode! node) -> OpenNefia.Core.Maths.Vector2i
static OpenNefia.Core.Utility.YamlHelpers.AsVector3(this YamlDotNet.RepresentationModel.YamlNode! node) -> OpenNefia.Core.Maths.Vector3
static OpenNefia.Core.Utility.YamlHelpers.AsVector4(this YamlDotNet.RepresentationModel.YamlNode! node) -> OpenNefia.Core.Maths.Vector4
static OpenNefia.Core.Utility.YamlHelpers.GetNode(this YamlDotNet.RepresentationModel.YamlMappingNode! mapping, string! key) -> YamlDotNet.RepresentationModel.YamlNode!
static OpenNefia.Core.Utility.YamlHelpers.GetNode<T>(this YamlDotNet.RepresentationModel.YamlMappingNode! mapping, string! key) -> T!
static OpenNefia.Core.Utility.YamlHelpers.HasNode(this YamlDotNet.RepresentationModel.YamlMappingNode! mapping, string! key) -> bool
static OpenNefia.Core.Utility.YamlHelpers.TryGetNode(this YamlDotNet.RepresentationModel.YamlMappingNode! mapping, string! key, out YamlDotNet.RepresentationModel.YamlNode? returnNode) -> bool
static OpenNefia.Core.Utility.YamlHelpers.TryGetNode<T>(this YamlDotNet.RepresentationModel.YamlMappingNode! mapping, string! key, out T? returnNode) -> bool
static OpenNefia.Core.Utility.YamlHelpers.YamlMappingToDict(YamlDotNet.RepresentationModel.YamlMappingNode! mapping) -> System.Collections.Generic.Dictionary<string!, YamlDotNet.RepresentationModel.YamlNode!>!
static OpenNefia.Core.ViewVariables.ViewVariablesUtility.TryGetViewVariablesAccess(System.Reflection.MemberInfo! info, out OpenNefia.Core.ViewVariables.VVAccess? access) -> bool
static OpenNefia.Core.ViewVariables.ViewVariablesUtility.TypeHasVisibleMembers(System.Type! type) -> bool
static OpenNefia.XamlInjectors.CompilerExtensions.MathParsing.Single.get -> Pidgin.Parser<char, float>!
static OpenNefia.XamlInjectors.CompilerExtensions.MathParsing.Single1.get -> Pidgin.Parser<char, float>!
static OpenNefia.XamlInjectors.CompilerExtensions.MathParsing.Single2.get -> Pidgin.Parser<char, (float, float)>!
static OpenNefia.XamlInjectors.CompilerExtensions.MathParsing.Single4.get -> Pidgin.Parser<char, (float, float, float, float)>!
static OpenNefia.XamlInjectors.CompilerExtensions.MathParsing.Thickness.get -> Pidgin.Parser<char, float[]!>!
static readonly OpenNefia.Core.Areas.AreaFloorId.Invalid -> OpenNefia.Core.Areas.AreaFloorId
static readonly OpenNefia.Core.Areas.AreaId.FirstId -> OpenNefia.Core.Areas.AreaId
static readonly OpenNefia.Core.Areas.AreaId.Nullspace -> OpenNefia.Core.Areas.AreaId
static readonly OpenNefia.Core.Areas.GlobalAreaId.Invalid -> OpenNefia.Core.Areas.GlobalAreaId
static readonly OpenNefia.Core.Asynchronous.RobustTaskScheduler.Instance -> OpenNefia.Core.Asynchronous.RobustTaskScheduler!
static readonly OpenNefia.Core.Containers.ContainerId.Invalid -> OpenNefia.Core.Containers.ContainerId
static readonly OpenNefia.Core.CVars.AudioMidiDevice -> OpenNefia.Core.Configuration.CVarDef<int>!
static readonly OpenNefia.Core.CVars.AudioMusic -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.AudioPositionalAudio -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.AudioSound -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.DebugDevelopmentMode -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.DebugTargetFps -> OpenNefia.Core.Configuration.CVarDef<int>!
static readonly OpenNefia.Core.CVars.DisplayDisplayNumber -> OpenNefia.Core.Configuration.CVarDef<int>!
static readonly OpenNefia.Core.CVars.DisplayHeight -> OpenNefia.Core.Configuration.CVarDef<int>!
static readonly OpenNefia.Core.CVars.DisplayHighDPI -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.DisplayTitle -> OpenNefia.Core.Configuration.CVarDef<string!>!
static readonly OpenNefia.Core.CVars.DisplayUIScale -> OpenNefia.Core.Configuration.CVarDef<float>!
static readonly OpenNefia.Core.CVars.DisplayVSync -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.DisplayWidth -> OpenNefia.Core.Configuration.CVarDef<int>!
static readonly OpenNefia.Core.CVars.DisplayWindowMode -> OpenNefia.Core.Configuration.CVarDef<OpenNefia.Core.Graphics.WindowMode>!
static readonly OpenNefia.Core.CVars.LanguageLanguage -> OpenNefia.Core.Configuration.CVarDef<string!>!
static readonly OpenNefia.Core.CVars.LogEnabled -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.LogFormat -> OpenNefia.Core.Configuration.CVarDef<string!>!
static readonly OpenNefia.Core.CVars.LogLevel -> OpenNefia.Core.Configuration.CVarDef<OpenNefia.Core.Log.LogLevel>!
static readonly OpenNefia.Core.CVars.LogPath -> OpenNefia.Core.Configuration.CVarDef<string!>!
static readonly OpenNefia.Core.CVars.LogRuntimeLog -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.ReplAutoloadOnStartup -> OpenNefia.Core.Configuration.CVarDef<bool>!
static readonly OpenNefia.Core.CVars.ReplAutoloadScript -> OpenNefia.Core.Configuration.CVarDef<string!>!
static readonly OpenNefia.Core.GameObjects.EntityUid.FirstUid -> OpenNefia.Core.GameObjects.EntityUid
static readonly OpenNefia.Core.GameObjects.EntityUid.Invalid -> OpenNefia.Core.GameObjects.EntityUid
static readonly OpenNefia.Core.GameObjects.SlotId.Invalid -> OpenNefia.Core.GameObjects.SlotId
static readonly OpenNefia.Core.Input.EngineKeyFunctions.CloseModals -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.East -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.North -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.Northeast -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.Northwest -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.QuickLoadGame -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.QuickSaveGame -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.ShowDebugConsole -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.ShowDebugView -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.ShowEscapeMenu -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.South -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.Southeast -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.Southwest -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextBackspace -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCopy -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorBegin -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorEnd -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorLeft -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorRight -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorSelect -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorSelectBegin -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorSelectEnd -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorSelectLeft -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorSelectRight -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorSelectWordLeft -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorSelectWordRight -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorWordLeft -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCursorWordRight -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextCut -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextDelete -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextHistoryNext -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextHistoryPrev -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextPageDown -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextPageUp -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextPaste -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextReleaseFocus -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextScrollToBottom -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextSelectAll -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextSubmit -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.TextTabComplete -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UICancel -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UIClick -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UIDown -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UILeft -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UIMiddleClick -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UINextPage -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UINextTab -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UIPreviousPage -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UIPreviousTab -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UIRight -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UIRightClick -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UISelect -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.UIUp -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.Wait -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Input.EngineKeyFunctions.West -> OpenNefia.Core.Input.BoundKeyFunction
static readonly OpenNefia.Core.Locale.LanguagePrototypeOf.English -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!>
static readonly OpenNefia.Core.Locale.LanguagePrototypeOf.German -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!>
static readonly OpenNefia.Core.Locale.LanguagePrototypeOf.Japanese -> OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Locale.LanguagePrototype!>
static readonly OpenNefia.Core.LocaleKey.Empty -> OpenNefia.Core.LocaleKey
static readonly OpenNefia.Core.Maps.EntityCoordinates.Invalid -> OpenNefia.Core.Maps.EntityCoordinates
static readonly OpenNefia.Core.Maps.MapCoordinates.Global -> OpenNefia.Core.Maps.MapCoordinates
static readonly OpenNefia.Core.Maps.MapCoordinates.Nullspace -> OpenNefia.Core.Maps.MapCoordinates
static readonly OpenNefia.Core.Maps.MapId.FirstId -> OpenNefia.Core.Maps.MapId
static readonly OpenNefia.Core.Maps.MapId.Global -> OpenNefia.Core.Maps.MapId
static readonly OpenNefia.Core.Maps.MapId.Nullspace -> OpenNefia.Core.Maps.MapId
static readonly OpenNefia.Core.Maps.Tile.Empty -> OpenNefia.Core.Maps.Tile
static readonly OpenNefia.Core.Maths.Box2.UnitCentered -> OpenNefia.Core.Maths.Box2
static readonly OpenNefia.Core.Maths.IntRange.One -> OpenNefia.Core.Maths.IntRange
static readonly OpenNefia.Core.Maths.IntRange.Zero -> OpenNefia.Core.Maths.IntRange
static readonly OpenNefia.Core.Maths.Matrix3.Identity -> OpenNefia.Core.Maths.Matrix3
static readonly OpenNefia.Core.Maths.Matrix3.Zero -> OpenNefia.Core.Maths.Matrix3
static readonly OpenNefia.Core.Maths.Matrix4.Identity -> OpenNefia.Core.Maths.Matrix4
static readonly OpenNefia.Core.Maths.Quaternion.Identity -> OpenNefia.Core.Maths.Quaternion
static readonly OpenNefia.Core.Maths.Vector2.Infinity -> OpenNefia.Core.Maths.Vector2
static readonly OpenNefia.Core.Maths.Vector2.NaN -> OpenNefia.Core.Maths.Vector2
static readonly OpenNefia.Core.Maths.Vector2.One -> OpenNefia.Core.Maths.Vector2
static readonly OpenNefia.Core.Maths.Vector2.UnitX -> OpenNefia.Core.Maths.Vector2
static readonly OpenNefia.Core.Maths.Vector2.UnitY -> OpenNefia.Core.Maths.Vector2
static readonly OpenNefia.Core.Maths.Vector2.Zero -> OpenNefia.Core.Maths.Vector2
static readonly OpenNefia.Core.Maths.Vector2i.One -> OpenNefia.Core.Maths.Vector2i
static readonly OpenNefia.Core.Maths.Vector2i.Zero -> OpenNefia.Core.Maths.Vector2i
static readonly OpenNefia.Core.Maths.Vector3.One -> OpenNefia.Core.Maths.Vector3
static readonly OpenNefia.Core.Maths.Vector3.SizeInBytes -> int
static readonly OpenNefia.Core.Maths.Vector3.UnitX -> OpenNefia.Core.Maths.Vector3
static readonly OpenNefia.Core.Maths.Vector3.UnitY -> OpenNefia.Core.Maths.Vector3
static readonly OpenNefia.Core.Maths.Vector3.UnitZ -> OpenNefia.Core.Maths.Vector3
static readonly OpenNefia.Core.Maths.Vector3.Zero -> OpenNefia.Core.Maths.Vector3
static readonly OpenNefia.Core.Maths.Vector4.One -> OpenNefia.Core.Maths.Vector4
static readonly OpenNefia.Core.Maths.Vector4.SizeInBytes -> int
static readonly OpenNefia.Core.Maths.Vector4.UnitW -> OpenNefia.Core.Maths.Vector4
static readonly OpenNefia.Core.Maths.Vector4.UnitX -> OpenNefia.Core.Maths.Vector4
static readonly OpenNefia.Core.Maths.Vector4.UnitY -> OpenNefia.Core.Maths.Vector4
static readonly OpenNefia.Core.Maths.Vector4.UnitZ -> OpenNefia.Core.Maths.Vector4
static readonly OpenNefia.Core.Maths.Vector4.Zero -> OpenNefia.Core.Maths.Vector4
static readonly OpenNefia.Core.Prototypes.PrototypeId<T>.Invalid -> OpenNefia.Core.Prototypes.PrototypeId<T!>
static readonly OpenNefia.Core.SaveGames.SaveGameConstants.ScreenshotPath -> OpenNefia.Core.Utility.ResourcePath!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.AnchorBottomProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.AnchorLeftProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.AnchorRightProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.AnchorTopProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.DebugProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty<bool>!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowHorizontalProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.GrowVerticalProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.MarginBottomProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.MarginLeftProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.MarginRightProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.LayoutContainer.MarginTopProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.PopupContainer.AltOriginProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.PopupContainer.PopupOriginProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty!
static readonly OpenNefia.Core.UI.Wisp.Controls.TabContainer.TabTitleProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty<string?>!
static readonly OpenNefia.Core.UI.Wisp.Controls.TabContainer.TabVisibleProperty -> OpenNefia.Core.UI.Wisp.AttachedProperty<bool>!
static readonly OpenNefia.Core.UI.Wisp.Styling.StyleNano.NanoGold -> OpenNefia.Core.Maths.Color
static readonly OpenNefia.Core.Utility.EncodingHelpers.UTF8 -> System.Text.Encoding!
static readonly OpenNefia.Core.Utility.FormattedMessage.TagPop.Instance -> OpenNefia.Core.Utility.FormattedMessage.TagPop!
static readonly OpenNefia.Core.Utility.ResourcePath.Root -> OpenNefia.Core.Utility.ResourcePath!
static readonly OpenNefia.Core.Utility.ResourcePath.Self -> OpenNefia.Core.Utility.ResourcePath!
virtual OpenNefia.Core.Containers.BaseContainer.CanInsert(OpenNefia.Core.GameObjects.EntityUid toinsert, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
virtual OpenNefia.Core.Containers.BaseContainer.CanRemove(OpenNefia.Core.GameObjects.EntityUid toremove, OpenNefia.Core.GameObjects.IEntityManager? entMan = null) -> bool
virtual OpenNefia.Core.Containers.BaseContainer.InternalInsert(OpenNefia.Core.GameObjects.EntityUid toinsert, OpenNefia.Core.GameObjects.IEntityManager! entMan) -> void
virtual OpenNefia.Core.Containers.BaseContainer.InternalRemove(OpenNefia.Core.GameObjects.EntityUid toremove, OpenNefia.Core.GameObjects.IEntityManager! entMan) -> void
virtual OpenNefia.Core.Containers.BaseContainer.Shutdown() -> void
virtual OpenNefia.Core.ContentPack.ModEntryPoint.Dispose(bool disposing) -> void
virtual OpenNefia.Core.ContentPack.ModEntryPoint.Init() -> void
virtual OpenNefia.Core.ContentPack.ModEntryPoint.PostInit() -> void
virtual OpenNefia.Core.ContentPack.ModEntryPoint.PreInit() -> void
virtual OpenNefia.Core.ContentPack.ModEntryPoint.Update(OpenNefia.Core.ContentPack.ModUpdateLevel level, OpenNefia.Core.Timing.FrameEventArgs frameEventArgs) -> void
virtual OpenNefia.Core.GameObjects.Component.Initialize() -> void
virtual OpenNefia.Core.GameObjects.Component.OnAdd() -> void
virtual OpenNefia.Core.GameObjects.Component.OnRemove() -> void
virtual OpenNefia.Core.GameObjects.Component.Shutdown() -> void
virtual OpenNefia.Core.GameObjects.Component.Startup() -> void
virtual OpenNefia.Core.GameObjects.EntityManager.CreateEntityUninitialized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? prototypeId, OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
virtual OpenNefia.Core.GameObjects.EntityManager.CreateEntityUninitialized(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? prototypeId, OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
virtual OpenNefia.Core.GameObjects.EntityManager.SpawnEntity(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? protoId, OpenNefia.Core.Maps.EntityCoordinates coordinates, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
virtual OpenNefia.Core.GameObjects.EntityManager.SpawnEntity(OpenNefia.Core.Prototypes.PrototypeId<OpenNefia.Core.Prototypes.EntityPrototype!>? protoId, OpenNefia.Core.Maps.MapCoordinates coordinates, OpenNefia.Core.GameObjects.IEntityLoadContext? context = null) -> OpenNefia.Core.GameObjects.EntityUid
virtual OpenNefia.Core.GameObjects.EntityManager.ToPrettyString(OpenNefia.Core.GameObjects.EntityUid uid) -> OpenNefia.Core.GameObjects.EntityStringRepresentation
virtual OpenNefia.Core.GameObjects.EntitySystem.FrameUpdate(float frameTime) -> void
virtual OpenNefia.Core.GameObjects.EntitySystem.Initialize() -> void
virtual OpenNefia.Core.GameObjects.EntitySystem.Shutdown() -> void
virtual OpenNefia.Core.GameObjects.EntitySystem.Update(float frameTime) -> void
virtual OpenNefia.Core.Input.Binding.InputCmdHandler.Disabled(OpenNefia.Core.Game.IGameSessionManager? session) -> OpenNefia.Core.GameObjects.TurnResult?
virtual OpenNefia.Core.Input.Binding.InputCmdHandler.Enabled(OpenNefia.Core.Game.IGameSessionManager? session) -> OpenNefia.Core.GameObjects.TurnResult?
virtual OpenNefia.Core.Input.InputManager.MouseScreenPosition.get -> OpenNefia.Core.Maps.ScreenCoordinates
virtual OpenNefia.Core.Locale.LocalizationManager.GetLocaleEnvScript() -> string!
virtual OpenNefia.Core.Maps.TileDefinitionManager.Initialize() -> void
virtual OpenNefia.Core.Maps.TileDefinitionManager.Register(OpenNefia.Core.Maps.TilePrototype! tileDef) -> void
virtual OpenNefia.Core.Reflection.ReflectionManager.TypePrefixes.get -> System.Collections.Generic.IEnumerable<string!>!
virtual OpenNefia.Core.Rendering.BaseGlobalDrawable.CanEnqueue() -> bool
virtual OpenNefia.Core.Rendering.BaseGlobalDrawable.Finish() -> void
virtual OpenNefia.Core.Rendering.BaseGlobalDrawable.OnEnqueue() -> void
virtual OpenNefia.Core.Rendering.BaseGlobalDrawable.OnThemeSwitched() -> void
virtual OpenNefia.Core.Rendering.BaseMapDrawable.CanEnqueue() -> bool
virtual OpenNefia.Core.Rendering.BaseMapDrawable.Finish() -> void
virtual OpenNefia.Core.Rendering.BaseMapDrawable.OnEnqueue() -> void
virtual OpenNefia.Core.Rendering.BaseMapDrawable.OnThemeSwitched() -> void
virtual OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.Initialize() -> void
virtual OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.OnThemeSwitched() -> void
virtual OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.RedrawAll() -> void
virtual OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.RedrawDirtyTiles(System.Collections.Generic.HashSet<OpenNefia.Core.Maths.Vector2i>! dirtyTilesThisTurn) -> void
virtual OpenNefia.Core.Rendering.TileDrawLayers.BaseTileLayer.SetMap(OpenNefia.Core.Maps.IMap! map) -> void
virtual OpenNefia.Core.ResourceManagement.BaseResource.Dispose() -> void
virtual OpenNefia.Core.ResourceManagement.BaseResource.Fallback.get -> OpenNefia.Core.Utility.ResourcePath?
virtual OpenNefia.Core.ResourceManagement.BaseResource.Reload(OpenNefia.Core.ResourceManagement.IResourceCache! cache, OpenNefia.Core.Utility.ResourcePath! path, System.Threading.CancellationToken ct = default(System.Threading.CancellationToken)) -> void
virtual OpenNefia.Core.Stats.Stat<T>.Equals(OpenNefia.Core.Stats.Stat<T>? other) -> bool
virtual OpenNefia.Core.Stats.Stat<T>.Reset() -> void
virtual OpenNefia.Core.UI.Element.BaseDrawable.ContainsPoint(OpenNefia.Core.Maths.Vector2 point) -> bool
virtual OpenNefia.Core.UI.Element.BaseDrawable.Dispose() -> void
virtual OpenNefia.Core.UI.Element.BaseDrawable.Position.get -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Element.BaseDrawable.SetPosition(float x, float y) -> void
virtual OpenNefia.Core.UI.Element.BaseDrawable.SetSize(float width, float height) -> void
virtual OpenNefia.Core.UI.Element.BaseDrawable.Size.get -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Element.BaseDrawable.UIScale.get -> float
virtual OpenNefia.Core.UI.Element.UiElement.ChildAdded(OpenNefia.Core.UI.Element.UiElement! newChild) -> void
virtual OpenNefia.Core.UI.Element.UiElement.ChildMoved(OpenNefia.Core.UI.Element.UiElement! child, int oldIndex, int newIndex) -> void
virtual OpenNefia.Core.UI.Element.UiElement.ChildRemoved(OpenNefia.Core.UI.Element.UiElement! child) -> void
virtual OpenNefia.Core.UI.Element.UiElement.ControlFocusExited() -> void
virtual OpenNefia.Core.UI.Element.UiElement.Deparented() -> void
virtual OpenNefia.Core.UI.Element.UiElement.Dispose(bool disposing) -> void
virtual OpenNefia.Core.UI.Element.UiElement.EnteredTree() -> void
virtual OpenNefia.Core.UI.Element.UiElement.ExactSize.get -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Element.UiElement.ExactSize.set -> void
virtual OpenNefia.Core.UI.Element.UiElement.ExitedTree() -> void
virtual OpenNefia.Core.UI.Element.UiElement.GetPreferredSize(out OpenNefia.Core.Maths.Vector2 size) -> void
virtual OpenNefia.Core.UI.Element.UiElement.GlobalPixelPosition.get -> OpenNefia.Core.Maths.Vector2i
virtual OpenNefia.Core.UI.Element.UiElement.GlobalPosition.get -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Element.UiElement.GrabFocus() -> void
virtual OpenNefia.Core.UI.Element.UiElement.HasKeyboardFocus() -> bool
virtual OpenNefia.Core.UI.Element.UiElement.KeyBindDown(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
virtual OpenNefia.Core.UI.Element.UiElement.KeyBindUp(OpenNefia.Core.UI.Element.GUIBoundKeyEventArgs! args) -> void
virtual OpenNefia.Core.UI.Element.UiElement.KeyboardFocusEntered() -> void
virtual OpenNefia.Core.UI.Element.UiElement.KeyboardFocusExited() -> void
virtual OpenNefia.Core.UI.Element.UiElement.KeyHeld(OpenNefia.Core.UI.Element.GUIKeyEventArgs! args) -> void
virtual OpenNefia.Core.UI.Element.UiElement.Localize(OpenNefia.Core.LocaleKey key) -> void
virtual OpenNefia.Core.UI.Element.UiElement.MakeKeyHints() -> System.Collections.Generic.List<OpenNefia.Core.UI.UiKeyHint!>!
virtual OpenNefia.Core.UI.Element.UiElement.MaxSize.get -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Element.UiElement.MaxSize.set -> void
virtual OpenNefia.Core.UI.Element.UiElement.MinSize.get -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Element.UiElement.MinSize.set -> void
virtual OpenNefia.Core.UI.Element.UiElement.ModalRemoved() -> void
virtual OpenNefia.Core.UI.Element.UiElement.MouseEntered() -> void
virtual OpenNefia.Core.UI.Element.UiElement.MouseExited() -> void
virtual OpenNefia.Core.UI.Element.UiElement.MouseMove(OpenNefia.Core.UI.Element.GUIMouseMoveEventArgs! args) -> void
virtual OpenNefia.Core.UI.Element.UiElement.MouseWheel(OpenNefia.Core.UI.Element.GUIMouseWheelEventArgs! args) -> void
virtual OpenNefia.Core.UI.Element.UiElement.Parented(OpenNefia.Core.UI.Element.UiElement! newParent) -> void
virtual OpenNefia.Core.UI.Element.UiElement.RelativePosition.get -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Element.UiElement.RelativePosition.set -> void
virtual OpenNefia.Core.UI.Element.UiElement.Resized() -> void
virtual OpenNefia.Core.UI.Element.UiElement.Root.get -> OpenNefia.Core.UI.Layer.UiLayer?
virtual OpenNefia.Core.UI.Element.UiElement.TextEntered(OpenNefia.Core.UI.Element.GUITextEventArgs! args) -> void
virtual OpenNefia.Core.UI.Element.UiElement.UIScaleChanged(OpenNefia.Core.UI.Element.GUIScaleChangedEventArgs! args) -> void
virtual OpenNefia.Core.UI.Element.UiElement.Visible.get -> bool
virtual OpenNefia.Core.UI.Element.UiElement.Visible.set -> void
virtual OpenNefia.Core.UI.Layer.UiLayer.DefaultZOrder.get -> int?
virtual OpenNefia.Core.UI.Layer.UiLayer.GetPreferredBounds(out OpenNefia.Core.Maths.UIBox2 bounds) -> void
virtual OpenNefia.Core.UI.Layer.UiLayer.OnQuery() -> void
virtual OpenNefia.Core.UI.Layer.UiLayer.OnQueryFinish() -> void
virtual OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.Cancel() -> void
virtual OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.Error(System.Exception! ex) -> void
virtual OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.Finish(TResult! result) -> void
virtual OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.GetResult() -> OpenNefia.Core.UI.UiResult<TResult!>?
virtual OpenNefia.Core.UI.Layer.UiLayerWithResult<TArgs, TResult>.Initialize(TArgs args) -> void
virtual OpenNefia.Core.UI.Wisp.Controls.BaseButton.DrawModeChanged() -> void
virtual OpenNefia.Core.UI.Wisp.Controls.Range.Rounded.get -> bool
virtual OpenNefia.Core.UI.Wisp.Controls.Range.Rounded.set -> void
virtual OpenNefia.Core.UI.Wisp.Controls.Range.SetValueWithoutEvent(float newValue) -> void
virtual OpenNefia.Core.UI.Wisp.Controls.Range.Value.get -> float
virtual OpenNefia.Core.UI.Wisp.Controls.Range.Value.set -> void
virtual OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.Close() -> void
virtual OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.GetDragModeFor(OpenNefia.Core.Maths.Vector2 relativeMousePos) -> OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.DragMode
virtual OpenNefia.Core.UI.Wisp.CustomControls.BaseWindow.Opened() -> void
virtual OpenNefia.Core.UI.Wisp.CustomControls.DefaultWindow.ContentsMinimumSize.get -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Wisp.Drawing.StyleBox.GetDefaultContentMargin(OpenNefia.Core.UI.Wisp.Drawing.StyleBox.Margin margin) -> float
virtual OpenNefia.Core.UI.Wisp.WispControl.ArrangeCore(OpenNefia.Core.Maths.UIBox2 finalRect) -> void
virtual OpenNefia.Core.UI.Wisp.WispControl.ArrangeOverride(OpenNefia.Core.Maths.Vector2 finalSize) -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Wisp.WispControl.MeasureCore(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Wisp.WispControl.MeasureOverride(OpenNefia.Core.Maths.Vector2 availableSize) -> OpenNefia.Core.Maths.Vector2
virtual OpenNefia.Core.UI.Wisp.WispControl.StylePropertiesChanged() -> void
virtual OpenNefia.Core.UI.Wisp.WispControl.XamlChildren.get -> System.Collections.Generic.ICollection<OpenNefia.Core.UI.Element.UiElement!>!
virtual OpenNefia.Core.UI.Wisp.WispControl.XamlChildren.set -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.DeclareLocal(System.Type! localType) -> System.Reflection.Emit.LocalBuilder!
virtual OpenNefia.Core.Utility.RobustILGenerator.DeclareLocal(System.Type! localType, bool pinned) -> System.Reflection.Emit.LocalBuilder!
virtual OpenNefia.Core.Utility.RobustILGenerator.DefineLabel() -> System.Reflection.Emit.Label
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, byte arg) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, double arg) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, float arg) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, int arg) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, long arg) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, short arg) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, string! str) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo! con) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[]! labels) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder! local) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.SignatureHelper! signature) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo! field) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo! meth) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.Emit(System.Reflection.Emit.OpCode opcode, System.Type! cls) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.EmitCall(System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo! methodInfo, params System.Type![]? optionalParameterTypes) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.MarkLabel(System.Reflection.Emit.Label loc) -> void
virtual OpenNefia.Core.Utility.RobustILGenerator.ThrowException(System.Type! excType) -> void